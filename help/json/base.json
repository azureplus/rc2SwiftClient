{
   "help" : [
      {
         "name" : "abbreviate",
         "title" : "Abbreviate Strings",
         "package" : "base",
         "desc" : " Abbreviate strings to at least minlength characters, such that they remain unique (if they were), unless strict = TRUE. "
      },
      {
         "title" : "Approximate String Matching (Fuzzy Matching)",
         "package" : "base",
         "desc" : " Searches for approximate matches to pattern (the first argument) within each element of the string x (the second argument) using the generalized Levenshtein edit distance (the minimal possibly weighted number of insertions, deletions and substitutions needed to transform one string into another). ",
         "name" : "agrep"
      },
      {
         "name" : "all.equal",
         "desc" : " all.equal(x, y) is a utility to compare objects x and y testing near equality. If they are different, comparison is still made to some extent, and a report of the differences is returned. Do not use all.equal directly in if expressions---either use isTRUE(all.equal(....)) or identical if appropriate. ",
         "package" : "base",
         "title" : "Test if Two Objects are (Nearly) Equal"
      },
      {
         "title" : "Are All Values True?",
         "package" : "base",
         "desc" : " Given a set of logical vectors, are all of the values true? ",
         "name" : "all"
      },
      {
         "name" : "all.names",
         "desc" : " Return a character vector containing all the names which occur in an expression or call. ",
         "package" : "base",
         "title" : "Find All Names in an Expression"
      },
      {
         "package" : "base",
         "desc" : " Given a set of logical vectors, is at least one of the values true? ",
         "title" : "Are Some Values True?",
         "name" : "any"
      },
      {
         "name" : "aperm",
         "title" : "Array Transposition",
         "package" : "base",
         "desc" : " Transpose an array by permuting its dimensions and optionally resizing it. "
      },
      {
         "desc" : " Add elements to a vector. ",
         "package" : "base",
         "title" : "Vector Merging",
         "name" : "append"
      },
      {
         "package" : "base",
         "desc" : " Returns a vector or array or list of values obtained by applying a function to margins of an array or matrix. ",
         "title" : "Apply Functions Over Array Margins",
         "name" : "apply"
      },
      {
         "package" : "base",
         "desc" : " Displays the argument names and corresponding default values of a function or primitive. ",
         "title" : "Argument List of a Function",
         "name" : "args"
      },
      {
         "name" : "Arithmetic",
         "desc" : " These unary and binary operators perform arithmetic on numeric or complex vectors (or objects which can be coerced to them). ",
         "package" : "base",
         "title" : "Arithmetic Operators"
      },
      {
         "name" : "array",
         "desc" : " Creates or tests for arrays. ",
         "package" : "base",
         "title" : "Multi-way Arrays"
      },
      {
         "name" : "as.data.frame",
         "desc" : " Functions to check if an object is a data frame, or coerce it if possible. ",
         "package" : "base",
         "title" : " Coerce to a Data Frame "
      },
      {
         "name" : "as.Date",
         "title" : "Date Conversion Functions to and from Character",
         "package" : "base",
         "desc" : " Functions to convert between character representations and objects of class \"Date\" representing calendar dates. "
      },
      {
         "title" : " Coerce to an Environment Object ",
         "desc" : " A generic function coercing an object to an environment. A number or a character string is converted to the corresponding environment on the search path. ",
         "package" : "base",
         "name" : "as.environment"
      },
      {
         "title" : "Convert Object to Function",
         "package" : "base",
         "desc" : " as.function is a generic function which is used to convert objects to functions. as.function.default works on a list x, which should contain the concatenation of a formal argument list and an expression or an object of mode \"call\" which will become the function body. The function will be defined in a specified environment, by default that of the caller. ",
         "name" : "as.function"
      },
      {
         "title" : "Date-time Conversion Functions",
         "desc" : " Functions to manipulate objects of classes \"POSIXlt\" and \"POSIXct\" representing calendar dates and times. ",
         "package" : "base",
         "name" : "as.POSIX*"
      },
      {
         "title" : "Inhibit Interpretation/Conversion of Objects",
         "package" : "base",
         "desc" : " Change the class of an object to indicate that it should be treated as is. ",
         "name" : "AsIs"
      },
      {
         "title" : "Assign a Value to a Name",
         "desc" : " Assign a value to a name in an environment. ",
         "package" : "base",
         "name" : "assign"
      },
      {
         "desc" : " Assign a value to a name. ",
         "package" : "base",
         "title" : "Assignment Operators",
         "name" : "assignOps"
      },
      {
         "desc" : " The database is attached to the search path. This means that the database is searched by when evaluating a variable, so objects in the database can be accessed by simply giving their names. ",
         "package" : "base",
         "title" : "Attach Set of R Objects to Search Path",
         "name" : "attach"
      },
      {
         "name" : "attr",
         "package" : "base",
         "desc" : " Get or set specific attributes of an object. ",
         "title" : "Object Attributes"
      },
      {
         "name" : "attributes",
         "package" : "base",
         "desc" : " These functions access an object's attributes. The first form below returns the object's attribute list. The replacement forms uses the list on the right-hand side of the assignment as the object's attributes (if appropriate). ",
         "title" : "Object Attribute Lists"
      },
      {
         "package" : "base",
         "desc" : " autoload creates a promise-to-evaluate autoloader and stores it with name name in .AutoloadEnv environment. When attempts to evaluate name, autoloader is run, the package is loaded and name is re-evaluated in the new package's environment. The result is that behaves as if file was loaded but it does not occupy memory. .Autoloaded contains the names of the packages for which autoloading has been promised. ",
         "title" : "On-demand Loading of Packages",
         "name" : "autoload"
      },
      {
         "name" : "backsolve",
         "desc" : " Solves a triangular system of linear equations. ",
         "package" : "base",
         "title" : "Solve an Upper or Lower Triangular System"
      },
      {
         "name" : "base-defunct",
         "package" : "base",
         "desc" : " The functions or variables listed here are no longer part of as they are no longer needed. ",
         "title" : "Defunct Functions in Package base"
      },
      {
         "name" : "base-deprecated",
         "title" : "Deprecated Functions in Package base",
         "package" : "base",
         "desc" : " These functions are provided for compatibility with older versions of only, and may be defunct as soon as the next release. "
      },
      {
         "title" : "Internal Objects in Package base",
         "package" : "base",
         "desc" : " Internal objects in the base package which are only user-visible because of the special nature of the base namespace. ",
         "name" : "base-internal"
      },
      {
         "name" : "base-package",
         "package" : "base",
         "desc" : " Base R functions ",
         "title" : " The R Base Package "
      },
      {
         "desc" : " basename removes all of the path up to and including the last path separator (if any). dirname returns the part of the path up to but excluding the last path separator, or \".\" if there is no path separator. ",
         "package" : "base",
         "title" : "Manipulate File Paths",
         "name" : "basename"
      },
      {
         "title" : "Bessel Functions",
         "package" : "base",
         "desc" : " Bessel Functions of integer and fractional order, of first and second kind, J_{\\ u}J(nu) and Y_{\\ u}Y(nu), and Modified Bessel functions (of first and third kind), I_{\\ u}I(nu) and K_{\\ u}K(nu). ",
         "name" : "Bessel"
      },
      {
         "title" : "Bin a Numeric Vector",
         "package" : "base",
         "desc" : " Bin a numeric vector and return integer codes for the binning. ",
         "name" : ".bincode"
      },
      {
         "name" : "bindenv",
         "title" : "Binding and Environment Locking, Active Bindings",
         "package" : "base",
         "desc" : " These functions represent an experimental interface for adjustments to environments and bindings within environments. They allow for locking environments as well as individual bindings, and for linking a variable to a function. "
      },
      {
         "title" : "Bitwise Logical Operations",
         "desc" : " Logical operations on integer vectors with elements viewed as sets of bits. ",
         "package" : "base",
         "name" : "bitwise"
      },
      {
         "title" : "Access to and Manipulation of the Body of a Function",
         "desc" : " Get or set the body of a function. ",
         "package" : "base",
         "name" : "body"
      },
      {
         "desc" : " An analogue of the LISP backquote macro. bquote quotes its argument except that terms wrapped in .() are evaluated in the specified where environment. ",
         "package" : "base",
         "title" : "Partial substitution in expressions",
         "name" : "bquote"
      },
      {
         "package" : "base",
         "desc" : " Interrupt the execution of an expression and allow the inspection of the environment where browser was called from. ",
         "title" : "Environment Browser",
         "name" : "browser"
      },
      {
         "name" : "browserText",
         "desc" : " A call to browser can provide context by supplying either a text argument or a condition argument. These functions can be used to retrieve either of these arguments. ",
         "package" : "base",
         "title" : " Functions to Retrieve Values Supplied by Calls to the Browser "
      },
      {
         "name" : "builtins",
         "package" : "base",
         "desc" : " Return the names of all the built-in objects. These are fetched directly from the symbol table of the interpreter. ",
         "title" : "Returns the Names of All Built-in Objects"
      },
      {
         "desc" : " Function by is an object-oriented wrapper for tapply applied to data frames. ",
         "package" : "base",
         "title" : "Apply a Function to a Data Frame Split by Factors",
         "name" : "by"
      },
      {
         "name" : "c",
         "title" : "Combine Values into a Vector or List",
         "package" : "base",
         "desc" : " This is a generic function which combines its arguments. The default method combines its arguments to form a vector. All arguments are coerced to a common type which is the type of the returned value, and all attributes except names are removed. "
      },
      {
         "name" : "call",
         "desc" : " Create or test for objects of mode \"call\". ",
         "package" : "base",
         "title" : "Function Calls"
      },
      {
         "title" : "Call With Current Continuation",
         "package" : "base",
         "desc" : " A downward-only version of Scheme's call with current continuation. ",
         "name" : "callCC"
      },
      {
         "name" : "CallExternal",
         "desc" : " Functions to pass objects to compiled C/C++ code that has been loaded into . ",
         "package" : "base",
         "title" : "Modern Interfaces to C/C++ code"
      },
      {
         "title" : "Report Capabilities of this Build of R",
         "desc" : " Report on the optional features which have been compiled into this build of . ",
         "package" : "base",
         "name" : "capabilities"
      },
      {
         "title" : "Concatenate and Print",
         "desc" : " Outputs the objects, concatenating the representations. cat performs much less conversion than print. ",
         "package" : "base",
         "name" : "cat"
      },
      {
         "title" : "Combine R Objects by Rows or Columns",
         "package" : "base",
         "desc" : " Take a sequence of vector, matrix or data-frame arguments and combine by columns or rows, respectively. These are generic functions with methods for other classes. ",
         "name" : "cbind"
      },
      {
         "name" : "char.expand",
         "package" : "base",
         "desc" : " Seeks a unique match of its first argument among the elements of its second. If successful, it returns this element; otherwise, it performs an action specified by the third argument. ",
         "title" : "Expand a String with Respect to a Target Table"
      },
      {
         "package" : "base",
         "desc" : " Create or test for objects of type \"character\". ",
         "title" : "Character Vectors",
         "name" : "character"
      },
      {
         "name" : "charmatch",
         "title" : "Partial String Matching",
         "package" : "base",
         "desc" : " charmatch seeks matches for the elements of its first argument among those of its second. "
      },
      {
         "name" : "chartr",
         "desc" : " Translate characters in character vectors, in particular from upper to lower case or vice versa. ",
         "package" : "base",
         "title" : "Character Translation and Casefolding"
      },
      {
         "desc" : " Compute the Choleski factorization of a real symmetric positive-definite square matrix. ",
         "package" : "base",
         "title" : "The Choleski Decomposition",
         "name" : "chol"
      },
      {
         "title" : "Inverse from Choleski (or QR) Decomposition",
         "desc" : " Invert a symmetric, positive definite square matrix from its Choleski decomposition. Equivalently, compute (X'X)^{-1}(X'X)^(-1) from the (R part) of the QR decomposition of X. ",
         "package" : "base",
         "name" : "chol2inv"
      },
      {
         "name" : "class",
         "title" : "Object Classes",
         "desc" : " possesses a simple generic function mechanism which can be used for an object-oriented style of programming. Method dispatch takes place based on the class of the first argument to the generic function. ",
         "package" : "base"
      },
      {
         "title" : "Column Indexes",
         "desc" : " Returns a matrix of integers indicating their column number in a matrix-like object, or a factor of column labels. ",
         "package" : "base",
         "name" : "col"
      },
      {
         "name" : "row+colnames",
         "desc" : " Retrieve or set the row or column names of a matrix-like object. ",
         "package" : "base",
         "title" : "Row and Column Names"
      },
      {
         "name" : "Colon",
         "desc" : " Generate regular sequences. ",
         "package" : "base",
         "title" : "Colon Operator"
      },
      {
         "name" : "colSums",
         "desc" : " Form row and column sums and means for numeric arrays. ",
         "package" : "base",
         "title" : "Form Row and Column Sums and Means"
      },
      {
         "name" : "commandArgs",
         "title" : "Extract Command Line Arguments",
         "package" : "base",
         "desc" : " Provides access to a copy of the command line arguments supplied when this session was invoked. "
      },
      {
         "desc" : " These functions set and query a comment attribute for any objects. This is typically useful for data.frames or model fits. Contrary to other attributes, the comment is not printed (by print or print.default). Assigning NULL or a zero-length character vector removes the comment. ",
         "package" : "base",
         "title" : "Query or Set a \"comment\" Attribute",
         "name" : "comment"
      },
      {
         "name" : "Comparison",
         "package" : "base",
         "desc" : " Binary operators which allow the comparison of values in atomic vectors. ",
         "title" : "Relational Operators"
      },
      {
         "name" : "complex",
         "title" : "Complex Vectors",
         "desc" : " Basic functions which support complex arithmetic in R. ",
         "package" : "base"
      },
      {
         "desc" : " These functions provide a mechanism for handling unusual conditions, including errors and warnings. ",
         "package" : "base",
         "title" : "Condition Handling and Recovery",
         "name" : "conditions"
      },
      {
         "name" : "conflicts",
         "title" : "Search for Masked Objects on the Search Path",
         "desc" : " conflicts reports on objects that exist with the same name in two or more places on the search path, usually because an object in the user's workspace or a package is masking a system object of the same name. This helps discover unintentional masking. ",
         "package" : "base"
      },
      {
         "package" : "base",
         "desc" : " Functions to create, open and close connections. ",
         "title" : "Functions to Manipulate Connections",
         "name" : "connections"
      },
      {
         "name" : "Constants",
         "title" : "Built-in Constants",
         "package" : "base",
         "desc" : " Constants built into . "
      },
      {
         "package" : "base",
         "desc" : " The Who-is-who, describing who made significant contributions to the development of . ",
         "title" : "R Project Contributors",
         "name" : "contributors"
      },
      {
         "desc" : " These are the basic control-flow constructs of the language. They function in much the same way as control statements in any Algol-like language. They are all reserved words. ",
         "package" : "base",
         "title" : "Control Flow",
         "name" : "Control"
      },
      {
         "title" : "Copyrights of Files Used to Build R",
         "desc" : " is released under the GNU Public License: see license for details. The license describes your right to use . Copyright is concerned with ownership of intellectual rights, and some of the software used has conditions that the copyright must be explicitly stated: see the Details section. We are grateful to these people and other contributors (see contributors) for the ability to use their work. ",
         "package" : "base",
         "name" : "copyright"
      },
      {
         "package" : "base",
         "desc" : " Given matrices x and y as arguments, return a matrix cross-product. This is formally equivalent to (but usually slightly faster than) the call t(x) %*% y (crossprod) or x %*% t(y) (tcrossprod). ",
         "title" : "Matrix Crossproduct",
         "name" : "crossprod"
      },
      {
         "desc" : " Report information on the C stack size and usage (if available). ",
         "package" : "base",
         "title" : "Report Information on C Stack Size and Usage",
         "name" : "Cstack_info"
      },
      {
         "title" : "Cumulative Sums, Products, and Extremes",
         "package" : "base",
         "desc" : " Returns a vector whose elements are the cumulative sums, products, minima or maxima of the elements of the argument. ",
         "name" : "cumsum"
      },
      {
         "desc" : " Retrieve the headers for a URL for a supported protocol such as http://, ftp://, https:// and ftps://. An optional function not supported on all platforms. ",
         "package" : "base",
         "title" : " Retrieve Headers from URLs ",
         "name" : "curlGetHeaders"
      },
      {
         "package" : "base",
         "desc" : " Report version of libcurl in use. ",
         "title" : " Report Version of libcurl ",
         "name" : "libcurlVersion"
      },
      {
         "name" : "cut.POSIXt",
         "desc" : " Method for cut applied to date-time objects. ",
         "package" : "base",
         "title" : "Convert a Date or Date-Time Object to a Factor"
      },
      {
         "name" : "cut",
         "title" : "Convert Numeric to Factor",
         "desc" : " cut divides the range of x into intervals and codes the values in x according to which interval they fall. The leftmost interval corresponds to level one, the next leftmost to level two and so on. ",
         "package" : "base"
      },
      {
         "name" : "data.class",
         "title" : "Object Classes",
         "package" : "base",
         "desc" : " Determine the class of an arbitrary object. "
      },
      {
         "title" : "Data Frames",
         "desc" : " This function creates data frames, tightly coupled collections of variables which share many of the properties of matrices and of lists, used as the fundamental data structure by most of 's modeling software. ",
         "package" : "base",
         "name" : "data.frame"
      },
      {
         "title" : "Convert a Data Frame to a Numeric Matrix",
         "desc" : " Return the matrix obtained by converting all the variables in a data frame to numeric mode and then binding them together as the columns of a matrix. Factors and ordered factors are replaced by their internal codes. ",
         "package" : "base",
         "name" : "data.matrix"
      },
      {
         "name" : "dataframeHelpers",
         "package" : "base",
         "desc" : " Internal auxiliary functions for use with data frames. ",
         "title" : "Data Frame Auxiliary Functions"
      },
      {
         "name" : "date",
         "package" : "base",
         "desc" : " Returns a character string of the current system date and time. ",
         "title" : "System Date and Time"
      },
      {
         "name" : "Dates",
         "package" : "base",
         "desc" : " Description of the class \"Date\" representing calendar dates. ",
         "title" : "Date Class"
      },
      {
         "desc" : " Description of the classes \"POSIXlt\" and \"POSIXct\" representing calendar dates and times. ",
         "package" : "base",
         "title" : "Date-Time Classes",
         "name" : "DateTimeClasses"
      },
      {
         "name" : "dcf",
         "title" : "Read and Write Data in DCF Format",
         "package" : "base",
         "desc" : " Reads or writes an object from/to a file in Debian Control File format. "
      },
      {
         "title" : "Debug a Function",
         "desc" : " Set, unset or query the debugging flag on a function. The text and condition arguments are the same as those that can be supplied via a call to browser. They can be retrieved by the user once the browser has been entered, and provide a mechanism to allow users to identify which breakpoint has been activated. ",
         "package" : "base",
         "name" : "debug"
      },
      {
         "name" : "Defunct",
         "desc" : " When a function is removed from it should be replaced by a function which calls .Defunct. ",
         "package" : "base",
         "title" : "Marking Objects as Defunct"
      },
      {
         "desc" : " delayedAssign creates a promise to evaluate the given expression if its value is requested. This provides direct access to the lazy evaluation mechanism used by for the evaluation of (interpreted) functions. ",
         "package" : "base",
         "title" : "Delay Evaluation",
         "name" : "delayedAssign"
      },
      {
         "name" : "deparse",
         "title" : "Expression Deparsing",
         "desc" : " Turn unevaluated expressions into character strings. ",
         "package" : "base"
      },
      {
         "name" : "deparseOpts",
         "title" : "Options for Expression Deparsing",
         "package" : "base",
         "desc" : " Process the deparsing options for deparse, dput and dump. "
      },
      {
         "title" : "Marking Objects as Deprecated",
         "desc" : " When an object is about to be removed from it is first deprecated and should include a call to .Deprecated. ",
         "package" : "base",
         "name" : "Deprecated"
      },
      {
         "name" : "det",
         "desc" : " det calculates the determinant of a matrix. determinant is a generic function that returns separately the modulus of the determinant, optionally on the logarithm scale, and the sign of the determinant. ",
         "package" : "base",
         "title" : "Calculate the Determinant of a Matrix"
      },
      {
         "name" : "detach",
         "desc" : " Detach a database, i.e., remove it from the search() path of available objects. Usually this is either a data.frame which has been attached or a package which was attached by library. ",
         "package" : "base",
         "title" : "Detach Objects from the Search Path"
      },
      {
         "name" : ".Device",
         "title" : " Lists of Open/Active Graphics Devices ",
         "package" : "base",
         "desc" : " A pairlist of the names of open graphics devices is stored in .Devices. The name of the active device (see dev.cur) is stored in .Device. Both are symbols and so appear in the base namespace. "
      },
      {
         "title" : "Matrix Diagonals",
         "desc" : " Extract or replace the diagonal of a matrix, or construct a diagonal matrix. ",
         "package" : "base",
         "name" : "diag"
      },
      {
         "name" : "diff",
         "desc" : " Returns suitably lagged and iterated differences. ",
         "package" : "base",
         "title" : "Lagged Differences"
      },
      {
         "name" : "difftime",
         "title" : "Time Intervals",
         "package" : "base",
         "desc" : " Time intervals creation, printing, and some arithmetic. "
      },
      {
         "name" : "dim",
         "package" : "base",
         "desc" : " Retrieve or set the dimension of an object. ",
         "title" : "Dimensions of an Object"
      },
      {
         "desc" : " Retrieve or set the dimnames of an object. ",
         "package" : "base",
         "title" : "Dimnames of an Object",
         "name" : "dimnames"
      },
      {
         "title" : "Execute a Function Call",
         "desc" : " do.call constructs and executes a function call from a name or a function and a list of arguments to be passed to it. ",
         "package" : "base",
         "name" : "do.call"
      },
      {
         "title" : "Identity Function to Suppress Checking",
         "desc" : " The dontCheck function is the same as identity, but is interpreted by R CMD check code analysis as a directive to suppress checking of x. Currently this is only used by checkFF(registration = TRUE) when checking the .NAME argument of foreign function calls. ",
         "package" : "base",
         "name" : "dontCheck"
      },
      {
         "package" : "base",
         "desc" : " Create, coerce to or test for a double-precision vector. ",
         "title" : "Double-Precision Vectors",
         "name" : "double"
      },
      {
         "name" : "dput",
         "title" : "Write an Object to a File or Recreate it",
         "desc" : " Writes an ASCII text representation of an object to a file or connection, or uses one to recreate the object. ",
         "package" : "base"
      },
      {
         "name" : "drop",
         "title" : "Drop Redundant Extent Information",
         "desc" : " Delete the dimensions of an array which have only one level. ",
         "package" : "base"
      },
      {
         "package" : "base",
         "desc" : " The function droplevels is used to drop unused levels from a factor or, more commonly, from factors in a data frame. ",
         "title" : "droplevels",
         "name" : "droplevels"
      },
      {
         "name" : "dump",
         "title" : "Text Representations of R Objects",
         "package" : "base",
         "desc" : " This function takes a vector of names of objects and produces text representations of the objects on a file or connection. A dump file can usually be sourced into another session. "
      },
      {
         "title" : "Determine Duplicate Elements",
         "package" : "base",
         "desc" : " duplicated() determines which elements of a vector or data frame are duplicates of elements with smaller subscripts, and returns a logical vector indicating which elements (rows) are duplicates. anyDuplicated(.) is a generalized more efficient shortcut for any(duplicated(.)). ",
         "name" : "duplicated"
      },
      {
         "name" : "dyn.load",
         "desc" : " Load or unload DLLs (also known as shared objects), and test whether a C function or Fortran subroutine is available. ",
         "package" : "base",
         "title" : "Foreign Function Interface"
      },
      {
         "title" : "Apply a Function Over Values in an Environment",
         "desc" : " eapply applies FUN to the named values from an environment and returns the results as a list. The user can request that all named objects are used (normally names that begin with a dot are not). The output is not sorted and no enclosing environments are searched. This is a primitive function. ",
         "package" : "base",
         "name" : "eapply"
      },
      {
         "name" : "eigen",
         "title" : "Spectral Decomposition of a Matrix",
         "package" : "base",
         "desc" : " Computes eigenvalues and eigenvectors of numeric (double, integer, logical) or complex matrices. "
      },
      {
         "name" : "encodeString",
         "desc" : " encodeString escapes the strings in a character vector in the same way print.default does, and optionally fits the encoded strings within a field width. ",
         "package" : "base",
         "title" : " Encode Character Vector as for Printing "
      },
      {
         "title" : "Read or Set the Declared Encodings for a Character Vector",
         "package" : "base",
         "desc" : " Read or set the declared encodings for a character vector. ",
         "name" : "Encoding"
      },
      {
         "name" : "environment",
         "desc" : " Get, set, test for and create environments. ",
         "package" : "base",
         "title" : "Environment Access"
      },
      {
         "desc" : " Details of some of the environment variables which affect an session. ",
         "package" : "base",
         "title" : "Environment Variables",
         "name" : "EnvVar"
      },
      {
         "name" : "eval",
         "package" : "base",
         "desc" : " Evaluate an expression in a specified environment. ",
         "title" : "Evaluate an (Unevaluated) Expression"
      },
      {
         "package" : "base",
         "desc" : " Look for an object of the given name and possibly return it ",
         "title" : "Is an Object Defined?",
         "name" : "exists"
      },
      {
         "name" : "expand.grid",
         "title" : "Create a Data Frame from All Combinations of Factors",
         "package" : "base",
         "desc" : " Create a data frame from all combinations of the supplied vectors or factors. See the description of the return value for precise details of the way this is done. "
      },
      {
         "name" : "expression",
         "title" : "Unevaluated Expressions",
         "desc" : " Creates or tests for objects of mode \"expression\". ",
         "package" : "base"
      },
      {
         "name" : "Extract.data.frame",
         "package" : "base",
         "desc" : " Extract or replace subsets of data frames. ",
         "title" : "Extract or Replace Parts of a Data Frame"
      },
      {
         "title" : "Extract or Replace Parts of a Factor",
         "desc" : " Extract or replace subsets of factors. ",
         "package" : "base",
         "name" : "Extract.factor"
      },
      {
         "name" : "Extract",
         "package" : "base",
         "desc" : " Operators acting on vectors, matrices, arrays and lists to extract or replace parts. ",
         "title" : "Extract or Replace Parts of an Object"
      },
      {
         "name" : "Extremes",
         "title" : "Maxima and Minima",
         "package" : "base",
         "desc" : " Returns the (parallel) maxima and minima of the input values. "
      },
      {
         "name" : "extSoftVersion",
         "desc" : " Report versions of (external) third-party software used. ",
         "package" : "base",
         "title" : " Report Versions of Third-Party Software "
      },
      {
         "name" : "factor",
         "title" : "Factors",
         "desc" : " The function factor is used to encode a vector as a factor (the terms category and enumerated type are also used for factors). If argument ordered is TRUE, the factor levels are assumed to be ordered. For compatibility with S there is also a function ordered. is.factor, is.ordered, as.factor and as.ordered are the membership and coercion functions for these classes. ",
         "package" : "base"
      },
      {
         "name" : "file.access",
         "title" : "Ascertain File Accessibility",
         "desc" : " Utility function to access information about files on the user's file systems. ",
         "package" : "base"
      },
      {
         "title" : "Choose a File Interactively",
         "package" : "base",
         "desc" : " Choose a file interactively. ",
         "name" : "file.choose"
      },
      {
         "name" : "file.info",
         "desc" : " Utility function to extract information about files on the user's file systems. ",
         "package" : "base",
         "title" : "Extract File Information"
      },
      {
         "name" : "file.path",
         "desc" : " Construct the path to a file from components in a platform-independent way. ",
         "package" : "base",
         "title" : "Construct Path to File"
      },
      {
         "name" : "file.show",
         "desc" : "Display one or more files.",
         "package" : "base",
         "title" : "Display One or More Files"
      },
      {
         "name" : "files",
         "desc" : " These functions provide a low-level interface to the computer's file system. ",
         "package" : "base",
         "title" : "File Manipulation"
      },
      {
         "name" : "files2",
         "desc" : " These functions provide a low-level interface to the computer's file system. ",
         "package" : "base",
         "title" : "Manipulaton of Directories and File Permissions"
      },
      {
         "title" : "Find Packages",
         "desc" : " Find the paths to one or more packages. ",
         "package" : "base",
         "name" : "find.package"
      },
      {
         "name" : "findInterval",
         "title" : "Find Interval Numbers or Indices",
         "desc" : " Given a vector of non-decreasing breakpoints in vec, find the interval containing each element of x; i.e., if i <- findInterval(x,v), for each index j in x v_{i_j} \\\\le x_j < v_{i_j + 1}v[i[j]] \\\\le x[j] < v[i[j] + 1] where v_0 := -\\\\inftyv[0] := - Inf, v_{N+1} := +\\\\inftyv[N+1] := + Inf, and N <- length(v). At the two boundaries, the returned index may differ by 1, depending on the optional arguments rightmost.closed and all.inside. ",
         "package" : "base"
      },
      {
         "name" : "force",
         "desc" : " Forces the evaluation of a function argument. ",
         "package" : "base",
         "title" : "Force Evaluation of an Argument"
      },
      {
         "package" : "base",
         "desc" : " Call a function with a specified number of leading arguments forced before the call if the function is a closure. ",
         "title" : "Call a function with Some Arguments Forced",
         "name" : "forceAndCall"
      },
      {
         "package" : "base",
         "desc" : " Internal versions of .Call and .External. ",
         "title" : "Internal Versions of the Foreign Function Interface",
         "name" : "Foreign-internal"
      },
      {
         "name" : "Foreign",
         "title" : "Foreign Function Interface",
         "desc" : " Functions to make calls to compiled code that has been loaded into . ",
         "package" : "base"
      },
      {
         "name" : "formals",
         "title" : "Access to and Manipulation of the Formal Arguments",
         "desc" : " Get or set the formal arguments of a function. ",
         "package" : "base"
      },
      {
         "title" : "format(.) Information",
         "package" : "base",
         "desc" : " Information is returned on how format(x, digits, nsmall) would be formatted. ",
         "name" : "format.info"
      },
      {
         "package" : "base",
         "desc" : " format.pval is intended for formatting p-values. ",
         "title" : "Format P Values",
         "name" : "format.pval"
      },
      {
         "desc" : " Format an object for pretty printing. ",
         "package" : "base",
         "title" : "Encode in a Common Format",
         "name" : "format"
      },
      {
         "title" : "Formatting Using C-style Formats",
         "desc" : " Formatting numbers individually and flexibly, using C style format specifications. ",
         "package" : "base",
         "name" : "formatC"
      },
      {
         "package" : "base",
         "desc" : "Format vectors of items and their descriptions as 2-column tables or LaTeX-style description lists. ",
         "title" : "Format Description Lists",
         "name" : "formatDL"
      },
      {
         "name" : "function",
         "package" : "base",
         "desc" : " These functions provide the base mechanisms for defining new functions in the language. ",
         "title" : "Function Definition"
      },
      {
         "name" : "funprog",
         "title" : "Common Higher-Order Functions in Functional Programming Languages",
         "desc" : " Reduce uses a binary function to successively combine the elements of a given vector and a possibly given initial value. Filter extracts the elements of a vector for which a predicate (logical) function gives true. Find and Position give the first or last such element and its position in the vector, respectively. Map applies a function to the corresponding elements of given vectors. Negate creates the negation of a given function. ",
         "package" : "base"
      },
      {
         "title" : "Garbage Collection",
         "package" : "base",
         "desc" : " A call of gc causes a garbage collection to take place. gcinfo sets a flag so that automatic collection is either silent (verbose = FALSE) or prints memory usage statistics (verbose = TRUE). ",
         "name" : "gc"
      },
      {
         "name" : "gc.time",
         "package" : "base",
         "desc" : " This function reports the time spent in garbage collection so far in the session while GC timing was enabled. ",
         "title" : "Report Time Spent in Garbage Collection"
      },
      {
         "name" : "gctorture",
         "package" : "base",
         "desc" : " Provokes garbage collection on (nearly) every memory allocation. Intended to ferret out memory protection bugs. Also makes run very slowly, unfortunately. ",
         "title" : "Torture Garbage Collector"
      },
      {
         "title" : "Return the Value of a Named Object",
         "desc" : " Search by name for an object (get) or zero or more objects (mget). ",
         "package" : "base",
         "name" : "get"
      },
      {
         "name" : "getCallingDLL",
         "title" : "Compute DLL for Native Interface Call",
         "desc" : " This is an internal function that is called from 's C code to determine the enclosing namespace of a .C/.Call/.Fortran/.External call which has no PACKAGE argument. If the call has been made from a function within a namespace, then we can find the DLL associated with that namespace. The purpose of this is to avoid having to use the PACKAGE argument in these native calls and so better support versions of packages. This is an internal function that may be migrated to internal C code in the future and so should not be used by programmers. ",
         "package" : "base"
      },
      {
         "name" : "getDLLRegisteredRoutines",
         "package" : "base",
         "desc" : " This function allows us to query the set of routines in a DLL that are registered with R to enhance dynamic lookup, error handling when calling native routines, and potentially security in the future. This function provides a description of each of the registered routines in the DLL for the different interfaces, i.e.\\\\ifelse{latex}{\\\\out{~}}{ }latex~ .C, .Call, .Fortran and .External. ",
         "title" : "Reflectance Information for C/Fortran routines in a DLL"
      },
      {
         "title" : "Get DLLs Loaded in Current Session",
         "package" : "base",
         "desc" : " This function provides a way to get a list of all the DLLs (see dyn.load) that are currently loaded in the session. ",
         "name" : "getLoadedDLLs"
      },
      {
         "title" : " Obtain a Description of one or more Native (C/Fortran) Symbols ",
         "package" : "base",
         "desc" : " This finds and returns a description of one or more dynamically loaded or exported built-in native symbols. For each name, it returns information about the name of the symbol, the library in which it is located and, if available, the number of arguments it expects and by which interface it should be called (i.e .Call, .C, .Fortran, or .External). Additionally, it returns the address of the symbol and this can be passed to other C routines. Specifically, this provides a way to explicitly share symbols between different dynamically loaded package libraries. Also, it provides a way to query where symbols were resolved, and aids diagnosing strange behavior associated with dynamic resolution. ",
         "name" : "getNativeSymbolInfo"
      },
      {
         "name" : "gettext",
         "package" : "base",
         "desc" : " If Native Language Support was enabled in this build of , attempt to translate character vectors or set where the translations are to be found. ",
         "title" : "Translate Text Messages"
      },
      {
         "title" : "Get or Set Working Directory",
         "desc" : " getwd returns an absolute filepath representing the current working directory of the process; setwd(dir) is used to set the working directory to dir. ",
         "package" : "base",
         "name" : "getwd"
      },
      {
         "package" : "base",
         "desc" : " Generate factors by specifying the pattern of their levels. ",
         "title" : "Generate Factor Levels",
         "name" : "gl"
      },
      {
         "name" : "grep",
         "desc" : " grep, grepl, regexpr, gregexpr and regexec search for matches to argument pattern within each element of a character vector: they differ in the format of and amount of detail in the results. sub and gsub perform replacement of the first and all matches respectively. ",
         "package" : "base",
         "title" : "Pattern Matching and Replacement"
      },
      {
         "name" : "grepRaw",
         "title" : "Pattern Matching for Raw Vectors",
         "desc" : " grepRaw searches for substring pattern matches within a raw vector x. ",
         "package" : "base"
      },
      {
         "name" : "groupGeneric",
         "package" : "base",
         "desc" : " Group generic methods can be defined for four pre-specified groups of functions, Math, Ops, Summary and Complex. (There are no objects of these names in base , but there are in the methods package.) A method defined for an individual member of the group takes precedence over a method defined for the group as a whole. ",
         "title" : "S3 Group Generic Functions"
      },
      {
         "name" : "gzcon",
         "title" : " (De)compress I/O Through Connections ",
         "package" : "base",
         "desc" : " gzcon provides a modified connection that wraps an existing connection, and decompresses reads or compresses writes through that connection. Standard gzip headers are assumed. "
      },
      {
         "desc" : " Convert or print integers in hexadecimal format, with as many digits as are needed to display the largest, using leading zeroes as necessary. ",
         "package" : "base",
         "title" : "Display Numbers in Hexadecimal",
         "name" : "hexmode"
      },
      {
         "title" : "Hyperbolic Functions",
         "package" : "base",
         "desc" : " These functions give the obvious hyperbolic functions. They respectively compute the hyperbolic cosine, sine, tangent, and their inverses, arc-cosine, arc-sine, arc-tangent (or area cosine, etc). ",
         "name" : "Hyperbolic"
      },
      {
         "title" : "Convert Character Vector between Encodings",
         "desc" : " This uses system facilities to convert a character vector between encodings: the i stands for internationalization. ",
         "package" : "base",
         "name" : "iconv"
      },
      {
         "package" : "base",
         "desc" : " Controls the way collation is done by ICU (an optional part of the build). ",
         "title" : " Setup Collation by ICU ",
         "name" : "icuSetCollate"
      },
      {
         "desc" : " The safe and reliable way to test two objects for being exactly equal. It returns TRUE in this case, FALSE in every other case. ",
         "package" : "base",
         "title" : "Test Objects for Exact Equality",
         "name" : "identical"
      },
      {
         "name" : "identity",
         "title" : "Identity Function",
         "package" : "base",
         "desc" : " A trivial identity function returning its argument. "
      },
      {
         "name" : "ifelse",
         "package" : "base",
         "desc" : " ifelse returns a value with the same shape as test which is filled with elements selected from either yes or no depending on whether the element of test is TRUE or FALSE. ",
         "title" : "Conditional Element Selection"
      },
      {
         "title" : "Integer Vectors",
         "package" : "base",
         "desc" : " Creates or tests for objects of type \"integer\". ",
         "name" : "integer"
      },
      {
         "name" : "interaction",
         "package" : "base",
         "desc" : " interaction computes a factor which represents the interaction of the given factors. The result of interaction is always unordered. ",
         "title" : "Compute Factor Interactions"
      },
      {
         "name" : "interactive",
         "desc" : " Return TRUE when is being used interactively and FALSE otherwise. ",
         "package" : "base",
         "title" : "Is R Running Interactively?"
      },
      {
         "name" : "Internal",
         "desc" : " .Internal performs a call to an internal code which is built in to the interpreter. Only true wizards should even consider using this function, and only developers can add to the list of internal functions. ",
         "package" : "base",
         "title" : "Call an Internal Function"
      },
      {
         "package" : "base",
         "desc" : " Many -internal functions are generic and allow methods to be written for. ",
         "title" : "Internal Generic Functions",
         "name" : "InternalMethods"
      },
      {
         "title" : "Change the Print Mode to Invisible",
         "desc" : " Return a (temporarily) invisible copy of an object. ",
         "package" : "base",
         "name" : "invisible"
      },
      {
         "title" : "Finite, Infinite and NaN Numbers",
         "package" : "base",
         "desc" : " is.finite and is.infinite return a vector of the same length as x, indicating which elements are finite (not infinite and not missing) or infinite. Inf and -Inf are positive and negative infinity whereas NaN means Not a Number. (These apply to numeric values and real and imaginary parts of complex values but not to values of integer vectors.) Inf and NaN are reserved words in the language. ",
         "name" : "is.finite"
      },
      {
         "name" : "is.function",
         "desc" : "Checks whether its argument is a (primitive) function.",
         "package" : "base",
         "title" : "Is an Object of Type (Primitive) Function?"
      },
      {
         "name" : "is.language",
         "title" : "Is an Object a Language Object?",
         "package" : "base",
         "desc" : " is.language returns TRUE if x is a variable name, a call, or an expression. "
      },
      {
         "name" : "is.object",
         "title" : "Is an Object internally classed?",
         "package" : "base",
         "desc" : " A function rather for internal use. It returns TRUE if the object x has the internal OBJECT bit set, and FALSE otherwise. The OBJECT bit is set when a \"class\" attribute is added and removed when that attribute is removed, so this is a very efficient way to check if an object has a class attribute. (S4 objects always should.) "
      },
      {
         "package" : "base",
         "desc" : " is.atomic returns TRUE if x is of an atomic type (or NULL) and FALSE otherwise. is.recursive returns TRUE if x has a recursive (list-like) structure and FALSE otherwise. ",
         "title" : "Is an Object Atomic or Recursive?",
         "name" : "is.recursive"
      },
      {
         "name" : "is.single",
         "package" : "base",
         "desc" : " is.single reports an error. There are no single precision values in R. ",
         "title" : "Is an Object of Single Precision Type?"
      },
      {
         "desc" : " Test if an object is not sorted (in increasing order), without the cost of sorting it. ",
         "package" : "base",
         "title" : "Test if an Object is Not Sorted",
         "name" : "is.unsorted"
      },
      {
         "package" : "base",
         "desc" : " Convenience wrappers to create date-times from numeric representations. ",
         "title" : "Date-time Conversion Functions from Numeric Representations",
         "name" : "ISOdatetime"
      },
      {
         "package" : "base",
         "desc" : " Test if running under . ",
         "title" : "Are we using R, rather than S?",
         "name" : "is.R"
      },
      {
         "name" : "isS4",
         "title" : " Test for an S4 object ",
         "package" : "base",
         "desc" : " Tests whether the object is an instance of an S4 class. "
      },
      {
         "name" : "isSymmetric",
         "package" : "base",
         "desc" : " Generic function to test if object is symmetric or not. Currently only a matrix method is implemented. ",
         "title" : "Test if a Matrix or other Object is Symmetric"
      },
      {
         "package" : "base",
         "desc" : " Add a small amount of noise to a numeric vector. ",
         "title" : "Jitter (Add Noise) to Numbers",
         "name" : "jitter"
      },
      {
         "title" : "Compute or Estimate the Condition Number of a Matrix",
         "package" : "base",
         "desc" : " The condition number of a regular (square) matrix is the product of the norm of the matrix and the norm of its inverse (or pseudo-inverse), and hence depends on the kind of matrix-norm. kappa() computes by default (an estimate of) the 2-norm condition number of a matrix or of the R matrix of a QR decomposition, perhaps of a linear fit. The 2-norm condition number can be shown to be the ratio of the largest to the smallest non-zero singular value of the matrix. rcond() computes an approximation of the reciprocal condition number, see the details. ",
         "name" : "kappa"
      },
      {
         "name" : "kronecker",
         "desc" : " Computes the generalised kronecker product of two arrays, X and Y. ",
         "package" : "base",
         "title" : "Kronecker Products on Arrays"
      },
      {
         "title" : "Localization Information",
         "desc" : " Report on localization information. ",
         "package" : "base",
         "name" : "l10n_info"
      },
      {
         "desc" : " Report the version of LAPACK in use. ",
         "package" : "base",
         "title" : " LAPACK Version ",
         "name" : "La_version"
      },
      {
         "title" : "Find Labels from Object",
         "package" : "base",
         "desc" : " Find a suitable set of labels from an object for use in printing or plotting, for example. A generic function. ",
         "name" : "labels"
      },
      {
         "title" : "Apply a Function over a List or Vector",
         "desc" : " lapply returns a list of the same length as X, each element of which is the result of applying FUN to the corresponding element of X. sapply is a user-friendly version and wrapper of lapply by default returning a vector, matrix or, if simplify = \"array\", an array if appropriate, by applying simplify2array(). sapply(x, f, simplify = FALSE, USE.NAMES = FALSE) is the same as lapply(x, f). vapply is similar to sapply, but has a pre-specified type of return value, so it can be safer (and sometimes faster) to use. replicate is a wrapper for the common use of sapply for repeated evaluation of an expression (which will usually involve random number generation). simplify2array() is the utility called from sapply() when simplify is not false and is similarly called from mapply(). ",
         "package" : "base",
         "name" : "lapply"
      },
      {
         "name" : "Last.value",
         "title" : "Value of Last Evaluated Expression",
         "desc" : " The value of the internal evaluation of a top-level expression is always assigned to .Last.value (in package:base) before further processing (e.g., printing). ",
         "package" : "base"
      },
      {
         "title" : "Lazy Load a Database of R Objects",
         "desc" : " Internal functions to lazy load a database of objects. ",
         "package" : "base",
         "name" : "lazyLoad"
      },
      {
         "name" : "length",
         "title" : "Length of an Object",
         "desc" : " Get or set the length of vectors (including lists) and factors, and of any other object for which a method has been defined. ",
         "package" : "base"
      },
      {
         "name" : "lengths",
         "desc" : " Get the length of each element in a list as an integer or numeric vector. ",
         "package" : "base",
         "title" : "Lengths of List Elements"
      },
      {
         "package" : "base",
         "desc" : " levels provides access to the levels attribute of a variable. The first form returns the value of the levels of its argument and the second sets the attribute. ",
         "title" : "Levels Attributes",
         "name" : "levels"
      },
      {
         "name" : "libPaths",
         "title" : "Search Paths for Packages",
         "desc" : " .libPaths gets/sets the library trees within which packages are looked for. ",
         "package" : "base"
      },
      {
         "title" : "Loading DLLs from Packages",
         "package" : "base",
         "desc" : " Load the specified file of compiled code if it has not been loaded already, or unloads it. ",
         "name" : "library.dynam"
      },
      {
         "name" : "library",
         "title" : "Loading/Attaching and Listing of Packages",
         "package" : "base",
         "desc" : " library and require load and attach add-on packages. "
      },
      {
         "desc" : " The license terms under which is distributed. ",
         "package" : "base",
         "title" : "The R License Terms",
         "name" : "license"
      },
      {
         "name" : "list.files",
         "package" : "base",
         "desc" : " These functions produce a character vector of the names of files or directories in the named directory. ",
         "title" : "List the Files in a Directory/Folder"
      },
      {
         "desc" : " Functions to construct, coerce and check for both kinds of lists. ",
         "package" : "base",
         "title" : "Lists -- Generic and Dotted Pairs",
         "name" : "list"
      },
      {
         "title" : "From A List, Build or Add To an Environment",
         "package" : "base",
         "desc" : " From a named list x, create an environment containing all list components as objects, or multi-assign from x into a pre-existing environment. ",
         "name" : "list2env"
      },
      {
         "desc" : " Reload datasets written with the function save. ",
         "package" : "base",
         "title" : "Reload Saved Datasets",
         "name" : "load"
      },
      {
         "name" : "locales",
         "package" : "base",
         "desc" : " Get details of or set aspects of the locale for the process. ",
         "title" : "Query or Set Aspects of the Locale"
      },
      {
         "desc" : " log computes logarithms, by default natural logarithms, log10 computes common (i.e., base 10) logarithms, and log2 computes binary (i.e., base 2) logarithms. The general form log(x, base) computes logarithms with base base. log1p(x) computes \\\\log(1+x)log(1+x) accurately also for |x| \\\\ll 1|x| << 1. exp computes the exponential function. expm1(x) computes \\\\exp(x) - 1exp(x) - 1 accurately also for |x| \\\\ll 1|x| << 1. ",
         "package" : "base",
         "title" : "Logarithms and Exponentials",
         "name" : "log"
      },
      {
         "name" : "Logic",
         "title" : "Logical Operators",
         "desc" : " These operators act on raw, logical and number-like vectors. ",
         "package" : "base"
      },
      {
         "title" : "Logical Vectors",
         "desc" : " Create or test for objects of type \"logical\", and the basic logical constants. ",
         "package" : "base",
         "name" : "logical"
      },
      {
         "desc" : " Vectors of 2^{31}2^31 or more elements were added in 3.0.0. ",
         "package" : "base",
         "title" : "Long Vectors",
         "name" : "LongVectors"
      },
      {
         "name" : "lower.tri",
         "title" : "Lower and Upper Triangular Part of a Matrix",
         "package" : "base",
         "desc" : " Returns a matrix of logicals the same size of a given matrix with entries TRUE in the lower or upper triangle. "
      },
      {
         "name" : "ls",
         "desc" : " ls and objects return a vector of character strings giving the names of the objects in the specified environment. When invoked with no argument at the top level prompt, ls shows what data sets and functions a user has defined. When invoked with no argument inside a function, ls returns the names of the function's local variables: this is useful in conjunction with browser. ",
         "package" : "base",
         "title" : "List Objects"
      },
      {
         "title" : "Make Syntactically Valid Names",
         "package" : "base",
         "desc" : " Make syntactically valid names out of character vectors. ",
         "name" : "make.names"
      },
      {
         "name" : "make.unique",
         "title" : "Make Character Strings Unique",
         "desc" : " Makes the elements of a character vector unique by appending sequence numbers to duplicates. ",
         "package" : "base"
      },
      {
         "package" : "base",
         "desc" : " mapply is a multivariate version of sapply. mapply applies FUN to the first elements of each argument, the second elements, the third elements, and so on. Arguments are recycled if necessary. ",
         "title" : "Apply a Function to Multiple List or Vector Arguments",
         "name" : "mapply"
      },
      {
         "name" : "margin.table",
         "title" : "Compute table margin",
         "desc" : " For a contingency table in array form, compute the sum of table entries for a given index. ",
         "package" : "base"
      },
      {
         "name" : "mat.or.vec",
         "title" : "Create a Matrix or a Vector",
         "desc" : " mat.or.vec creates an nr by nc zero matrix if nc is greater than 1, and a zero vector of length nr if nc equals 1. ",
         "package" : "base"
      },
      {
         "title" : "Argument Verification Using Partial Matching",
         "package" : "base",
         "desc" : " match.arg matches arg against a table of candidate values as specified by choices, where NULL means to take the first one. ",
         "name" : "match.arg"
      },
      {
         "title" : "Argument Matching",
         "package" : "base",
         "desc" : " match.call returns a call in which all of the specified arguments are specified by their full names. ",
         "name" : "match.call"
      },
      {
         "name" : "match.fun",
         "desc" : " When called inside functions that take a function as argument, extract the desired function object while avoiding undesired matching to objects of other types. ",
         "package" : "base",
         "title" : "Extract a Function Specified by Name"
      },
      {
         "package" : "base",
         "desc" : " match returns a vector of the positions of (first) matches of its first argument in its second. %in% is a more intuitive interface as a binary operator, which returns a logical vector indicating if there is a match or not for its left operand. ",
         "title" : "Value Matching",
         "name" : "match"
      },
      {
         "name" : "MathFun",
         "title" : "Miscellaneous Mathematical Functions",
         "desc" : " abs(x) computes the absolute value of x, sqrt(x) computes the (principal) square root of x, \\\\sqrt{x}.% Details for complex x are below The naming follows the standard for computer languages such as C or Fortran. ",
         "package" : "base"
      },
      {
         "name" : "matmult",
         "title" : "Matrix Multiplication",
         "desc" : " Multiplies two matrices, if they are conformable. If one argument is a vector, it will be promoted to either a row or column matrix to make the two arguments conformable. If both are vectors of the same length, it will return the inner product (as a matrix). ",
         "package" : "base"
      },
      {
         "name" : "matrix",
         "desc" : " matrix creates a matrix from the given set of values. as.matrix attempts to turn its argument into a matrix. is.matrix tests if its argument is a (strict) matrix. ",
         "package" : "base",
         "title" : "Matrices"
      },
      {
         "name" : "maxCol",
         "desc" : " Find the maximum position for each row of a matrix, breaking ties at random. ",
         "package" : "base",
         "title" : "Find Maximum Position in Matrix"
      },
      {
         "title" : "Arithmetic Mean",
         "desc" : " Generic function for the (trimmed) arithmetic mean. ",
         "package" : "base",
         "name" : "mean"
      },
      {
         "package" : "base",
         "desc" : " In-memory compression or decompression for raw vectors. ",
         "title" : "In-memory Compression and Decompression",
         "name" : "memCompress"
      },
      {
         "name" : "Memory-limits",
         "title" : "Memory Limits in R",
         "desc" : " holds objects it is using in virtual memory. This help file documents the current design limitations on large objects: these differ between 32-bit and 64-bit builds of . ",
         "package" : "base"
      },
      {
         "package" : "base",
         "desc" : " Lists the usage of the cons cells by SEXPREC type. ",
         "title" : "Profile the Usage of Cons Cells",
         "name" : "memory.profile"
      },
      {
         "name" : "Memory",
         "title" : "Memory Available for Data Storage",
         "desc" : " How manages its workspace. ",
         "package" : "base"
      },
      {
         "desc" : " Merge two data frames by common columns or row names, or do other versions of database join operations. ",
         "package" : "base",
         "title" : "Merge Two Data Frames",
         "name" : "merge"
      },
      {
         "name" : "message",
         "package" : "base",
         "desc" : " Generate a diagnostic message from its arguments. ",
         "title" : "Diagnostic Messages"
      },
      {
         "name" : "missing",
         "package" : "base",
         "desc" : " missing can be used to test whether a value was specified as an argument to a function. ",
         "title" : "Does a Formal Argument have a Value?"
      },
      {
         "name" : "mode",
         "title" : "The (Storage) Mode of an Object",
         "package" : "base",
         "desc" : " Get or set the type or storage mode of an object. "
      },
      {
         "name" : "NA",
         "title" : "Not Available / Missing Values",
         "desc" : " NA is a logical constant of length 1 which contains a missing value indicator. NA can be coerced to any other vector type except raw. There are also constants NA_integer_, NA_real_, NA_complex_ and NA_character_ of the other atomic vector types which support missing values: all of these are reserved words in the language. The generic function is.na indicates which elements are missing. The generic function is.na<- sets elements to NA. The generic function anyNA implements any(is.na(x)) in a possibly faster way (especially for atomic vectors). ",
         "package" : "base"
      },
      {
         "name" : "name",
         "desc" : " A name (also known as a symbol) is a way to refer to objects by name (rather than the value of the object, if any, bound to that name). as.name and as.symbol are identical: they attempt to coerce the argument to a name. is.symbol and the identical is.name return TRUE or FALSE depending on whether the argument is a name or not. ",
         "package" : "base",
         "title" : "Names and Symbols"
      },
      {
         "name" : "names",
         "title" : "The Names of an Object",
         "package" : "base",
         "desc" : " Functions to get or set the names of an object. "
      },
      {
         "package" : "base",
         "desc" : " When used inside a function body, nargs returns the number of arguments supplied to that function, including positional arguments left blank. ",
         "title" : "The Number of Arguments to a Function",
         "name" : "nargs"
      },
      {
         "name" : "nchar",
         "package" : "base",
         "desc" : " nchar takes a character vector as an argument and returns a vector whose elements contain the sizes of the corresponding elements of x. nzchar is a fast way to find out if elements of a character vector are non-empty strings. ",
         "title" : "Count the Number of Characters (or Bytes or Width)"
      },
      {
         "package" : "base",
         "desc" : " Return the number of levels which its argument has. ",
         "title" : "The Number of Levels of a Factor",
         "name" : "nlevels"
      },
      {
         "package" : "base",
         "desc" : " Print character strings without quotes. ",
         "title" : "Class for no quote Printing of Character Strings",
         "name" : "noquote"
      },
      {
         "title" : "Compute the Norm of a Matrix",
         "package" : "base",
         "desc" : " Computes a matrix norm of x using LAPACK. The norm can be the one (\"O\") norm, the infinity (\"I\") norm, the Frobenius (\"F\") norm, the maximum modulus (\"M\") among elements of a matrix, or the spectral or \"2\"-norm, as determined by the value of type. ",
         "name" : "norm"
      },
      {
         "title" : "Express File Paths in Canonical Form",
         "package" : "base",
         "desc" : " Convert file paths to canonical form for the platform, to display them in a user-understandable form and so that relative and absolute paths can be compared. ",
         "name" : "normalizePath"
      },
      {
         "name" : "NotYet",
         "package" : "base",
         "desc" : " In order to pinpoint missing functionality, the core team uses these functions for missing functions and not yet used arguments of existing functions (which are typically there for compatibility purposes). You are very welcome to contribute your code ",
         "title" : "Not Yet Implemented Functions and Unused Arguments"
      },
      {
         "desc" : " nrow and ncol return the number of rows or columns present in x. NCOL and NROW do the same treating a vector as 1-column matrix. ",
         "package" : "base",
         "title" : "The Number of Rows/Columns of an Array",
         "name" : "nrow"
      },
      {
         "title" : "Double Colon and Triple Colon Operators",
         "package" : "base",
         "desc" : " Accessing exported and internal variables in a namespace. ",
         "name" : "ns-dblcolon"
      },
      {
         "package" : "base",
         "desc" : " Packages can supply functions to be called when loaded, attached, detached or unloaded. ",
         "title" : "Hooks for Namespace Events",
         "name" : "ns-hooks"
      },
      {
         "title" : "Namespace Internals",
         "package" : "base",
         "desc" : " Internal namespace support functions. Not intended to be called directly, and only visible because of the special nature of the base namespace. ",
         "name" : "ns-internals"
      },
      {
         "name" : "ns-load",
         "title" : "Loading and Unloading Name Spaces",
         "desc" : " Functions to load and unload name spaces. ",
         "package" : "base"
      },
      {
         "desc" : " Functions to support reflection on namespace objects. ",
         "package" : "base",
         "title" : "Namespace Reflection Support",
         "name" : "ns-reflect.Rd"
      },
      {
         "name" : "ns-topenv",
         "title" : "Top Level Environment",
         "package" : "base",
         "desc" : " Finding the top level environment from an environment envir and its enclosing environments. "
      },
      {
         "name" : "NULL",
         "title" : "The Null Object",
         "package" : "base",
         "desc" : " NULL represents the null object in : it is a reserved word. NULL is often returned by expressions and functions whose value is undefined. as.null ignores its argument and returns the value NULL. is.null returns TRUE if its argument is NULL and FALSE otherwise. "
      },
      {
         "name" : "numeric",
         "desc" : " Creates or coerces objects of type \"numeric\". is.numeric is a more general test of an object being interpretable as numbers. ",
         "package" : "base",
         "title" : "Numeric Vectors"
      },
      {
         "desc" : "A simple S3 class for representing numeric versions including package versions, and associated methods.",
         "package" : "base",
         "title" : "Numeric Versions",
         "name" : "numeric_version"
      },
      {
         "title" : "Numeric Constants",
         "package" : "base",
         "desc" : " How parses numeric constants. ",
         "name" : "NumericConstants"
      },
      {
         "name" : "octmode",
         "package" : "base",
         "desc" : " Convert or print integers in octal format, with as many digits as are needed to display the largest, using leading zeroes as necessary. ",
         "title" : "Display Numbers in Octal"
      },
      {
         "title" : "Function Exit Code",
         "package" : "base",
         "desc" : " on.exit records the expression given as its argument as needing to be executed when the current function exits (either naturally or as the result of an error). This is useful for resetting graphical parameters or performing other cleanup actions. If no expression is provided, i.e., the call is on.exit(), then the current on.exit code is removed. ",
         "name" : "on.exit"
      },
      {
         "name" : "Ops.Date",
         "desc" : " Operators for the \"Date\" class. There is an Ops method and specific methods for + and - for the Date class. ",
         "package" : "base",
         "title" : "Operators on the Date Class"
      },
      {
         "name" : "options",
         "title" : "Options Settings",
         "package" : "base",
         "desc" : " Allow the user to set and examine a variety of global options which affect the way in which computes and displays its results. "
      },
      {
         "name" : "order",
         "desc" : " order returns a permutation which rearranges its first argument into ascending or descending order, breaking ties by further arguments. sort.list is the same, using only one argument. See the examples for how to use these functions to sort data frames, etc. ",
         "package" : "base",
         "title" : "Ordering Permutation"
      },
      {
         "title" : "Outer Product of Arrays",
         "package" : "base",
         "desc" : " The outer product of the arrays X and Y is the array A with dimension c(dim(X), dim(Y)) where element A[c(arrayindex.x, arrayindex.y)] = FUN(X[arrayindex.x], Y[arrayindex.y], ). ",
         "name" : "outer"
      },
      {
         "title" : "Parentheses and Braces",
         "package" : "base",
         "desc" : " Open parenthesis, (, and open brace, {, are .Primitive functions in . Effectively, ( is semantically equivalent to the identity function(x) x, whereas { is slightly more interesting, see examples. ",
         "name" : "Paren"
      },
      {
         "desc" : " parse returns the parsed but unevaluated expressions in a list. ",
         "package" : "base",
         "title" : "Parse Expressions",
         "name" : "parse"
      },
      {
         "name" : "paste",
         "desc" : " Concatenate vectors after converting to character. ",
         "package" : "base",
         "title" : "Concatenate Strings"
      },
      {
         "package" : "base",
         "desc" : " Expand a path name, for example by replacing a leading tilde by the user's home directory (if defined on that platform). ",
         "title" : "Expand File Paths",
         "name" : "path.expand"
      },
      {
         "name" : "pcre_config",
         "desc" : " Report some of the configuration options of the version of PCRE in use in this session. ",
         "package" : "base",
         "title" : " Report Configuration Options for PCRE "
      },
      {
         "name" : ".Platform",
         "desc" : " .Platform is a list with some details of the platform under which was built. This provides means to write OS-portable code. ",
         "package" : "base",
         "title" : "Platform Specific Variables"
      },
      {
         "title" : "Partial String Matching",
         "package" : "base",
         "desc" : " pmatch seeks matches for the elements of its first argument among those of its second. ",
         "name" : "pmatch"
      },
      {
         "name" : "polyroot",
         "package" : "base",
         "desc" : " Find zeros of a real or complex polynomial. ",
         "title" : "Find Zeros of a Real or Complex Polynomial"
      },
      {
         "name" : "pos.to.env",
         "title" : "Convert Positions in the Search Path to Environments",
         "package" : "base",
         "desc" : " Returns the environment at a specified position in the search path. "
      },
      {
         "name" : "pretty",
         "title" : "Pretty Breakpoints",
         "desc" : " Compute a sequence of about n+1 equally spaced round values which cover the range of the values in x. The values are chosen so that they are 1, 2 or 5 times a power of 10. ",
         "package" : "base"
      },
      {
         "name" : "Primitive",
         "title" : "Look Up a Primitive Function",
         "package" : "base",
         "desc" : " .Primitive looks up by name a primitive (internally implemented) function. "
      },
      {
         "desc" : " Print a data frame. ",
         "package" : "base",
         "title" : "Printing Data Frames",
         "name" : "print.data.frame"
      },
      {
         "title" : "Default Printing",
         "package" : "base",
         "desc" : " print.default is the default method of the generic print function which prints its argument. ",
         "name" : "print.default"
      },
      {
         "name" : "print",
         "title" : "Print Values",
         "desc" : " print prints its argument and returns it invisibly (via invisible(x)). It is a generic function which means that new printing methods can be easily added for new classes. ",
         "package" : "base"
      },
      {
         "title" : "Print Matrices, Old-style",
         "desc" : " An earlier method for printing matrices, provided for S compatibility. ",
         "package" : "base",
         "name" : "prmatrix"
      },
      {
         "name" : "proc.time",
         "package" : "base",
         "desc" : " proc.time determines how much real and CPU time (in seconds) the currently running process has already taken. ",
         "title" : "Running Time of R"
      },
      {
         "desc" : " prod returns the product of all the values present in its arguments. ",
         "package" : "base",
         "title" : "Product of Vector Elements",
         "name" : "prod"
      },
      {
         "name" : "prop.table",
         "title" : "Express Table Entries as Fraction of Marginal Table",
         "package" : "base",
         "desc" : " This is really sweep(x, margin, margin.table(x, margin), \"/\") for newbies, except that if margin has length zero, then one gets x/sum(x). "
      },
      {
         "desc" : " Functions to push back text lines onto a connection, and to enquire how many lines are currently pushed back. ",
         "package" : "base",
         "title" : "Push Text Back on to a Connection",
         "name" : "pushBack"
      },
      {
         "desc" : " qr computes the QR decomposition of a matrix. ",
         "package" : "base",
         "title" : "The QR Decomposition of a Matrix",
         "name" : "qr"
      },
      {
         "name" : "QR.Auxiliaries",
         "title" : "Reconstruct the Q, R, or X Matrices from a QR Object",
         "package" : "base",
         "desc" : " Returns the original matrix from which the object was constructed or the components of the decomposition. "
      },
      {
         "desc" : " The function quit or its alias q terminate the current session. ",
         "package" : "base",
         "title" : "Terminate an R Session",
         "name" : "quit"
      },
      {
         "title" : "Quotes",
         "desc" : " Descriptions of the various uses of quoting in . ",
         "package" : "base",
         "name" : "Quotes"
      },
      {
         "title" : "User-supplied Random Number Generation",
         "package" : "base",
         "desc" : " Function RNGkind allows user-coded uniform and normal random number generators to be supplied. The details are given here. ",
         "name" : "Random.user"
      },
      {
         "name" : "Random",
         "package" : "base",
         "desc" : " .Random.seed is an integer vector, containing the random number generator (RNG) state for random number generation in . It can be saved and restored, but should not be altered by the user. RNGkind is a more friendly interface to query or set the kind of RNG in use. RNGversion can be used to set the random generators as they were in an earlier version (for reproducibility). set.seed is the recommended way to specify seeds. ",
         "title" : "Random Number Generation"
      },
      {
         "name" : "range",
         "title" : "Range of Values",
         "desc" : " range returns a vector containing the minimum and maximum of all the given arguments. ",
         "package" : "base"
      },
      {
         "desc" : " Returns the sample ranks of the values in a vector. Ties (i.e., equal values) and missing values can be handled in several ways. ",
         "package" : "base",
         "title" : "Sample Ranks",
         "name" : "rank"
      },
      {
         "name" : "rapply",
         "package" : "base",
         "desc" : " rapply is a recursive version of lapply. ",
         "title" : "Recursively Apply a Function to a List"
      },
      {
         "desc" : " Creates or tests for objects of type \"raw\". ",
         "package" : "base",
         "title" : "Raw Vectors",
         "name" : "raw"
      },
      {
         "title" : "Raw Connections",
         "desc" : " Input and output raw connections. ",
         "package" : "base",
         "name" : "rawConnection"
      },
      {
         "name" : "rawConversion",
         "package" : "base",
         "desc" : " Conversion and manipulation of objects of type \"raw\". ",
         "title" : "Convert to or from Raw Vectors"
      },
      {
         "package" : "base",
         "desc" : " Utilities for converting files in R documentation (Rd) format to other formats or create indices from them, and for converting documentation in other formats to Rd format. ",
         "title" : "Utilities for Processing Rd Files",
         "name" : "RdUtils"
      },
      {
         "title" : "Transfer Binary Data To and From Connections",
         "package" : "base",
         "desc" : " Read binary data from a connection, or write binary data to a connection. ",
         "name" : "readBin"
      },
      {
         "name" : "readChar",
         "title" : "Transfer Character Strings To and From Connections",
         "desc" : " Transfer character strings to and from connections, without assuming they are null-terminated on the connection. ",
         "package" : "base"
      },
      {
         "desc" : " readline reads a line from the terminal (in interactive use). ",
         "package" : "base",
         "title" : "Read a Line from the Terminal",
         "name" : "readline"
      },
      {
         "name" : "readLines",
         "title" : "Read Text Lines from a Connection",
         "desc" : " Read some or all text lines from a connection. ",
         "package" : "base"
      },
      {
         "name" : "readRDS",
         "title" : "Serialization Interface for Single Objects",
         "package" : "base",
         "desc" : " Functions to write a single object to a file, and to restore it. "
      },
      {
         "title" : " Set Environment Variables from a File ",
         "package" : "base",
         "desc" : " Read as file such as .Renviron or Renviron.site in the format described in the help for Startup, and set environment variables as defined in the file. ",
         "name" : "readRenviron"
      },
      {
         "title" : "Recursive Calling",
         "desc" : " Recall is used as a placeholder for the name of the function in which it is called. It allows the definition of recursive functions which still work after being renamed, see example below. ",
         "package" : "base",
         "name" : "Recall"
      },
      {
         "package" : "base",
         "desc" : " Registers an function to be called upon garbage collection of object or (optionally) at the end of an session. ",
         "title" : "Finalization of Objects",
         "name" : "reg.finalizer"
      },
      {
         "name" : "regex",
         "title" : "Regular Expressions as used in R",
         "desc" : " This help page documents the regular expression patterns supported by grep and related functions grepl, regexpr, gregexpr, sub and gsub, as well as by strsplit. ",
         "package" : "base"
      },
      {
         "title" : "Extract or Replace Matched Substrings",
         "desc" : " Extract or replace matched substrings from match data obtained by regexpr, gregexpr or regexec. ",
         "package" : "base",
         "name" : "regmatches"
      },
      {
         "name" : "rep",
         "title" : "Replicate Elements of Vectors and Lists",
         "desc" : " rep replicates the values in x. It is a generic function, and the (internal) default method is described here. rep.int and rep_len are faster simplified versions for two common cases. They are not generic. ",
         "package" : "base"
      },
      {
         "title" : "Replace Values in a Vector",
         "package" : "base",
         "desc" : " replace replaces the values in x with indices given in list by those given in values. If necessary, the values in values are recycled. ",
         "name" : "replace"
      },
      {
         "title" : "Reserved Words in R",
         "package" : "base",
         "desc" : " The reserved words in 's parser are if else repeat while function for in next break TRUE FALSE NULL Inf NaN NA NA_integer_ NA_real_ NA_complex_ NA_character_ and ..1, ..2 etc, which are used to refer to arguments passed down from a calling function. See the html/doc/manual/R-intro.html#The-three-dots-argumentIntroduction to RIntroduction to R manual for usage of these syntactic elements, and dotsMethods for their use in formal methods. ",
         "name" : "Reserved"
      },
      {
         "title" : "Reverse Elements",
         "package" : "base",
         "desc" : " rev provides a reversed version of its argument. It is generic function with a default method for vectors and one for dendrograms. Note that this is no longer needed (nor efficient) for obtaining vectors sorted into descending order, since that is now rather more directly achievable by sort(x, decreasing = TRUE). ",
         "name" : "rev"
      },
      {
         "name" : "Rhome",
         "title" : "Return the R Home Directory",
         "desc" : " Return the home directory. ",
         "package" : "base"
      },
      {
         "desc" : " Compute the lengths and values of runs of equal values in a vector -- or the reverse operation. ",
         "package" : "base",
         "title" : "Run Length Encoding",
         "name" : "rle"
      },
      {
         "title" : "Remove Objects from a Specified Environment",
         "package" : "base",
         "desc" : " remove and rm can be used to remove objects. These can be specified successively as character strings, or in the character vector list, or through a combination of both. All objects thus specified will be removed. If envir is NULL then the currently active environment is searched first. If inherits is TRUE then parents of the supplied directory are searched until a variable with the given name is encountered. A warning is printed for each variable that is not found. ",
         "name" : "remove"
      },
      {
         "name" : "round.POSIXt",
         "title" : "Round / Truncate Data-Time Objects",
         "desc" : " Round or truncate date-time objects. ",
         "package" : "base"
      },
      {
         "package" : "base",
         "desc" : " ceiling takes a single numeric argument x and returns a numeric vector containing the smallest integers not less than the corresponding elements of x. floor takes a single numeric argument x and returns a numeric vector containing the largest integers not greater than the corresponding elements of x. trunc takes a single numeric argument x and returns a numeric vector containing the integers formed by truncating the values in x toward 0. round rounds the values in its first argument to the specified number of decimal places (default 0). signif rounds the values in its first argument to the specified number of significant digits. ",
         "title" : "Rounding of Numbers",
         "name" : "Round"
      },
      {
         "desc" : " All data frames have a row names attribute, a character vector of length the number of rows with no duplicates nor missing values. For convenience, these are generic functions for which users can write other methods, and there are default methods for arrays. The description here is for the data.frame method. ",
         "package" : "base",
         "title" : "Get and Set Row Names for Data Frames",
         "name" : "row.names"
      },
      {
         "name" : "row",
         "desc" : " Returns a matrix of integers indicating their row number in a matrix-like object, or a factor indicating the row labels. ",
         "package" : "base",
         "title" : "Row Indexes"
      },
      {
         "desc" : " Compute column sums across rows of a numeric matrix-like object for each level of a grouping variable. rowsum is generic, with a method for data frames and a default method for vectors and matrices. ",
         "package" : "base",
         "title" : "Give Column Sums of a Matrix or Data Frame, Based on a Grouping Variable",
         "name" : "rowsum"
      },
      {
         "name" : "sample",
         "desc" : " sample takes a sample of the specified size from the elements of x using either with or without replacement. ",
         "package" : "base",
         "title" : "Random Samples and Permutations"
      },
      {
         "package" : "base",
         "desc" : " save writes an external representation of objects to the specified file. The objects can be read back from the file at a later date by using the function load or attach (or data in some cases). save.image() is just a short-cut for save my current workspace, i.e., save(list = ls(all.names = TRUE), file = \".RData\", envir = .GlobalEnv). It is also what happens with q(\"yes\"). ",
         "title" : "Save R Objects",
         "name" : "save"
      },
      {
         "name" : "scale",
         "title" : "Scaling and Centering of Matrix-like Objects",
         "package" : "base",
         "desc" : " scale is generic function whose default method centers and/or scales the columns of a numeric matrix. "
      },
      {
         "title" : "Read Data Values",
         "package" : "base",
         "desc" : " Read data into a vector or list from the console or file. ",
         "name" : "scan"
      },
      {
         "name" : "search",
         "title" : "Give Search Path for R Objects",
         "desc" : " Gives a list of attached packages (see library), and objects, usually data.frames. ",
         "package" : "base"
      },
      {
         "name" : "seek",
         "package" : "base",
         "desc" : " Functions to re-position connections. ",
         "title" : "Functions to Reposition Connections"
      },
      {
         "title" : "Generate Regular Sequences of Dates",
         "desc" : " The method for seq for objects of class class \"Date\" representing calendar dates. ",
         "package" : "base",
         "name" : "seq.Date"
      },
      {
         "desc" : " The method for seq for date-time classes. ",
         "package" : "base",
         "title" : "Generate Regular Sequences of Times",
         "name" : "seq.POSIXt"
      },
      {
         "desc" : " Generate regular sequences. seq is a standard generic with a default method. seq.int is a primitive which can be much faster but has a few restrictions. seq_along and seq_len are very fast primitives for two common cases. ",
         "package" : "base",
         "title" : "Sequence Generation",
         "name" : "seq"
      },
      {
         "name" : "sequence",
         "title" : "Create A Vector of Sequences",
         "package" : "base",
         "desc" : " For each element of nvec the sequence seq_len(nvec[i]) is created. These are concatenated and the result returned. "
      },
      {
         "name" : "serialize",
         "title" : "Simple Serialization Interface",
         "desc" : " A simple low-level interface for serializing to connections. ",
         "package" : "base"
      },
      {
         "package" : "base",
         "desc" : " Performs set union, intersection, (asymmetric!) difference, equality and membership on two vectors. ",
         "title" : "Set Operations",
         "name" : "sets"
      },
      {
         "name" : "setTimeLimit",
         "title" : "Set CPU and/or Elapsed Time Limits",
         "desc" : " Functions to set CPU and/or elapsed time limits for top-level computations or the current session. ",
         "package" : "base"
      },
      {
         "name" : "showConnections",
         "title" : "Display Connections",
         "package" : "base",
         "desc" : " Display aspects of connections. "
      },
      {
         "title" : "Quote Strings for Use in OS Shells",
         "desc" : " Quote a string to be passed to an operating system shell. ",
         "package" : "base",
         "name" : "shQuote"
      },
      {
         "title" : "Sign Function",
         "package" : "base",
         "desc" : " sign returns a vector with the signs of the corresponding elements of x (the sign of a real number is 1, 0, or -1 if the number is positive, zero, or negative, respectively). Note that sign does not operate on complex vectors. ",
         "name" : "sign"
      },
      {
         "package" : "base",
         "desc" : " sink diverts output to a connection. sink.number() reports how many diversions are in use. sink.number(type = \"message\") reports the number of the connection currently being used for error messages. ",
         "title" : "Send R Output to a File",
         "name" : "sink"
      },
      {
         "name" : "slice.index",
         "desc" : " Returns a matrix of integers indicating the number of their slice in a given array. ",
         "package" : "base",
         "title" : "Slice Indexes in an Array"
      },
      {
         "name" : "slotOp",
         "title" : "Extract or Replace A Slot",
         "desc" : " Extract or replace the contents of a slot in a object with a formal (S4) class structure. ",
         "package" : "base"
      },
      {
         "name" : "socketSelect",
         "desc" : " Waits for the first of several socket connections to become available. ",
         "package" : "base",
         "title" : "Wait on Socket Connections"
      },
      {
         "title" : "Solve a System of Equations",
         "package" : "base",
         "desc" : " This generic function solves the equation a %*% x = b for x, where b can be either a vector or a matrix. ",
         "name" : "solve"
      },
      {
         "name" : "sort",
         "package" : "base",
         "desc" : " Sort (or order) a vector or factor (partially) into ascending or descending order. For ordering along more than one variable, e.g., for sorting data frames, see order. ",
         "title" : "Sorting or Ordering Vectors"
      },
      {
         "name" : "source",
         "title" : "Read R Code from a File or a Connection",
         "package" : "base",
         "desc" : " source causes to accept its input from the named file or URL or connection. Input is read and parsed from that file until the end of the file is reached, then the parsed expressions are evaluated sequentially in the chosen environment. "
      },
      {
         "package" : "base",
         "desc" : " Special mathematical functions related to the beta and gamma functions. ",
         "title" : "Special Functions of Mathematics",
         "name" : "Special"
      },
      {
         "title" : "Divide into Groups and Reassemble",
         "package" : "base",
         "desc" : " split divides the data in the vector x into the groups defined by f. The replacement forms replace values corresponding to such a division. unsplit reverses the effect of split. ",
         "name" : "split"
      },
      {
         "title" : "Use C-style String Formatting Commands",
         "package" : "base",
         "desc" : " A wrapper for the C function sprintf, that returns a character vector containing a formatted combination of text and variable values. ",
         "name" : "sprintf"
      },
      {
         "title" : "Quote Text",
         "desc" : " Single or double quote text by combining with appropriate single or double left and right quotation marks. ",
         "package" : "base",
         "name" : "sQuote"
      },
      {
         "package" : "base",
         "desc" : " These functions are for working with source files. ",
         "title" : "References to source files",
         "name" : "srcfile"
      },
      {
         "name" : "standardGeneric",
         "desc" : " The function standardGeneric initiates dispatch of S4 methods: see the references and the documentation of the methods package. Usually, calls to this function are generated automatically and not explicitly by the programmer. ",
         "package" : "base",
         "title" : "Formal Method System -- Dispatching S4 Methods"
      },
      {
         "title" : "Initialization at Start of an R Session",
         "desc" : " In , the startup mechanism is as follows. Unless --no-environ was given on the command line, searches for site and user files to process for setting environment variables. The name of the site file is the one pointed to by the environment variable R_ENVIRON; if this is unset, R_HOME/etc/Renviron.site is used (if it exists, which it does not in a factory-fresh installation). The name of the user file can be specified by the R_ENVIRON_USER environment variable; if this is unset, the files searched for are .Renviron in the current or in the user's home directory (in that order). See Details for how the files are read. Then searches for the site-wide startup profile file of code unless the command line option --no-site-file was given. The path of this file is taken from the value of the R_PROFILE environment variable (after tilde expansion). If this variable is unset, the default is R_HOME/etc/Rprofile.site, which is used if it exists unix (which it does not in a factory-fresh installation). windows (it contains settings from the installer in a factory-fresh installation). This code is sourced into the base package. Users need to be careful not to unintentionally overwrite objects in base, and it is normally advisable to use local if code needs to be executed: see the examples. Then, unless --no-init-file was given, searches for a user profile, a file of code. The path of this file can be specified by the R_PROFILE_USER environment variable (and tilde expansion will be performed). If this is unset, a file called .Rprofile is searched for in the current directory or in the user's home directory (in that order). The user profile file is sourced into the workspace. Note that when the site and user profile files are sourced only the base package is loaded, so objects in other packages need to be referred to by e.g.\\\\ifelse{latex}{\\\\out{~}}{ }latex~ utils::dump.frames or after explicitly loading the package concerned. then loads a saved image of the user workspace from .RData in the current directory if there is one (unless --no-restore-data or --no-restore was specified on the command line). Next, if a function .First is found on the search path, it is executed as .First(). Finally, function .First.sys() in the base package is run. This calls require to attach the default packages specified by options(\"defaultPackages\"). If the methods package is included, this will have been attached earlier (by function .OptRequireMethods()) so that namespace initializations such as those from the user workspace will proceed correctly. A function .First (and .Last) can be defined in appropriate .Rprofile or Rprofile.site files or have been saved in .RData. If you want a different set of packages than the default ones when you start, insert a call to options in the .Rprofile or Rprofile.site file. For example, options(defaultPackages = character()) will attach no extra packages on startup (only the base package) (or set R_DEFAULT_PACKAGES=NULL as an environment variable before running ). Using options(defaultPackages = \"\") or R_DEFAULT_PACKAGES=\"\" enforces the R system default. On front-ends which support it, the commands history is read from the file specified by the environment variable R_HISTFILE (default .Rhistory in the current directory) unless --no-restore-history or --no-restore was specified. The command-line option --vanilla implies --no-site-file, --no-init-file, --no-environ and (except for R CMD) --no-restore windows Under Windows, it also implies --no-Rconsole, which prevents loading the Rconsole file. ",
         "package" : "base",
         "name" : "Startup"
      },
      {
         "name" : "stop",
         "package" : "base",
         "desc" : " stop stops execution of the current expression and executes an error action. geterrmessage gives the last error message. ",
         "title" : "Stop Function Execution"
      },
      {
         "desc" : " If any of the expressions in are not all TRUE, stop is called, producing an error message indicating the first of the elements of which were not true. ",
         "package" : "base",
         "title" : "Ensure the Truth of R Expressions",
         "name" : "stopifnot"
      },
      {
         "name" : "strptime",
         "desc" : " Functions to convert between character representations and objects of classes \"POSIXlt\" and \"POSIXct\" representing calendar dates and times. ",
         "package" : "base",
         "title" : "Date-time Conversion Functions to and from Character"
      },
      {
         "name" : "strsplit",
         "package" : "base",
         "desc" : " Split the elements of a character vector x into substrings according to the matches to substring split within them. ",
         "title" : "Split the Elements of a Character Vector"
      },
      {
         "title" : "Convert Strings to Integers",
         "desc" : " Convert strings to integers according to the given base using the C function strtol, or choose a suitable base following the C rules. ",
         "package" : "base",
         "name" : "strtoi"
      },
      {
         "title" : "Trim Character Strings to Specified Display Widths",
         "desc" : " Trim character strings to specified display widths. ",
         "package" : "base",
         "name" : "strtrim"
      },
      {
         "title" : "Attribute Specification",
         "package" : "base",
         "desc" : " structure returns the given object with further attributes set. ",
         "name" : "structure"
      },
      {
         "package" : "base",
         "desc" : " Each character string in the input is first split into paragraphs (or lines containing whitespace only). The paragraphs are then formatted by breaking lines at word boundaries. The target columns for wrapping lines and the indentation of the first and all subsequent lines of a paragraph can be controlled independently. ",
         "title" : "Wrap Character Strings to Format Paragraphs",
         "name" : "strwrap"
      },
      {
         "name" : "subset",
         "title" : "Subsetting Vectors, Matrices and Data Frames",
         "package" : "base",
         "desc" : " Return subsets of vectors, matrices or data frames which meet conditions. "
      },
      {
         "desc" : " substitute returns the parse tree for the (unevaluated) expression expr, substituting any variables bound in env. quote simply returns its argument. The argument is not evaluated and can be any R expression. enquote is a simple one-line utility which transforms a call of the form Foo(....) into the call quote(Foo(....)). This is typically used to protect a call from early evaluation. ",
         "package" : "base",
         "title" : "Substituting and Quoting Expressions",
         "name" : "substitute"
      },
      {
         "package" : "base",
         "desc" : " Extract or replace substrings in a character vector. ",
         "title" : "Substrings of a Character Vector",
         "name" : "substr"
      },
      {
         "desc" : " sum returns the sum of all the values present in its arguments. ",
         "package" : "base",
         "title" : "Sum of Vector Elements",
         "name" : "sum"
      },
      {
         "name" : "summary",
         "desc" : " summary is a generic function used to produce result summaries of the results of various model fitting functions. The function invokes particular methods which depend on the class of the first argument. ",
         "package" : "base",
         "title" : "Object Summaries"
      },
      {
         "name" : "svd",
         "package" : "base",
         "desc" : " Compute the singular-value decomposition of a rectangular matrix. ",
         "title" : "Singular Value Decomposition of a Matrix"
      },
      {
         "name" : "sweep",
         "title" : "Sweep out Array Summaries",
         "package" : "base",
         "desc" : " Return an array obtained from an input array by sweeping out a summary statistic. "
      },
      {
         "title" : "Select One of a List of Alternatives",
         "package" : "base",
         "desc" : " switch evaluates EXPR and accordingly chooses one of the further arguments (in ). ",
         "name" : "switch"
      },
      {
         "title" : "Operator Syntax and Precedence",
         "desc" : " Outlines syntax and gives the precedence of operators. ",
         "package" : "base",
         "name" : "Syntax"
      },
      {
         "title" : "Get Environment Variables",
         "package" : "base",
         "desc" : " Sys.getenv obtains the values of the environment variables. ",
         "name" : "Sys.getenv"
      },
      {
         "package" : "base",
         "desc" : " Get the process ID of the Session. It is guaranteed by the operating system that two sessions running simultaneously will have different IDs, but it is possible that sessions running at different times will have the same ID. ",
         "title" : "Get the Process ID of the R Session",
         "name" : "Sys.getpid"
      },
      {
         "package" : "base",
         "desc" : " Function to do wildcard expansion (also known as globbing) on file paths. ",
         "title" : "Wildcard Expansion on File Paths",
         "name" : "Sys.glob"
      },
      {
         "name" : "Sys.info",
         "desc" : " Reports system and user information. ",
         "package" : "base",
         "title" : "Extract System and User Information"
      },
      {
         "name" : "Sys.localeconv",
         "title" : "Find Details of the Numerical and Monetary Representations in the Current Locale",
         "package" : "base",
         "desc" : " Get details of the numerical and monetary representations in the current locale. "
      },
      {
         "package" : "base",
         "desc" : " These functions provide access to environments (frames in S terminology) associated with functions further up the calling stack. ",
         "title" : "Functions to Access the Function Call Stack",
         "name" : "sys.parent"
      },
      {
         "title" : " Read File Symbolic Links ",
         "package" : "base",
         "desc" : " Find out if a file path is a symbolic link, and if so what it is linked to, via the system call readlink. Symbolic links are a POSIX concept, not implemented on Windows but for most filesystems on Unix-alikes. ",
         "name" : "Sys.readlink"
      },
      {
         "desc" : " Sys.setenv sets environment variables (for other processes called from within or future calls to Sys.getenv from this process). Sys.unsetenv removes environment variables. ",
         "package" : "base",
         "title" : "Set or Unset Environment Variables",
         "name" : "Sys.setenv"
      },
      {
         "title" : " Set File Time ",
         "package" : "base",
         "desc" : " Uses system calls to set the times on a file or directory. ",
         "name" : "Sys.setFileTime"
      },
      {
         "name" : "Sys.sleep",
         "title" : "Suspend Execution for a Time Interval",
         "desc" : " Suspend execution of expressions for a given number of seconds ",
         "package" : "base"
      },
      {
         "name" : "sys.source",
         "package" : "base",
         "desc" : " Parses expressions in the given file, and then successively evaluates them in the specified environment. ",
         "title" : "Parse and Evaluate Expressions from a File"
      },
      {
         "title" : "Get Current Date and Time",
         "package" : "base",
         "desc" : " Sys.time and Sys.Date returns the system's idea of the current date with and without time. ",
         "name" : "Sys.time"
      },
      {
         "title" : "Find Full Paths to Executables",
         "desc" : " This is an interface to the system command which, or to an emulation on Windows. ",
         "package" : "base",
         "name" : "Sys.which"
      },
      {
         "name" : "system.file",
         "title" : "Find Names of R System Files",
         "desc" : " Finds the full file names of files in packages etc. ",
         "package" : "base"
      },
      {
         "name" : "system",
         "package" : "base",
         "desc" : " system invokes the OS command specified by command. ",
         "title" : "Invoke a System Command"
      },
      {
         "package" : "base",
         "desc" : "Return CPU (and other) times that expr used. ",
         "title" : "CPU Time Used",
         "name" : "system.time"
      },
      {
         "name" : "system2",
         "desc" : " system2 invokes the OS command specified by command. ",
         "package" : "base",
         "title" : "Invoke a System Command"
      },
      {
         "name" : "t",
         "desc" : " Given a matrix or data.frame x, t returns the transpose of x. ",
         "package" : "base",
         "title" : "Matrix Transpose"
      },
      {
         "package" : "base",
         "desc" : " table uses the cross-classifying factors to build a contingency table of the counts at each combination of factor levels. ",
         "title" : "Cross Tabulation and Table Creation",
         "name" : "table"
      },
      {
         "name" : "tabulate",
         "title" : "Tabulation for Vectors",
         "package" : "base",
         "desc" : " tabulate takes the integer-valued vector bin and counts the number of times each integer occurs in it. "
      },
      {
         "name" : "tapply",
         "title" : "Apply a Function Over a Ragged Array",
         "desc" : " Apply a function to each cell of a ragged array, that is to each (non-empty) group of values given by a unique combination of the levels of certain factors. ",
         "package" : "base"
      },
      {
         "name" : "taskCallback",
         "title" : "Add or Remove a Top-Level Task Callback",
         "desc" : " addTaskCallback registers an R function that is to be called each time a top-level task is completed. removeTaskCallback un-registers a function that was registered earlier via addTaskCallback. These provide low-level access to the internal/native mechanism for managing task-completion actions. One can use taskCallbackManager at the S-language level to manage S functions that are called at the completion of each task. This is easier and more direct. ",
         "package" : "base"
      },
      {
         "name" : "taskCallbackManager",
         "title" : "Create an R-level Task Callback Manager",
         "desc" : " This provides an entirely S-language mechanism for managing callbacks or actions that are invoked at the conclusion of each top-level task. Essentially, we register a single R function from this manager with the underlying, native task-callback mechanism and this function handles invoking the other R callbacks under the control of the manager. The manager consists of a collection of functions that access shared variables to manage the list of user-level callbacks. ",
         "package" : "base"
      },
      {
         "name" : "taskCallbackNames",
         "package" : "base",
         "desc" : " This provides a way to get the names (or identifiers) for the currently registered task callbacks that are invoked at the conclusion of each top-level task. These identifiers can be used to remove a callback. ",
         "title" : "Query the Names of the Current Internal Top-Level Task Callbacks"
      },
      {
         "package" : "base",
         "desc" : " tempfile returns a vector of character strings which can be used as names for temporary files. ",
         "title" : "Create Names for Temporary Files",
         "name" : "tempfile"
      },
      {
         "name" : "textConnection",
         "title" : "Text Connections",
         "package" : "base",
         "desc" : " Input and output text connections. "
      },
      {
         "name" : "tilde",
         "title" : "Tilde Operator",
         "desc" : " Tilde is used to separate the left- and right-hand sides in a model formula. ",
         "package" : "base"
      },
      {
         "name" : "timezones",
         "title" : "Time Zones",
         "package" : "base",
         "desc" : " Information about time zones in . Sys.timezone returns the name of the current time zone. "
      },
      {
         "title" : "Convert an R Object to a Character String",
         "desc" : " This is a helper function for format to produce a single character string describing an object. ",
         "package" : "base",
         "name" : "toString"
      },
      {
         "name" : "trace",
         "package" : "base",
         "desc" : " A call to trace allows you to insert debugging code (e.g., a call to browser or recover) at chosen places in any function. A call to untrace cancels the tracing. Specified methods can be traced the same way, without tracing all calls to the function. Trace code can be any expression. Tracing can be temporarily turned on or off globally by calling tracingState. ",
         "title" : "Interactive Tracing and Debugging of Calls to a Function or Method"
      },
      {
         "package" : "base",
         "desc" : " By default traceback() prints the call stack of the last uncaught error, i.e., the sequence of calls that lead to the error. This is useful when an error occurs with an unidentifiable error message. It can also be used to print the current stack or arbitrary lists of deparsed calls. ",
         "title" : "Print Call Stacks",
         "name" : "traceback"
      },
      {
         "name" : "tracemem",
         "title" : "Trace Copying of Objects",
         "package" : "base",
         "desc" : " This function marks an object so that a message is printed whenever the internal code copies the object. It is a major cause of hard-to-predict memory use in R. "
      },
      {
         "name" : "transform",
         "desc" : " transform is a generic function, which---at least currently---only does anything useful with data frames. transform.default converts its first argument to a data frame if possible and calls transform.data.frame. ",
         "package" : "base",
         "title" : "Transform an Object, for Example a Data Frame"
      },
      {
         "title" : "Trigonometric Functions",
         "desc" : " These functions give the obvious trigonometric functions. They respectively compute the cosine, sine, tangent, arc-cosine, arc-sine, arc-tangent, and the two-argument arc-tangent. cospi(x), sinpi(x), and tanpi(x), compute cos(pi*x), sin(pi*x), and tan(pi*x). ",
         "package" : "base",
         "name" : "Trig"
      },
      {
         "package" : "base",
         "desc" : " Remove leading and/or trailing whitespace from character strings. ",
         "title" : "Remove Leading/Trailing Whitespace",
         "name" : "trimws"
      },
      {
         "title" : "Try an Expression Allowing Error Recovery",
         "package" : "base",
         "desc" : " try is a wrapper to run an expression that might fail and allow the user's code to handle error-recovery. ",
         "name" : "try"
      },
      {
         "title" : "The Type of an Object",
         "package" : "base",
         "desc" : " typeof determines the ( internal) type or storage mode of any object ",
         "name" : "typeof"
      },
      {
         "title" : "Extract Unique Elements",
         "desc" : " unique returns a vector, data frame or array like x but with duplicate elements/rows removed. ",
         "package" : "base",
         "name" : "unique"
      },
      {
         "name" : "unlink",
         "title" : "Delete Files and Directories",
         "package" : "base",
         "desc" : " unlink deletes the file(s) or directories specified by x. "
      },
      {
         "name" : "unlist",
         "package" : "base",
         "desc" : " Given a list structure x, unlist simplifies it to produce a vector which contains all the atomic components which occur in x. ",
         "title" : "Flatten Lists"
      },
      {
         "name" : "unname",
         "title" : "Remove names or dimnames",
         "package" : "base",
         "desc" : " Remove the names or dimnames attribute of an object. "
      },
      {
         "name" : "UseMethod",
         "title" : "Class Methods",
         "package" : "base",
         "desc" : " possesses a simple generic function mechanism which can be used for an object-oriented style of programming. Method dispatch takes place based on the class(es) of the first argument to the generic function or of the object supplied as an argument to UseMethod or NextMethod. "
      },
      {
         "title" : "Functions to Get and Set Hooks for Load, Attach, Detach and Unload",
         "desc" : " These functions allow users to set actions to be taken before packages are attached/detached and namespaces are (un)loaded. ",
         "package" : "base",
         "name" : "userhooks"
      },
      {
         "name" : "utf8Conversion",
         "package" : "base",
         "desc" : " Conversion of UTF-8 encoded character vectors to and from integer vectors. ",
         "title" : "Convert to or from UTF-8-encoded Character Vectors"
      },
      {
         "package" : "base",
         "desc" : " vector produces a vector of the given length and mode. as.vector, a generic, attempts to coerce its argument into a vector of mode mode (the default is to coerce to whichever vector mode is most convenient): if the result is atomic all attributes are removed. is.vector returns TRUE if x is a vector of the specified mode having no attributes other than names. It returns FALSE otherwise. ",
         "title" : "Vectors",
         "name" : "vector"
      },
      {
         "name" : "Vectorize",
         "desc" : " Vectorize creates a function wrapper that vectorizes the action of its argument FUN. ",
         "package" : "base",
         "title" : "Vectorize a Scalar Function"
      },
      {
         "desc" : " R.Version() provides detailed information about the version of running. R.version is a variable (a list) holding this information (and version is a copy of it for S compatibility). ",
         "package" : "base",
         "title" : "Version Information",
         "name" : "R.Version"
      },
      {
         "title" : "Warning Messages",
         "package" : "base",
         "desc" : " Generates a warning message that corresponds to its argument(s) and (optionally) the expression or function from which it was called. ",
         "name" : "warning"
      },
      {
         "title" : "Print Warning Messages",
         "package" : "base",
         "desc" : " warnings and its print method print the variable last.warning in a pleasing form. ",
         "name" : "warnings"
      },
      {
         "name" : "weekdays",
         "title" : "Extract Parts of a POSIXt or Date Object",
         "package" : "base",
         "desc" : " Extract the weekday, month or quarter, or the Julian time (days since some origin). These are generic functions: the methods for the internal date-time classes are documented here. "
      },
      {
         "name" : "which.min",
         "desc" : " Determines the location, i.e., index of the (first) minimum or maximum of a numeric (or logical) vector. For a logical vector x, which.min(x) and which.max(x) return the index of the first FALSE or TRUE, respectively. ",
         "package" : "base",
         "title" : "Where is the Min() or Max() or first TRUE or FALSE ?"
      },
      {
         "name" : "which",
         "package" : "base",
         "desc" : " Give the TRUE indices of a logical object, allowing for array indices. ",
         "title" : "Which indices are TRUE?"
      },
      {
         "name" : "with",
         "desc" : " Evaluate an expression in an environment constructed from data, possibly modifying (a copy of) the original data. ",
         "package" : "base",
         "title" : "Evaluate an Expression in a Data Environment"
      },
      {
         "package" : "base",
         "desc" : " This function evaluates an expression, returning it in a two element list containing its value and a flag showing whether it would automatically print. ",
         "title" : "Return both a value and its visibility",
         "name" : "withVisible"
      },
      {
         "name" : "write",
         "package" : "base",
         "desc" : " The data (usually a matrix) x are written to file file. If x is a two-dimensional matrix you need to transpose it to get the columns in file the same as those in the internal representation. ",
         "title" : "Write Data to a File"
      },
      {
         "name" : "writeLines",
         "package" : "base",
         "desc" : " Write text lines to a connection. ",
         "title" : "Write Lines to a Connection"
      },
      {
         "name" : "xtfrm",
         "title" : "Auxiliary Function for Sorting and Ranking",
         "package" : "base",
         "desc" : " A generic auxiliary function that produces a numeric vector which will sort in the same order as x. "
      },
      {
         "package" : "base",
         "desc" : " zapsmall determines a digits argument dr for calling round(x, digits = dr) such that values close to zero (compared with the maximal absolute value) are zapped, i.e., treated as 0. ",
         "title" : "Rounding of Numbers",
         "name" : "zapsmall"
      },
      {
         "name" : ".Machine",
         "title" : "Numerical Characteristics of the Machine",
         "desc" : " .Machine is a variable holding information on the numerical characteristics of the machine is running on, such as the largest double or integer and the machine's precision. ",
         "package" : "base"
      },
      {
         "desc" : " .packages returns information about package availability. ",
         "package" : "base",
         "title" : "Listing of Packages",
         "name" : "zpackages"
      },
      {
         "desc" : " Internal interface to run a script through its interpreter. ",
         "package" : "base",
         "title" : "Scripting Language Interface",
         "name" : ".Script"
      },
      {
         "title" : "Miscellaneous Internal/Programming Utilities",
         "desc" : "Miscellaneous internal/programming utilities.",
         "package" : "base",
         "name" : "zutils"
      },
      {
         "name" : "Signals",
         "title" : "Interrupting Execution of R",
         "desc" : " On receiving SIGUSR1 will save the workspace and quit. SIGUSR2 has the same result except that the .Last function and on.exit expressions will not be called. ",
         "package" : "man"
      },
      {
         "desc" : " Opens the specified file or URL using the application specified in the Windows file associations. ",
         "package" : "man",
         "title" : "Open a File or URL using Windows File Associations",
         "name" : "shell.exec"
      },
      {
         "title" : "Invoke a System Command, using a Shell",
         "desc" : " shell runs the command specified by cmd, usually under a shell, because that is what the POSIX standards require. ",
         "package" : "man",
         "name" : "shell"
      },
      {
         "title" : "Byte Code Compiler",
         "desc" : " These functions provide an interface to a byte code compiler for R. ",
         "package" : "compiler",
         "name" : "compile"
      },
      {
         "title" : "Ability and Intelligence Tests",
         "desc" : " Six tests were given to 112 individuals. The covariance matrix is given in this object. ",
         "package" : "datasets",
         "name" : "ability.cov"
      },
      {
         "desc" : " The revenue passenger miles flown by commercial airlines in the United States for each year from 1937 to 1960. ",
         "package" : "datasets",
         "title" : "Passenger Miles on Commercial US Airlines, 1937--1960",
         "name" : "airmiles"
      },
      {
         "title" : "Monthly Airline Passenger Numbers 1949-1960",
         "desc" : " The classic Box & Jenkins airline data. Monthly totals of international airline passengers, 1949 to 1960. ",
         "package" : "datasets",
         "name" : "AirPassengers"
      },
      {
         "desc" : " Daily air quality measurements in New York, May to September 1973. ",
         "package" : "datasets",
         "title" : "New York Air Quality Measurements",
         "name" : "airquality"
      },
      {
         "name" : "anscombe",
         "title" : "Anscombe's Quartet of Identical Simple Linear Regressions",
         "package" : "datasets",
         "desc" : " Four x-y datasets which have the same traditional statistical properties (mean, variance, correlation, regression line, etc.), yet are quite different. "
      },
      {
         "name" : "attenu",
         "title" : "The Joyner--Boore Attenuation Data",
         "desc" : " This data gives peak accelerations measured at various observation stations for 23 earthquakes in California. The data have been used by various workers to estimate the attenuating affect of distance on ground acceleration. ",
         "package" : "datasets"
      },
      {
         "name" : "attitude",
         "package" : "datasets",
         "desc" : " From a survey of the clerical employees of a large financial organization, the data are aggregated from the questionnaires of the approximately 35 employees for each of 30 (randomly selected) departments. The numbers give the percent proportion of favourable responses to seven questions in each department.",
         "title" : "The Chatterjee--Price Attitude Data"
      },
      {
         "package" : "datasets",
         "desc" : " Numbers (in thousands) of Australian residents measured quarterly from March 1971 to March 1994. The object is of class \"ts\". ",
         "title" : " Quarterly Time Series of the Number of Australian Residents ",
         "name" : "austres"
      },
      {
         "name" : "beavers",
         "package" : "datasets",
         "desc" : " Reynolds (1994) describes a small part of a study of the long-term temperature dynamics of beaver Castor canadensis in north-central Wisconsin. Body temperature was measured by telemetry every 10 minutes for four females, but data from a one period of less than a day for each of two animals is used there. ",
         "title" : "Body Temperature Series of Two Beavers"
      },
      {
         "name" : "BJsales",
         "title" : "Sales Data with Leading Indicator",
         "package" : "datasets",
         "desc" : " The sales time series BJsales and leading indicator BJsales.lead each contain 150 observations. The objects are of class \"ts\". "
      },
      {
         "title" : " Biochemical Oxygen Demand ",
         "desc" : " The BOD data frame has 6 rows and 2 columns giving the biochemical oxygen demand versus time in an evaluation of water quality. ",
         "package" : "datasets",
         "name" : "BOD"
      },
      {
         "name" : "cars",
         "title" : "Speed and Stopping Distances of Cars",
         "desc" : " The data give the speed of cars and the distances taken to stop. Note that the data were recorded in the 1920s. ",
         "package" : "datasets"
      },
      {
         "name" : "ChickWeight",
         "package" : "datasets",
         "desc" : " The ChickWeight data frame has 578 rows and 4 columns from an experiment on the effect of diet on early growth of chicks. ",
         "title" : "Weight versus age of chicks on different diets"
      },
      {
         "desc" : " An experiment was conducted to measure and compare the effectiveness of various feed supplements on the growth rate of chickens. ",
         "package" : "datasets",
         "title" : "Chicken Weights by Feed Type",
         "name" : "chickwts"
      },
      {
         "name" : "co2",
         "desc" : " Atmospheric concentrations of CO_22 are expressed in parts per million (ppm) and reported in the preliminary 1997 SIO manometric mole fraction scale. ",
         "package" : "datasets",
         "title" : "Mauna Loa Atmospheric CO2 Concentration"
      },
      {
         "package" : "datasets",
         "desc" : " Data of 3000 male criminals over 20 years old undergoing their sentences in the chief prisons of England and Wales. ",
         "title" : "Student's 3000 Criminals Data",
         "name" : "crimtab"
      },
      {
         "name" : "datasets-package",
         "title" : " The R Datasets Package ",
         "package" : "datasets",
         "desc" : " Base R datasets "
      },
      {
         "title" : "Yearly Numbers of Important Discoveries",
         "desc" : " The numbers of great inventions and scientific discoveries in each year from 1860 to 1959. ",
         "package" : "datasets",
         "name" : "discoveries"
      },
      {
         "name" : "DNase",
         "title" : "Elisa assay of DNase",
         "package" : "datasets",
         "desc" : " The DNase data frame has 176 rows and 3 columns of data obtained during development of an ELISA assay for the recombinant protein DNase in rat serum. "
      },
      {
         "package" : "datasets",
         "desc" : " Data from a case-control study of (o)esophageal cancer in Ille-et-Vilaine, France. ",
         "title" : "Smoking, Alcohol and (O)esophageal Cancer",
         "name" : "esoph"
      },
      {
         "package" : "datasets",
         "desc" : "Conversion rates between the various Euro currencies.",
         "title" : "Conversion Rates of Euro Currencies",
         "name" : "euro"
      },
      {
         "name" : "eurodist",
         "desc" : " The eurodist gives the road distances (in km) between 21 cities in Europe. The data are taken from a table in The Cambridge Encyclopaedia. UScitiesD gives straight line distances between 10 cities in the US. ",
         "package" : "datasets",
         "title" : "Distances Between European Cities and Between US Cities"
      },
      {
         "name" : "EuStockMarkets",
         "package" : "datasets",
         "desc" : " Contains the daily closing prices of major European stock indices: Germany DAX (Ibis), Switzerland SMI, France CAC, and UK FTSE. The data are sampled in business time, i.e., weekends and holidays are omitted. ",
         "title" : " Daily Closing Prices of Major European Stock Indices, 1991--1998 "
      },
      {
         "package" : "datasets",
         "desc" : " Waiting time between eruptions and the duration of the eruption for the Old Faithful geyser in Yellowstone National Park, Wyoming, USA. ",
         "title" : "Old Faithful Geyser Data",
         "name" : "faithful"
      },
      {
         "desc" : " These data are from a chemical experiment to prepare a standard curve for the determination of formaldehyde by the addition of chromatropic acid and concentrated sulphuric acid and the reading of the resulting purple color on a spectrophotometer. ",
         "package" : "datasets",
         "title" : "Determination of Formaldehyde",
         "name" : "Formaldehyde"
      },
      {
         "title" : "Freeny's Revenue Data",
         "package" : "datasets",
         "desc" : " Freeny's data on quarterly revenue and explanatory variables. ",
         "name" : "freeny"
      },
      {
         "desc" : " Distribution of hair and eye color and sex in 592 statistics students. ",
         "package" : "datasets",
         "title" : "Hair and Eye Color of Statistics Students",
         "name" : "HairEyeColor"
      },
      {
         "name" : "Harman23.cor",
         "desc" : " A correlation matrix of eight physical measurements on 305 girls between ages seven and seventeen. ",
         "package" : "datasets",
         "title" : "Harman Example 2.3"
      },
      {
         "package" : "datasets",
         "desc" : " A correlation matrix of 24 psychological tests given to 145 seventh and eight-grade children in a Chicago suburb by Holzinger and Swineford. ",
         "title" : "Harman Example 7.4",
         "name" : "Harman74.cor"
      },
      {
         "name" : "Indometh",
         "title" : "Pharmacokinetics of Indomethacin",
         "desc" : " The Indometh data frame has 66 rows and 3 columns of data on the pharmacokinetics of indometacin (or, older spelling, indomethacin). ",
         "package" : "datasets"
      },
      {
         "package" : "datasets",
         "desc" : " This is a matched case-control study dating from before the availability of conditional logistic regression. ",
         "title" : "Infertility after Spontaneous and Induced Abortion",
         "name" : "infert"
      },
      {
         "package" : "datasets",
         "desc" : " The counts of insects in agricultural experimental units treated with different insecticides. ",
         "title" : "Effectiveness of Insect Sprays",
         "name" : "InsectSprays"
      },
      {
         "name" : "iris",
         "package" : "datasets",
         "desc" : " This famous (Fisher's or Anderson's) iris data set gives the measurements in centimeters of the variables sepal length and width and petal length and width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica. ",
         "title" : "Edgar Anderson's Iris Data"
      },
      {
         "name" : "islands",
         "title" : "Areas of the World's Major Landmasses",
         "package" : "datasets",
         "desc" : " The areas in thousands of square miles of the landmasses which exceed 10,000 square miles. "
      },
      {
         "desc" : " Quarterly earnings (dollars) per Johnson & Johnson share 1960--80. ",
         "package" : "datasets",
         "title" : "Quarterly Earnings per Johnson & Johnson Share",
         "name" : "JohnsonJohnson"
      },
      {
         "desc" : " Annual measurements of the level, in feet, of Lake Huron 1875--1972. ",
         "package" : "datasets",
         "title" : "Level of Lake Huron 1875--1972",
         "name" : "LakeHuron"
      },
      {
         "name" : "lh",
         "package" : "datasets",
         "desc" : " A regular time series giving the luteinizing hormone in blood samples at 10 mins intervals from a human female, 48 samples. ",
         "title" : " Luteinizing Hormone in Blood Samples "
      },
      {
         "name" : "LifeCycleSavings",
         "package" : "datasets",
         "desc" : " Data on the savings ratio 1960--1970. ",
         "title" : "Intercountry Life-Cycle Savings Data"
      },
      {
         "name" : "Loblolly",
         "desc" : " The Loblolly data frame has 84 rows and 3 columns of records of the growth of Loblolly pine trees. ",
         "package" : "datasets",
         "title" : "Growth of Loblolly pine trees"
      },
      {
         "name" : "longley",
         "title" : "Longley's Economic Regression Data",
         "desc" : " A macroeconomic data set which provides a well-known example for a highly collinear regression. ",
         "package" : "datasets"
      },
      {
         "title" : "Annual Canadian Lynx trappings 1821--1934",
         "desc" : " Annual numbers of lynx trappings for 1821--1934 in Canada. Taken from Brockwell & Davis (1991), this appears to be the series considered by Campbell & Walker (1977). ",
         "package" : "datasets",
         "name" : "lynx"
      },
      {
         "desc" : " A classical data of Michelson (but not this one with Morley) on measurements done in 1879 on the speed of light. The data consists of five experiments, each consisting of 20 consecutive runs. The response is the speed of light measurement, suitably coded (km/sec, with 299000 subtracted). ",
         "package" : "datasets",
         "title" : "Michelson Speed of Light Data",
         "name" : "morley"
      },
      {
         "name" : "mtcars",
         "title" : "Motor Trend Car Road Tests",
         "desc" : " The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973--74 models). ",
         "package" : "datasets"
      },
      {
         "name" : "nhtemp",
         "title" : "Average Yearly Temperatures in New Haven",
         "package" : "datasets",
         "desc" : " The mean annual temperature in degrees Fahrenheit in New Haven, Connecticut, from 1912 to 1971. "
      },
      {
         "name" : "Nile",
         "desc" : " Measurements of the annual flow of the river Nile at Ashwan 1871--1970. ",
         "package" : "datasets",
         "title" : "Flow of the River Nile"
      },
      {
         "name" : "nottem",
         "package" : "datasets",
         "desc" : " A time series object containing average air temperatures at Nottingham Castle in degrees Fahrenheit for 20 years. ",
         "title" : " Average Monthly Temperatures at Nottingham, 1920--1939 "
      },
      {
         "name" : "npk",
         "package" : "datasets",
         "desc" : " A classical N, P, K (nitrogen, phosphate, potassium) factorial experiment on the growth of peas conducted on 6 blocks. Each half of a fractional factorial design confounding the NPK interaction was used on 3 of the plots. ",
         "title" : " Classical N, P, K Factorial Experiment "
      },
      {
         "title" : "Occupational Status of Fathers and their Sons",
         "package" : "datasets",
         "desc" : " Cross-classification of a sample of British males according to each subject's occupational status and his father's occupational status. ",
         "name" : "occupationalStatus"
      },
      {
         "title" : "Growth of Orange Trees",
         "package" : "datasets",
         "desc" : " The Orange data frame has 35 rows and 3 columns of records of the growth of orange trees. ",
         "name" : "Orange"
      },
      {
         "name" : "OrchardSprays",
         "package" : "datasets",
         "desc" : " An experiment was conducted to assess the potency of various constituents of orchard sprays in repelling honeybees, using a Latin square design. ",
         "title" : "Potency of Orchard Sprays"
      },
      {
         "package" : "datasets",
         "desc" : " Results from an experiment to compare yields (as measured by dried weight of plants) obtained under a control and two different treatment conditions. ",
         "title" : "Results from an Experiment on Plant Growth",
         "name" : "PlantGrowth"
      },
      {
         "name" : "precip",
         "title" : "Annual Precipitation in US Cities",
         "desc" : " The average amount of precipitation (rainfall) in inches for each of 70 United States (and Puerto Rico) cities. ",
         "package" : "datasets"
      },
      {
         "name" : "presidents",
         "title" : "Quarterly Approval Ratings of US Presidents",
         "package" : "datasets",
         "desc" : " The (approximately) quarterly approval rating for the President of the United States from the first quarter of 1945 to the last quarter of 1974. "
      },
      {
         "name" : "pressure",
         "title" : "Vapor Pressure of Mercury as a Function of Temperature",
         "package" : "datasets",
         "desc" : " Data on the relation between temperature in degrees Celsius and vapor pressure of mercury in millimeters (of mercury). "
      },
      {
         "name" : "Puromycin",
         "desc" : " The Puromycin data frame has 23 rows and 3 columns of the reaction velocity versus substrate concentration in an enzymatic reaction involving untreated cells or cells treated with Puromycin. ",
         "package" : "datasets",
         "title" : "Reaction Velocity of an Enzymatic Reaction"
      },
      {
         "name" : "quakes",
         "desc" : " The data set give the locations of 1000 seismic events of MB > 4.0. The events occurred in a cube near Fiji since 1964. ",
         "package" : "datasets",
         "title" : "Locations of Earthquakes off Fiji"
      },
      {
         "name" : "randu",
         "desc" : " 400 triples of successive random numbers were taken from the VAX FORTRAN function RANDU running under VMS 1.5. ",
         "package" : "datasets",
         "title" : "Random Numbers from Congruential Generator RANDU"
      },
      {
         "name" : "rivers",
         "title" : "Lengths of Major North American Rivers",
         "package" : "datasets",
         "desc" : " This data set gives the lengths (in miles) of 141 major rivers in North America, as compiled by the US Geological Survey. "
      },
      {
         "name" : "rock",
         "title" : "Measurements on Petroleum Rock Samples",
         "desc" : " Measurements on 48 rock samples from a petroleum reservoir.",
         "package" : "datasets"
      },
      {
         "title" : "Student's Sleep Data",
         "desc" : " Data which show the effect of two soporific drugs (increase in hours of sleep compared to control) on 10 patients. ",
         "package" : "datasets",
         "name" : "sleep"
      },
      {
         "package" : "datasets",
         "desc" : " Operational data of a plant for the oxidation of ammonia to nitric acid. ",
         "title" : "Brownlee's Stack Loss Plant Data",
         "name" : "stackloss"
      },
      {
         "name" : "state",
         "desc" : "Data sets related to the 50 states of the United States of America.",
         "package" : "datasets",
         "title" : "US State Facts and Figures"
      },
      {
         "name" : "sunspot.month",
         "title" : "Monthly Sunspot Data, from 1749 to \"Present\"",
         "desc" : " Monthly numbers of sunspots, as from the World Data Center, aka SIDC. This is the version of the data that will occasionally be updated when new counts become available.%% ~/R/MM/MISC/read-sunspots.R ",
         "package" : "datasets"
      },
      {
         "title" : "Yearly Sunspot Data, 1700--1988",
         "package" : "datasets",
         "desc" : " Yearly numbers of sunspots from 1700 to 1988 (rounded to one digit). Note that monthly numbers are available as sunspot.month, though starting slightly later. ",
         "name" : "sunspot.year"
      },
      {
         "package" : "datasets",
         "desc" : " Monthly mean relative sunspot numbers from 1749 to 1983. Collected at Swiss Federal Observatory, Zurich until 1960, then Tokyo Astronomical Observatory. ",
         "title" : "Monthly Sunspot Numbers, 1749--1983",
         "name" : "sunspots"
      },
      {
         "desc" : " Standardized fertility measure and socio-economic indicators for each of 47 French-speaking provinces of Switzerland at about 1888. ",
         "package" : "datasets",
         "title" : "Swiss Fertility and Socioeconomic Indicators (1888) Data",
         "name" : "swiss"
      },
      {
         "title" : "Pharmacokinetics of Theophylline",
         "desc" : " The Theoph data frame has 132 rows and 5 columns of data from an experiment on the pharmacokinetics of theophylline.",
         "package" : "datasets",
         "name" : "Theoph"
      },
      {
         "package" : "datasets",
         "desc" : " This data set provides information on the fate of passengers on the fatal maiden voyage of the ocean liner Titanic, summarized according to economic status (class), sex, age and survival. ",
         "title" : "Survival of passengers on the Titanic",
         "name" : "Titanic"
      },
      {
         "title" : "The Effect of Vitamin C on Tooth Growth in Guinea Pigs",
         "package" : "datasets",
         "desc" : " The response is the length of odontoblasts (teeth) in each of 10 guinea pigs at each of three dose levels of Vitamin C (0.5, 1, and 2 mg) with each of two delivery methods (orange juice or ascorbic acid). ",
         "name" : "ToothGrowth"
      },
      {
         "name" : "treering",
         "title" : " Yearly Treering Data, -6000--1979 ",
         "package" : "datasets",
         "desc" : " Contains normalized tree-ring widths in dimensionless units. "
      },
      {
         "name" : "trees",
         "package" : "datasets",
         "desc" : " This data set provides measurements of the girth, height and volume of timber in 31 felled black cherry trees. Note that girth is the diameter of the tree (in inches) measured at 4 ft 6 in above the ground. ",
         "title" : "Girth, Height and Volume for Black Cherry Trees"
      },
      {
         "package" : "datasets",
         "desc" : " Aggregate data on applicants to graduate school at Berkeley for the six largest departments in 1973 classified by admission and sex. ",
         "title" : "Student Admissions at UC Berkeley",
         "name" : "UCBAdmissions"
      },
      {
         "title" : " Road Casualties in Great Britain 1969--84 ",
         "desc" : " UKDriverDeaths is a time series giving the monthly totals of car drivers in Great Britain killed or seriously injured Jan 1969 to Dec 1984. Compulsory wearing of seat belts was introduced on 31 Jan 1983. Seatbelts is more information on the same problem. ",
         "package" : "datasets",
         "name" : "UKDriverDeaths"
      },
      {
         "name" : "UKgas",
         "package" : "datasets",
         "desc" : " Quarterly UK gas consumption from 1960Q1 to 1986Q4, in millions of therms. ",
         "title" : "UK Quarterly Gas Consumption"
      },
      {
         "name" : "UKLungDeaths",
         "desc" : " Three time series giving the monthly deaths from bronchitis, emphysema and asthma in the UK, 1974--1979, both sexes (ldeaths), males (mdeaths) and females (fdeaths). ",
         "package" : "datasets",
         "title" : " Monthly Deaths from Lung Diseases in the UK "
      },
      {
         "name" : "USAccDeaths",
         "title" : " Accidental Deaths in the US 1973--1978 ",
         "desc" : " A time series giving the monthly totals of accidental deaths in the USA. The values for the first six months of 1979 are 7798 7406 8363 8460 9217 9316. ",
         "package" : "datasets"
      },
      {
         "name" : "USArrests",
         "desc" : " This data set contains statistics, in arrests per 100,000 residents for assault, murder, and rape in each of the 50 US states in 1973. Also given is the percent of the population living in urban areas. ",
         "package" : "datasets",
         "title" : "Violent Crime Rates by US State"
      },
      {
         "name" : "USJudgeRatings",
         "package" : "datasets",
         "desc" : " Lawyers' ratings of state judges in the US Superior Court. ",
         "title" : "Lawyers' Ratings of State Judges in the US Superior Court"
      },
      {
         "name" : "USPersonalExpenditure",
         "title" : "Personal Expenditure Data",
         "package" : "datasets",
         "desc" : " This data set consists of United States personal expenditures (in billions of dollars) in the categories; food and tobacco, household operation, medical and health, personal care, and private education for the years 1940, 1945, 1950, 1955 and 1960. "
      },
      {
         "title" : "Populations Recorded by the US Census",
         "desc" : " This data set gives the population of the United States (in millions) as recorded by the decennial census for the period 1790--1970. ",
         "package" : "datasets",
         "name" : "uspop"
      },
      {
         "name" : "VADeaths",
         "package" : "datasets",
         "desc" : " Death rates per 1000 in Virginia in 1940. ",
         "title" : "Death Rates in Virginia (1940)"
      },
      {
         "name" : "volcano",
         "title" : "Topographic Information on Auckland's Maunga Whau Volcano",
         "package" : "datasets",
         "desc" : " Maunga Whau (Mt Eden) is one of about 50 volcanos in the Auckland volcanic field. This data set gives topographic information for Maunga Whau on a 10m by 10m grid. "
      },
      {
         "desc" : " This data set gives the number of warp breaks per loom, where a loom corresponds to a fixed length of yarn. ",
         "package" : "datasets",
         "title" : "The Number of Breaks in Yarn during Weaving",
         "name" : "warpbreaks"
      },
      {
         "name" : "women",
         "title" : "Average Heights and Weights for American Women",
         "package" : "datasets",
         "desc" : " This data set gives the average heights and weights for American women aged 30--39. "
      },
      {
         "name" : "WorldPhones",
         "title" : "The World's Telephones",
         "desc" : " The number of telephones in various regions of the world (in thousands). ",
         "package" : "datasets"
      },
      {
         "name" : "WWWusage",
         "desc" : " A time series of the numbers of users connected to the Internet through a server every minute. ",
         "package" : "datasets",
         "title" : "Internet Usage per Minute"
      },
      {
         "name" : "CO2",
         "title" : "Carbon Dioxide Uptake in Grass Plants",
         "desc" : " The CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance of the grass species Echinochloa crus-galli. ",
         "package" : "datasets"
      },
      {
         "name" : "abline",
         "title" : "Add Straight Lines to a Plot",
         "package" : "graphics",
         "desc" : " This function adds one or more straight lines through the current plot. "
      },
      {
         "name" : "arrows",
         "desc" : " Draw arrows between pairs of points. ",
         "package" : "graphics",
         "title" : "Add Arrows to a Plot"
      },
      {
         "desc" : " Produce a Cohen-Friendly association plot indicating deviations from independence of rows and columns in a 2-dimensional contingency table. ",
         "package" : "graphics",
         "title" : "Association Plots",
         "name" : "assocplot"
      },
      {
         "desc" : " Functions to plot objects of classes \"POSIXlt\", \"POSIXct\" and \"Date\" representing calendar dates and times. ",
         "package" : "graphics",
         "title" : "Date and Date-time Plotting Functions",
         "name" : "axis.POSIXct"
      },
      {
         "desc" : "Adds an axis to the current plot, allowing the specification of the side, position, labels, and other options. ",
         "package" : "graphics",
         "title" : "Add an Axis to a Plot",
         "name" : "axis"
      },
      {
         "title" : "Compute Axis Tickmark Locations",
         "desc" : " Compute pretty tickmark locations, the same way as does internally. This is only non-trivial when log coordinates are active. By default, gives the at values which axis(side) would use. ",
         "package" : "graphics",
         "name" : "axTicks"
      },
      {
         "title" : "Bar Plots",
         "desc" : " Creates a bar plot with vertical or horizontal bars. ",
         "package" : "graphics",
         "name" : "barplot"
      },
      {
         "title" : "Draw a Box around a Plot",
         "package" : "graphics",
         "desc" : " This function draws a box around the current plot in the given color and linetype. The bty parameter determines the type of box drawn. See par for details. ",
         "name" : "box"
      },
      {
         "name" : "boxplot.matrix",
         "desc" : " Interpreting the columns (or rows) of a matrix as different groups, draw a boxplot for each. ",
         "package" : "graphics",
         "title" : "Draw a Boxplot for each Column (Row) of a Matrix"
      },
      {
         "desc" : " Produce box-and-whisker plot(s) of the given (grouped) values. ",
         "package" : "graphics",
         "title" : "Box Plots",
         "name" : "boxplot"
      },
      {
         "title" : "Draw Box Plots from Summaries",
         "desc" : " bxp draws box plots based on the given summaries in z. It is usually called from within boxplot, but can be invoked directly. ",
         "package" : "graphics",
         "name" : "bxp"
      },
      {
         "name" : "cdplot",
         "package" : "graphics",
         "desc" : " Computes and plots conditional densities describing how the conditional distribution of a categorical variable y changes over a numerical variable x. ",
         "title" : "Conditional Density Plots"
      },
      {
         "name" : "clip",
         "package" : "graphics",
         "desc" : " Set clipping region in user coordinates ",
         "title" : "Set Clipping Region"
      },
      {
         "name" : "contour",
         "title" : "Display Contours",
         "desc" : " Create a contour plot, or add contour lines to an existing plot. ",
         "package" : "graphics"
      },
      {
         "title" : "Convert between Graphics Coordinate Systems",
         "package" : "graphics",
         "desc" : " Convert between graphics coordinate systems. ",
         "name" : "convertXY"
      },
      {
         "name" : "coplot",
         "title" : "Conditioning Plots",
         "desc" : " This function produces two variants of the conditioning plots discussed in the reference below. ",
         "package" : "graphics"
      },
      {
         "name" : "curve",
         "desc" : " Draws a curve corresponding to a function over the interval [from, to]. curve can plot also an expression in the variable xname, default x. ",
         "package" : "graphics",
         "title" : "Draw Function Plots"
      },
      {
         "name" : "dotchart",
         "title" : "Cleveland's Dot Plots",
         "package" : "graphics",
         "desc" : " Draw a Cleveland dot plot. "
      },
      {
         "name" : "filled.contour",
         "title" : "Level (Contour) Plots",
         "package" : "graphics",
         "desc" : " This function produces a contour plot with the areas between the contours filled in solid color (Cleveland calls this a level plot). A key showing how the colors map to z values is shown to the right of the plot. "
      },
      {
         "title" : "Fourfold Plots",
         "desc" : " Creates a fourfold display of a 2 by 2 by k contingency table on the current graphics device, allowing for the visual inspection of the association between two dichotomous variables in one or several populations (strata). ",
         "package" : "graphics",
         "name" : "fourfoldplot"
      },
      {
         "name" : "frame",
         "desc" : " This function (frame is an alias for plot.new) causes the completion of plotting in the current plot (if there is one) and an advance to a new graphics frame. This is used in all high-level plotting functions and also useful for skipping plots when a multi-figure region is in use. ",
         "package" : "graphics",
         "title" : "Create / Start a New Plot Frame"
      },
      {
         "name" : "graphics-defunct",
         "package" : "graphics",
         "desc" : " The functions or variables listed here are no longer part of as they are not needed (any more). ",
         "title" : "Defunct Functions in Package graphics"
      },
      {
         "name" : "graphics-package",
         "package" : "graphics",
         "desc" : " R functions for base graphics ",
         "title" : " The R Graphics Package "
      },
      {
         "name" : "grid",
         "title" : "Add Grid to a Plot",
         "package" : "graphics",
         "desc" : " grid adds an nx by ny rectangular grid to an existing plot. "
      },
      {
         "desc" : " Method for hist applied to date or date-time objects. ",
         "package" : "graphics",
         "title" : "Histogram of a Date or Date-Time Object",
         "name" : "hist.POSIXt"
      },
      {
         "name" : "hist",
         "desc" : " The generic function hist computes a histogram of the given data values. If plot = TRUE, the resulting object of class \"histogram\" is plotted by plot.histogram, before it is returned. ",
         "package" : "graphics",
         "title" : "Histograms"
      },
      {
         "package" : "graphics",
         "desc" : " identify reads the position of the graphics pointer when the (first) mouse button is pressed. It then searches the coordinates given in x and y for the point closest to the pointer. If this point is close enough to the pointer, its index will be returned as part of the value of the call. ",
         "title" : "Identify Points in a Scatter Plot",
         "name" : "identify"
      },
      {
         "name" : "image",
         "desc" : " Creates a grid of colored or gray-scale rectangles with colors corresponding to the values in z. This can be used to display three-dimensional or spatial data aka images. This is a generic function. The functions heat.colors, terrain.colors and topo.colors create heat-spectrum (red to white) and topographical color schemes suitable for displaying ordered data, with n giving the number of colors desired. ",
         "package" : "graphics",
         "title" : "Display a Color Image"
      },
      {
         "title" : "Specifying Complex Plot Arrangements",
         "desc" : " layout divides the device up into as many rows and columns as there are in matrix mat, with the column-widths and the row-heights specified in the respective arguments. ",
         "package" : "graphics",
         "name" : "layout"
      },
      {
         "name" : "legend",
         "title" : "Add Legends to Plots",
         "package" : "graphics",
         "desc" : " This function can be used to add legends to plots. Note that a call to the function locator(1) can be used in place of the x and y arguments. "
      },
      {
         "name" : "lines",
         "title" : "Add Connected Line Segments to a Plot",
         "package" : "graphics",
         "desc" : " A generic function taking coordinates given in various ways and joining the corresponding points with line segments. "
      },
      {
         "name" : "locator",
         "desc" : " Reads the position of the graphics cursor when the (first) mouse button is pressed. ",
         "package" : "graphics",
         "title" : "Graphical Input"
      },
      {
         "title" : "Plot Columns of Matrices",
         "desc" : " Plot the columns of one matrix against the columns of another. ",
         "package" : "graphics",
         "name" : "matplot"
      },
      {
         "package" : "graphics",
         "desc" : "Plots a mosaic on the current graphics device.",
         "title" : "Mosaic Plots",
         "name" : "mosaicplot"
      },
      {
         "desc" : " Text is written in one of the four margins of the current figure region or one of the outer margins of the device region. ",
         "package" : "graphics",
         "title" : "Write Text into the Margins of a Plot",
         "name" : "mtext"
      },
      {
         "title" : "Scatterplot Matrices",
         "package" : "graphics",
         "desc" : " A matrix of scatterplots is produced. ",
         "name" : "pairs"
      },
      {
         "name" : "panel.smooth",
         "package" : "graphics",
         "desc" : " An example of a simple useful panel function to be used as argument in e.g., coplot or pairs. ",
         "title" : "Simple Panel Plot"
      },
      {
         "name" : "par",
         "title" : "Set or Query Graphical Parameters",
         "package" : "graphics",
         "desc" : " par can be used to set or query graphical parameters. Parameters can be set by specifying them as arguments to par in tag = value form, or by passing them as a list of tagged values. "
      },
      {
         "name" : "persp",
         "package" : "graphics",
         "desc" : " This function draws perspective plots of a surface over the x--y plane. persp is a generic function. ",
         "title" : "Perspective Plots"
      },
      {
         "title" : "Pie Charts",
         "package" : "graphics",
         "desc" : " Draw a pie chart. ",
         "name" : "pie"
      },
      {
         "title" : "Plot Method for Data Frames",
         "package" : "graphics",
         "desc" : " plot.data.frame, a method for the plot generic. It is designed for a quick look at numeric data frames. ",
         "name" : "plot.data.frame"
      },
      {
         "desc" : " Draw a scatter plot with decorations such as axes and titles in the active graphics window. ",
         "package" : "graphics",
         "title" : "The Default Scatterplot Function",
         "name" : "plot.default"
      },
      {
         "name" : "plot.design",
         "title" : "Plot Univariate Effects of a Design or Model",
         "package" : "graphics",
         "desc" : " Plot univariate effects of one or more factors, typically for a designed experiment as analyzed by aov(). "
      },
      {
         "name" : "plot.factor",
         "title" : "Plotting Factor Variables",
         "desc" : " This functions implements a scatterplot method for factor arguments of the generic plot function. If y is missing barplot is produced. For numeric y a boxplot is used, and for a factor y a spineplot is shown. For any other type of y the next plot method is called, normally plot.default. ",
         "package" : "graphics"
      },
      {
         "name" : "plot.formula",
         "desc" : " Specify a scatterplot or add points, lines, or text via a formula. ",
         "package" : "graphics",
         "title" : "Formula Notation for Scatterplots"
      },
      {
         "title" : "Plotting Raster Images",
         "desc" : " This functions implements a plot method for raster images. ",
         "package" : "graphics",
         "name" : "plot.raster"
      },
      {
         "name" : "plot",
         "title" : "Generic X-Y Plotting",
         "package" : "graphics",
         "desc" : " Generic function for plotting of objects. For more details about the graphical parameter arguments, see par. For simple scatter plots, plot.default will be used. However, there are plot methods for many objects, including functions, data.frames, density objects, etc. Use methods(plot) and the documentation for these. "
      },
      {
         "name" : "plot.table",
         "desc" : " This is a method of the generic plot function for (contingency) table objects. Whereas for two- and more dimensional tables, a mosaicplot is drawn, one-dimensional ones are plotted as bars. ",
         "package" : "graphics",
         "title" : "Plot Methods for table Objects"
      },
      {
         "name" : "plot.window",
         "title" : "Set up World Coordinates for Graphics Window",
         "package" : "graphics",
         "desc" : " This function sets up the world coordinate system for a graphics window. It is called by higher level functions such as plot.default (after plot.new). "
      },
      {
         "name" : "plot.xy",
         "package" : "graphics",
         "desc" : " This is the internal function that does the basic plotting of points and lines. Usually, one should rather use the higher level functions instead and refer to their help pages for explanation of the arguments. ",
         "title" : "Basic Internal Plot Function"
      },
      {
         "name" : "plot.histogram",
         "desc" : " These are methods for objects of class \"histogram\", typically produced by hist. ",
         "package" : "graphics",
         "title" : "Plot Histograms"
      },
      {
         "name" : "points",
         "desc" : " points is a generic function to draw a sequence of points at the specified coordinates. The specified character(s) are plotted, centered at the coordinates. ",
         "package" : "graphics",
         "title" : "Add Points to a Plot"
      },
      {
         "name" : "polygon",
         "title" : "Polygon Drawing",
         "desc" : " polygon draws the polygons whose vertices are given in x and y. ",
         "package" : "graphics"
      },
      {
         "title" : "Path Drawing",
         "desc" : " path draws a path whose vertices are given in x and y. ",
         "package" : "graphics",
         "name" : "polypath"
      },
      {
         "name" : "rasterImage",
         "package" : "graphics",
         "desc" : " rasterImage draws a raster image at the given locations and sizes. ",
         "title" : "Draw One or More Raster Images"
      },
      {
         "package" : "graphics",
         "desc" : " rect draws a rectangle (or sequence of rectangles) with the given coordinates, fill and border colors. ",
         "title" : "Draw One or More Rectangles",
         "name" : "rect"
      },
      {
         "name" : "rug",
         "title" : "Add a Rug to a Plot",
         "package" : "graphics",
         "desc" : " Adds a rug representation (1-d plot) of the data to the plot. "
      },
      {
         "name" : "screen",
         "desc" : " split.screen defines a number of regions within the current device which can, to some extent, be treated as separate graphics devices. It is useful for generating multiple plots on a single device. Screens can themselves be split, allowing for quite complex arrangements of plots. screen is used to select which screen to draw in. erase.screen is used to clear a single screen, which it does by filling with the background colour. close.screen removes the specified screen definition(s). ",
         "package" : "graphics",
         "title" : "Creating and Controlling Multiple Screens on a Single Device"
      },
      {
         "package" : "graphics",
         "desc" : " Draw line segments between pairs of points. ",
         "title" : "Add Line Segments to a Plot",
         "name" : "segments"
      },
      {
         "title" : "Scatterplots with Smoothed Densities Color Representation",
         "desc" : "smoothScatter produces a smoothed color density representation of the scatterplot, obtained through a kernel density estimate. densCols produces a vector containing colors which encode the local densities at each point in a scatterplot. ",
         "package" : "graphics",
         "name" : "smoothScatter"
      },
      {
         "title" : "Spine Plots and Spinograms",
         "desc" : " Spine plots are a special cases of mosaic plots, and can be seen as a generalization of stacked (or highlighted) bar plots. Analogously, spinograms are an extension of histograms. ",
         "package" : "graphics",
         "name" : "spineplot"
      },
      {
         "name" : "stars",
         "title" : "Star (Spider/Radar) Plots and Segment Diagrams",
         "desc" : " Draw star plots or segment diagrams of a multivariate data set. With one single location, also draws spider (or radar) plots. ",
         "package" : "graphics"
      },
      {
         "title" : "Stem-and-Leaf Plots",
         "package" : "graphics",
         "desc" : " stem produces a stem-and-leaf plot of the values in x. The parameter scale can be used to expand the scale of the plot. A value of scale = 2 will cause the plot to be roughly twice as long as the default. ",
         "name" : "stem"
      },
      {
         "desc" : " stripchart produces one dimensional scatter plots (or dot plots) of the given data. These plots are a good alternative to boxplots when sample sizes are small. ",
         "package" : "graphics",
         "title" : "1-D Scatter Plots",
         "name" : "stripchart"
      },
      {
         "name" : "strwidth",
         "desc" : " These functions compute the width or height, respectively, of the given strings or mathematical expressions s[i] on the current plotting device in user coordinates, inches or as fraction of the figure width par(\"fin\"). ",
         "package" : "graphics",
         "title" : "Plotting Dimensions of Character Strings and Math Expressions"
      },
      {
         "desc" : " Multiple points are plotted as sunflowers with multiple leaves (petals) such that overplotting is visualized instead of accidental and invisible. ",
         "package" : "graphics",
         "title" : "Produce a Sunflower Scatter Plot",
         "name" : "sunflowerplot"
      },
      {
         "title" : "Draw Symbols (Circles, Squares, Stars, Thermometers, Boxplots)",
         "desc" : " This function draws symbols on a plot. One of six symbols; circles, squares, rectangles, stars, thermometers, and boxplots, can be plotted at a specified set of x and y coordinates. Specific aspects of the symbols, such as relative size, can be customized by additional parameters. ",
         "package" : "graphics",
         "name" : "symbols"
      },
      {
         "name" : "text",
         "title" : "Add Text to a Plot",
         "package" : "graphics",
         "desc" : " text draws the strings given in the vector labels at the coordinates given by x and y. y may be missing since xy.coords(x, y) is used for construction of the coordinates. "
      },
      {
         "package" : "graphics",
         "desc" : " This function can be used to add labels to a plot. Its first four principal arguments can also be used as arguments in most high-level plotting functions. They must be of type character or expression. In the latter case, quite a bit of mathematical notation is available such as sub- and superscripts, greek letters, fractions, etc: see plotmath ",
         "title" : "Plot Annotation",
         "name" : "title"
      },
      {
         "name" : "units",
         "package" : "graphics",
         "desc" : " xinch and yinch convert the specified number of inches given as their arguments into the correct units for plotting with graphics functions. Usually, this only makes sense when normal coordinates are used, i.e., no log scale (see the log argument to par). xyinch does the same for a pair of numbers xy, simultaneously. ",
         "title" : "Graphical Units"
      },
      {
         "title" : "Draw an X-spline",
         "desc" : " Draw an X-spline, a curve drawn relative to control points. ",
         "package" : "graphics",
         "name" : "xspline"
      },
      {
         "title" : "Generic Function to Add an Axis to a Plot",
         "package" : "graphics",
         "desc" : " Generic function to add a suitable axis to the current plot. ",
         "name" : "Axis"
      },
      {
         "desc" : " Adjust or modify a vector of colors by turning knobs on one or more coordinates in (r,g,b,\\\\alpha) space, typically by up or down scaling them. ",
         "package" : "grDevices",
         "title" : "Adjust Colors in One or More Directions Conveniently.",
         "name" : "adjustcolor"
      },
      {
         "title" : "Coerce an Object for Graphics Annotation",
         "desc" : " Coerce an object into a form suitable for graphics annotation. ",
         "package" : "grDevices",
         "name" : "as.graphicsAnnot"
      },
      {
         "name" : "as.raster",
         "title" : "Create a Raster Object",
         "desc" : " Functions to create a raster object (representing a bitmap image) and coerce other objects to a raster object. ",
         "package" : "grDevices"
      },
      {
         "title" : "Compute Pretty Axis Tick Scales",
         "package" : "grDevices",
         "desc" : " Compute pretty axis scales and tick mark locations, the same way as traditional graphics do it. This is interesting particularly for log scale axes. ",
         "name" : "axisTicks"
      },
      {
         "name" : "boxplot.stats",
         "package" : "grDevices",
         "desc" : " This function is typically called by another function to gather the statistics necessary for producing box plots, but may be invoked separately. ",
         "title" : "Box Plot Statistics"
      },
      {
         "desc" : " Graphics devices for SVG, PDF and PostScript graphics files using the cairo graphics API. ",
         "package" : "grDevices",
         "title" : "Cairographics-based SVG, PDF and PostScript Graphics Devices",
         "name" : "cairo"
      },
      {
         "name" : "check.options",
         "package" : "grDevices",
         "desc" : " Utility function for setting options with some consistency checks. The attributes of the new settings in new are checked for consistency with the model (often default) list in name.opt. ",
         "title" : "Set Options with Consistency Checks"
      },
      {
         "name" : "chull",
         "title" : "Compute Convex Hull of a Set of Points",
         "desc" : " Computes the subset of points which lie on the convex hull of the set of points specified. ",
         "package" : "grDevices"
      },
      {
         "title" : "Unit Transformation",
         "package" : "grDevices",
         "desc" : " Translates from inches to cm (centimeters). ",
         "name" : "cm"
      },
      {
         "desc" : " color to RGB (red/green/blue) conversion. ",
         "package" : "grDevices",
         "title" : "Color to RGB Conversion",
         "name" : "col2rgb"
      },
      {
         "package" : "grDevices",
         "desc" : " These functions return functions that interpolate a set of given colors to create new color palettes (like topo.colors) and color ramps, functions that map the interval [0, 1] to colors (like grey). ",
         "title" : "Color interpolation",
         "name" : "colorRamp"
      },
      {
         "desc" : " Returns the built-in color names which knows about. ",
         "package" : "grDevices",
         "title" : "Color Names",
         "name" : "colors"
      },
      {
         "name" : "contourLines",
         "title" : "Calculate Contour Lines",
         "desc" : " Calculate contour lines for a given set of data. ",
         "package" : "grDevices"
      },
      {
         "title" : "Convert between Colour Spaces",
         "package" : "grDevices",
         "desc" : " Convert colours between their representations in standard colour spaces. ",
         "name" : "convertColor"
      },
      {
         "name" : "densCols",
         "package" : "grDevices",
         "desc" : " densCols produces a vector containing colors which encode the local densities at each point in a scatterplot. ",
         "title" : "Colors for Smooth Density Plots"
      },
      {
         "name" : "dev.capabilities",
         "title" : "Query Capabilities of the Current Graphics Device",
         "desc" : " Query the capabilities of the current graphics device. ",
         "package" : "grDevices"
      },
      {
         "desc" : " dev.capture captures the current contents of a graphics device as a raster (bitmap) image. ",
         "package" : "grDevices",
         "title" : " Capture device output as a raster image ",
         "name" : "dev.capture"
      },
      {
         "name" : "dev.flush",
         "title" : " Hold or Flush Output on an On-Screen Graphics Device. ",
         "desc" : " This gives a way to hold/flush output on certain on-screen devices, and is ignored by other devices. ",
         "package" : "grDevices"
      },
      {
         "title" : "Is the Current Graphics Device Interactive?",
         "package" : "grDevices",
         "desc" : " Test if the current graphics device (or that which would be opened) is interactive. ",
         "name" : "dev.interactive"
      },
      {
         "name" : "dev",
         "title" : "Control Multiple Devices",
         "package" : "grDevices",
         "desc" : " These functions provide control over multiple graphics devices. "
      },
      {
         "title" : " Find Size of Device Surface ",
         "package" : "grDevices",
         "desc" : " Find the dimensions of the device surface of the current device. ",
         "name" : "dev.size"
      },
      {
         "desc" : " dev.copy copies the graphics contents of the current device to the device specified by which or to a new device which has been created by the function specified by device (it is an error to specify both which and device). (If recording is off on the current device, there are no contents to copy: this will result in no plot or an empty plot.) The device copied to becomes the current device. dev.print copies the graphics contents of the current device to a new device which has been created by the function specified by device and then shuts the new device. dev.copy2eps is similar to dev.print but produces an EPSF output file in portrait orientation (horizontal = FALSE). dev.copy2pdf is the analogue for PDF output. dev.control allows the user to control the recording of graphics operations in a device. If displaylist is \"inhibit\" (\"enable\") then recording is turned off (on). It is only safe to change this at the beginning of a plot (just before or just after a new page). Initially recording is on for screen devices, and off for print devices. ",
         "package" : "grDevices",
         "title" : "Copy Graphics Between Multiple Devices",
         "name" : "dev2"
      },
      {
         "name" : "dev2bitmap",
         "package" : "grDevices",
         "desc" : " bitmap generates a graphics file. dev2bitmap copies the current graphics device to a file in a graphics format. ",
         "title" : "Graphics Device for Bitmap Files via Ghostscript"
      },
      {
         "name" : "devAskNewPage",
         "title" : " Prompt before New Page ",
         "desc" : " This function can be used to control (for the current device) whether the user is prompted before starting a new page of output. ",
         "package" : "grDevices"
      },
      {
         "name" : "Devices",
         "title" : "List of Graphical Devices",
         "package" : "grDevices",
         "desc" : "The following graphics devices are currently available: windows windows The graphics device for Windows (on screen, to printer and to Windows metafile). pdf Write PDF graphics commands to a file postscript Writes PostScript graphics commands to a file xfig Device for XFIG graphics file format bitmap bitmap pseudo-device via Ghostscript (if available). pictex Writes TeX/PicTeX graphics commands to a file (of historical interest only) The following devices will be functional if was compiled to use them (they exist but will return with a warning on other systems): unix X11 The graphics device for the X11 windowing system cairo_pdf, cairo_ps PDF and PostScript devices based on cairo graphics. svg SVG device based on cairo graphics. png PNG bitmap device jpeg JPEG bitmap device bmp BMP bitmap device tiff TIFF bitmap device unix quartz The graphics device for the OS X native Quartz 2d graphics system. (This is only functional on OS X where it can be used from the R.app GUI and from the command line: but it will display on the local screen even for a remote session.) "
      },
      {
         "title" : "Embed Fonts in PostScript and PDF",
         "package" : "grDevices",
         "desc" : " Runs Ghostscript to process a PDF or PostScript file and embed all fonts in the file. ",
         "name" : "embedFonts"
      },
      {
         "name" : "extendrange",
         "desc" : " Extends a numerical range by a small percentage, i.e., fraction, on both sides. ",
         "package" : "grDevices",
         "title" : "Extend a Numerical Range by a Small Percentage"
      },
      {
         "desc" : " This function waits for input from a graphics window in the form of a mouse or keyboard event. ",
         "package" : "grDevices",
         "title" : "Wait for a mouse or keyboard event from a graphics window",
         "name" : "getGraphicsEvent"
      },
      {
         "title" : "Gray Color Palette",
         "package" : "grDevices",
         "desc" : " Create a vector of n gamma-corrected gray colors. ",
         "name" : "gray.colors"
      },
      {
         "name" : "gray",
         "title" : "Gray Level Specification",
         "package" : "grDevices",
         "desc" : " Create a vector of colors from a vector of gray levels. "
      },
      {
         "name" : "grDevices-package",
         "title" : " The R Graphics Devices and Support for Colours and Fonts ",
         "package" : "grDevices",
         "desc" : " Graphics devices and support for base and grid graphics "
      },
      {
         "name" : "grSoftVersion",
         "package" : "grDevices",
         "desc" : " Report versions of third-party graphics software. ",
         "title" : "Report Versions of Graphics Software"
      },
      {
         "desc" : " Create a vector of colors from vectors specifying hue, chroma and luminance. ",
         "package" : "grDevices",
         "title" : "HCL Color Specification",
         "name" : "hcl"
      },
      {
         "title" : "Hershey Vector Fonts in R",
         "package" : "grDevices",
         "desc" : " If the family graphical parameter (see par) has been set to one of the Hershey fonts (see Details) Hershey vector fonts are used to render text. When using the text and contour functions Hershey fonts may be selected via the vfont argument, which is a character vector of length 2 (see Details for valid values). This allows Cyrillic to be selected, which is not available via the font families. ",
         "name" : "Hershey"
      },
      {
         "title" : "HSV Color Specification",
         "desc" : " Create a vector of colors from vectors specifying hue, saturation and value. ",
         "package" : "grDevices",
         "name" : "hsv"
      },
      {
         "name" : "Japanese",
         "package" : "grDevices",
         "desc" : " The implementation of Hershey vector fonts provides a large number of Japanese characters (Hiragana, Katakana, and Kanji). ",
         "title" : "Japanese characters in R"
      },
      {
         "name" : "make.rgb",
         "desc" : " These functions specify colour spaces for use in convertColor. ",
         "package" : "grDevices",
         "title" : "Create colour spaces "
      },
      {
         "name" : "n2mfrow",
         "desc" : " Easy setup for plotting multiple figures (in a rectangular layout) on one page. This computes a sensible default for par(mfrow). ",
         "package" : "grDevices",
         "title" : "Compute Default mfrow From Number of Plots"
      },
      {
         "desc" : " Compute the number of classes for a histogram. ",
         "package" : "grDevices",
         "title" : "Compute the Number of Classes for a Histogram",
         "name" : "nclass"
      },
      {
         "package" : "grDevices",
         "desc" : " View or manipulate the color palette which is used when a col= has a numeric index. ",
         "title" : "Set or View the Graphics Palette",
         "name" : "palette"
      },
      {
         "desc" : " Create a vector of n contiguous colors. ",
         "package" : "grDevices",
         "title" : "Color Palettes",
         "name" : "Palettes"
      },
      {
         "title" : "Auxiliary Function to Set/View Defaults for Arguments of pdf",
         "package" : "grDevices",
         "desc" : " The auxiliary function pdf.options can be used to set or view (if called without arguments) the default values for some of the arguments to pdf. pdf.options needs to be called before calling pdf, and the default values it sets can be overridden by supplying arguments to pdf. ",
         "name" : "pdf.options"
      },
      {
         "name" : "pdf",
         "title" : "PDF Graphics Device",
         "package" : "grDevices",
         "desc" : " pdf starts the graphics device driver for producing PDF graphics. "
      },
      {
         "name" : "pictex",
         "title" : "A PicTeX Graphics Driver",
         "package" : "grDevices",
         "desc" : " This function produces simple graphics suitable for inclusion in TeX and LaTeX documents. It dates from the very early days of and is for historical interest only. "
      },
      {
         "title" : "Mathematical Annotation in R",
         "desc" : " If the text argument to one of the text-drawing functions (text, mtext, axis, legend) in is an expression, the argument is interpreted as a mathematical expression and the output will be formatted according to TeX-like rules. Expressions can also be used for titles, subtitles and x- and y-axis labels (but not for axis labels on persp plots). In most cases other language objects (names and calls, including formulas) are coerced to expressions and so can also be used. ",
         "package" : "grDevices",
         "name" : "plotmath"
      },
      {
         "title" : "PostScript Graphics",
         "desc" : " postscript starts the graphics device driver for producing PostScript graphics. ",
         "package" : "grDevices",
         "name" : "postscript"
      },
      {
         "name" : "postscriptFonts",
         "desc" : " These functions handle the translation of a graphics font family name to a PostScript or PDF font description, used by the postscript or pdf graphics devices. ",
         "package" : "grDevices",
         "title" : "PostScript and PDF Font Families"
      },
      {
         "name" : "pretty.Date",
         "title" : "Pretty Breakpoints for Date-Time Classes",
         "desc" : " Compute a sequence of about n+1 equally spaced nice values which cover the range of the values in x. ",
         "package" : "grDevices"
      },
      {
         "title" : "Auxiliary Function to Set/View Defaults for Arguments of postscript",
         "package" : "grDevices",
         "desc" : " The auxiliary function ps.options can be used to set or view (if called without arguments) the default values for some of the arguments to postscript. ps.options needs to be called before calling postscript, and the default values it sets can be overridden by supplying arguments to postscript. ",
         "name" : "ps.options"
      },
      {
         "package" : "grDevices",
         "desc" : " Records arbitrary code on the graphics engine display list. Useful for encapsulating calculations with graphical output that depends on the calculations. Intended only for expert use. ",
         "title" : "Record Graphics Operations",
         "name" : "recordGraphics"
      },
      {
         "name" : "recordPlot",
         "desc" : " Functions to save the current plot in an variable, and to replay it. ",
         "package" : "grDevices",
         "title" : "Record and Replay Plots"
      },
      {
         "name" : "rgb",
         "package" : "grDevices",
         "desc" : " This function creates colors corresponding to the given intensities (between 0 and max) of the red, green and blue primaries. The colour specification refers to the standard sRGB colorspace (IEC standard 61966). An alpha transparency value can also be specified (as an opacity, so 0 means fully transparent and max means opaque). If alpha is not specified, an opaque colour is generated. The names argument may be used to provide names for the colors. The values returned by these functions can be used with a col= specification in graphics functions or in par. ",
         "title" : "RGB Color Specification"
      },
      {
         "name" : "rgb2hsv",
         "package" : "grDevices",
         "desc" : " rgb2hsv transforms colors from RGB space (red/green/blue) into HSV space (hue/saturation/value). ",
         "title" : "RGB to HSV Conversion"
      },
      {
         "package" : "grDevices",
         "desc" : " Projection of 3-dimensional to 2-dimensional points using a 4x4 viewing transformation matrix. Mainly for adding to perspective plots such as persp. ",
         "title" : "3D to 2D Transformation for Perspective Plots",
         "name" : "trans3d"
      },
      {
         "package" : "grDevices",
         "desc" : " These functions are used to define the translation of a graphics font family name to a Type 1 or CID font descriptions, used by both the postscript and pdf graphics devices. ",
         "title" : "Type 1 and CID Fonts",
         "name" : "Type1Font"
      },
      {
         "title" : "XFig Graphics Device",
         "package" : "grDevices",
         "desc" : " xfig starts the graphics device driver for producing XFig (version 3.2) graphics. The auxiliary function ps.options can be used to set and view (if called without arguments) default values for the arguments to xfig and postscript. ",
         "name" : "xfig"
      },
      {
         "desc" : " xy.coords is used by many functions to obtain x and y coordinates for plotting. The use of this common mechanism across all relevant functions produces a measure of consistency. ",
         "package" : "grDevices",
         "title" : "Extracting Plotting Structures",
         "name" : "xy.coords"
      },
      {
         "name" : "xyTable",
         "title" : "Multiplicities of (x,y) Points, e.g., for a Sunflower Plot",
         "package" : "grDevices",
         "desc" : " Given (x,y) points, determine their multiplicity -- checking for equality only up to some (crude kind of) noise. Note that this is special kind of 2D binning. "
      },
      {
         "title" : "Extracting Plotting Structures",
         "desc" : " Utility for obtaining consistent x, y and z coordinates and labels for three dimensional (3D) plots. ",
         "package" : "grDevices",
         "name" : "xyz.coords"
      },
      {
         "desc" : " Graphics devices for BMP, JPEG, PNG and TIFF format bitmap files. ",
         "package" : "man",
         "title" : "BMP, JPEG, PNG and TIFF graphics devices",
         "name" : "png"
      },
      {
         "title" : "OS X Quartz Device",
         "desc" : " quartz starts a graphics device driver for the OS X System. It supports plotting both to the screen (the default) and to various graphics file formats. ",
         "package" : "man",
         "name" : "quartz"
      },
      {
         "title" : "quartz Fonts",
         "desc" : " These functions handle the translation of a device-independent R graphics font family name to a quartz font description. ",
         "package" : "man",
         "name" : "quartzFonts"
      },
      {
         "name" : "savePlot",
         "package" : "man",
         "desc" : " Save the current page of a cairo X11() device to a file. ",
         "title" : "Save Cairo X11 Plot to File"
      },
      {
         "title" : "X Window System Graphics",
         "package" : "man",
         "desc" : " X11 starts a graphics device driver for the X Window System (version 11). This can only be done on machines/accounts that have access to an X server. x11 is recognized as a synonym for X11. The function is a wrapper for two devices, one based on Xlib (http://en.wikipedia.org/wiki/Xlib) and one using cairographics (http://www.cairographics.org). ",
         "name" : "x11"
      },
      {
         "name" : "X11Fonts",
         "title" : "X11 Fonts",
         "package" : "man",
         "desc" : " These functions handle the translation of a device-independent R graphics font family name to an X11 font description. "
      },
      {
         "package" : "man",
         "desc" : " bringToTop brings the specified screen device's window to the front of the window stack (and gives it focus). With first argument -1 it brings the console to the top. If stay = TRUE, the window is designated as a topmost window, i.e.\\\\ifelse{latex}{\\\\out{~}}{ }latex~ it will stay on top of any regular window. stay may only be used when Rgui is run in SDI mode. This corresponds to the Stay on top popup menu item in Rgui. ",
         "title" : "Assign Focus to a Window",
         "name" : "bringToTop"
      },
      {
         "name" : "msgWindow",
         "package" : "man",
         "desc" : " msgWindow sends a message to manipulate the specified screen device's window. With argument which = -1 it applies to the GUI console (which only accepts the first three actions). ",
         "title" : "Manipulate a Window"
      },
      {
         "desc" : " Graphics devices for BMP, JPEG, PNG and TIFF format bitmap files. ",
         "package" : "man",
         "title" : "BMP, JPEG, PNG and TIFF graphics devices",
         "name" : "png"
      },
      {
         "desc" : " Saves the current plot on a windows device to a file. ",
         "package" : "man",
         "title" : "Save Windows Plot to a File",
         "name" : "savePlot"
      },
      {
         "title" : "Auxiliary Function to Set/View Defaults for Arguments of windows()",
         "desc" : " The auxiliary function windows.options can be used to set or view (if called without arguments) the default values for the arguments of windows. windows.options needs to be called before calling windows, and the default values it sets can be overridden by supplying arguments to windows. ",
         "package" : "man",
         "name" : "windows.options"
      },
      {
         "name" : "windows",
         "desc" : " A graphics device is opened. For windows, win.graph, x11 and X11 this is a window on the current Windows display: the multiple names are for compatibility with other systems. win.metafile prints to a file and win.print to the Windows print system. ",
         "package" : "man",
         "title" : "Windows Graphics Devices"
      },
      {
         "package" : "man",
         "desc" : " These functions handle the translation of a device-independent R graphics font family name to a windows font description. ",
         "title" : "Windows Fonts",
         "name" : "windowsFonts"
      },
      {
         "name" : "absolute.size",
         "title" : " Absolute Size of a Grob ",
         "package" : "grid",
         "desc" : " This function converts a unit object into absolute units. Absolute units are unaffected, but non-absolute units are converted into \"null\" units. "
      },
      {
         "desc" : " Produces a description of what arrows to add to a line. The result can be passed to a function that draws a line, e.g., grid.lines. ",
         "package" : "grid",
         "title" : " Describe arrows to add to a line. ",
         "name" : "arrow"
      },
      {
         "title" : " Calculate Metric Information for Text ",
         "desc" : " This function returns the ascent, descent, and width metric information for a character or expression vector. ",
         "package" : "grid",
         "name" : "calcStringMetric"
      },
      {
         "name" : "Querying the Viewport Tree",
         "desc" : " current.viewport() returns the viewport that Grid is going to draw into. current.parent returns the parent of the current viewport. current.vpTree returns the entire Grid viewport tree. current.vpPath returns the viewport path to the current viewport. current.transform returns the transformation matrix for the current viewport. current.rotation returns the (total) rotation for the current viewport. ",
         "package" : "grid",
         "title" : "Get the Current Grid Viewport (Tree)"
      },
      {
         "title" : " Create a Viewport with Scales based on Data ",
         "desc" : " This is a convenience function for producing a viewport with x- and/or y-scales based on numeric values passed to the function. ",
         "package" : "grid",
         "name" : "dataViewport"
      },
      {
         "name" : "depth",
         "title" : " Determine the number of levels in an object. ",
         "desc" : " Determine the number of levels in a viewport stack or tree, in a viewport path, or in a grob path. ",
         "package" : "grid"
      },
      {
         "title" : " Customising grid Drawing ",
         "package" : "grid",
         "desc" : " These generic hook functions are called whenever a grid grob is drawn. They provide an opportunity for customising the drawing of a new class derived from grob (or gTree). ",
         "name" : "drawDetails"
      },
      {
         "desc" : " This generic hook function is called whenever a grid grob is edited via grid.edit or editGrob. This provides an opportunity for customising the editing of a new class derived from grob (or gTree). ",
         "package" : "grid",
         "title" : " Customising grid Editing ",
         "name" : "editDetails"
      },
      {
         "name" : "explode",
         "title" : " Explode a path into its components. ",
         "package" : "grid",
         "desc" : " Explode a viewport path or grob path into its components. "
      },
      {
         "title" : " Create and Apply Edit Objects ",
         "package" : "grid",
         "desc" : " The functions gEdit and gEditList create objects representing an edit operation (essentially a list of arguments to editGrob). The functions applyEdit and applyEdits apply one or more edit operations to a graphical object. These functions are most useful for developers creating new graphical functions and objects. ",
         "name" : "gEdit"
      },
      {
         "desc" : " Returns a character vector containing the names of all top-level grobs on the display list. ",
         "package" : "grid",
         "title" : " List the names of grobs on the display list ",
         "name" : "getNames"
      },
      {
         "package" : "grid",
         "desc" : " gpar() should be used to create a set of graphical parameter settings. It returns an object of class \"gpar\". This is basically a list of name-value pairs. get.gpar() can be used to query the current graphical parameter settings. ",
         "title" : "Handling Grid Graphical Parameters",
         "name" : "gpar"
      },
      {
         "title" : " Concatenate Grob Names ",
         "package" : "grid",
         "desc" : " This function can be used to generate a grob path for use in grid.edit and friends. A grob path is a list of nested grob names. ",
         "name" : "gPath"
      },
      {
         "title" : "Defunct Functions in Package grid",
         "desc" : " The functions or variables listed here are no longer part of grid. ",
         "package" : "grid",
         "name" : "grid-defunct"
      },
      {
         "desc" : " Internal Grid functions ",
         "package" : "grid",
         "title" : "Internal Grid Functions",
         "name" : "grid-internal"
      },
      {
         "package" : "grid",
         "desc" : " A rewrite of the graphics layout capabilities, plus some support for interaction. ",
         "title" : " The Grid Graphics Package ",
         "name" : "grid-package"
      },
      {
         "package" : "grid",
         "desc" : " Add a grob to a gTree or a descendant of a gTree. ",
         "title" : "Add a Grid Graphical Object",
         "name" : "grid.add"
      },
      {
         "name" : "grid.bezier",
         "title" : " Draw a Bezier Curve ",
         "desc" : " These functions create and draw Bezier Curves (a curve drawn relative to 4 control points). ",
         "package" : "grid"
      },
      {
         "name" : "grid.cap",
         "title" : " Capture a raster image ",
         "desc" : " Capture the current contents of a graphics device as a raster (bitmap) image. ",
         "package" : "grid"
      },
      {
         "title" : " Draw a Circle ",
         "package" : "grid",
         "desc" : " Functions to create and draw a circle. ",
         "name" : "grid.circle"
      },
      {
         "name" : "grid.clip",
         "title" : "Set the Clipping Region",
         "package" : "grid",
         "desc" : " These functions set the clipping region within the current viewport without altering the current coordinate system. "
      },
      {
         "title" : " Convert Between Different grid Coordinate Systems ",
         "package" : "grid",
         "desc" : " These functions take a unit object and convert it to an equivalent unit object in a different coordinate system. ",
         "name" : "grid.convert"
      },
      {
         "desc" : " This function is redundant and will disappear in future versions. ",
         "package" : "grid",
         "title" : "Make a Copy of a Grid Graphical Object",
         "name" : "grid.copy"
      },
      {
         "package" : "grid",
         "desc" : " These functions create and draw a curve from one location to another. ",
         "title" : " Draw a Curve Between Locations ",
         "name" : "grid.curve"
      },
      {
         "desc" : " Evaluates an expression that includes both calculations and generating a grob that depends on the calculations so that both the calculations and the grob generation will be rerun when the scene is redrawn (e.g., device resize or editing). Intended only for expert use. ",
         "package" : "grid",
         "title" : " Encapsulate calculations and generating a grob ",
         "name" : "grid.delay"
      },
      {
         "desc" : " Turn the Grid display list on or off. ",
         "package" : "grid",
         "title" : "Control the Grid Display List",
         "name" : "grid.display.list"
      },
      {
         "name" : "grid.DLapply",
         "title" : " Modify the Grid Display List ",
         "desc" : " Call a function on each element of the current display list. ",
         "package" : "grid"
      },
      {
         "name" : "grid.draw",
         "title" : "Draw a grid grob",
         "desc" : " Produces graphical output from a graphical object. ",
         "package" : "grid"
      },
      {
         "title" : "Edit the Description of a Grid Graphical Object",
         "desc" : " Changes the value of one of the slots of a grob and redraws the grob. ",
         "package" : "grid",
         "name" : "grid.edit"
      },
      {
         "package" : "grid",
         "desc" : " Some grobs only generate their content to draw at drawing time; this function replaces such grobs with their at-drawing-time content. ",
         "title" : " Force a grob into its components ",
         "name" : "grid.force"
      },
      {
         "package" : "grid",
         "desc" : " These functions, together with grid.pack, grid.place, packGrob, and placeGrob are part of a GUI-builder-like interface to constructing graphical images. The idea is that you create a frame with this function then use grid.pack or whatever to pack/place objects into the frame. ",
         "title" : " Create a Frame for Packing Objects ",
         "name" : "grid.frame"
      },
      {
         "name" : "grid.function",
         "package" : "grid",
         "desc" : " Draw a curve representing a function. ",
         "title" : "Draw a curve representing a function"
      },
      {
         "name" : "grid.get",
         "package" : "grid",
         "desc" : " Retrieve a grob or a descendant of a grob. ",
         "title" : "Get a Grid Graphical Object"
      },
      {
         "desc" : " Creates a gTree object from the current grid display list or from a scene generated by user-specified code. ",
         "package" : "grid",
         "title" : " Grab the current grid output ",
         "name" : "grid.grab"
      },
      {
         "name" : "grid.grep",
         "title" : " Search for grobs ",
         "desc" : " Given a gPath, find all matching grobs on the display list or within a given grob. ",
         "package" : "grid"
      },
      {
         "name" : "grid.grill",
         "title" : "Draw a Grill",
         "package" : "grid",
         "desc" : " This function draws a grill within a Grid viewport. "
      },
      {
         "package" : "grid",
         "desc" : " Creating grid graphical objects, short (grobs). grob() and gTree() are the basic creators, grobTree() and gList() take several grobs to build a new one. ",
         "title" : "Create Grid Graphical Objects, aka \"Grob\"s",
         "name" : "grid.grob"
      },
      {
         "name" : "grid.layout",
         "package" : "grid",
         "desc" : " This function returns a Grid layout, which describes a subdivision of a rectangular region. ",
         "title" : "Create a Grid Layout"
      },
      {
         "desc" : " These functions create and draw a series of lines. ",
         "package" : "grid",
         "title" : "Draw Lines in a Grid Viewport",
         "name" : "grid.lines"
      },
      {
         "title" : " Capture a Mouse Click ",
         "desc" : " Allows the user to click the mouse once within the current graphics device and returns the location of the mouse click within the current viewport, in the specified coordinate system. ",
         "package" : "grid",
         "name" : "grid.locator"
      },
      {
         "title" : " List the names of grobs or viewports ",
         "package" : "grid",
         "desc" : " Return a listing of the names of grobs or viewports. This is a generic function with methods for grobs (including gTrees) and viewports (including vpTrees). ",
         "name" : "grid.ls"
      },
      {
         "name" : "grid.move.to",
         "title" : " Move or Draw to a Specified Position ",
         "desc" : " Grid has the notion of a current location. These functions sets that location. ",
         "package" : "grid"
      },
      {
         "name" : "grid.newpage",
         "title" : "Move to a New Page on a Grid Device",
         "package" : "grid",
         "desc" : " This function erases the current device or moves to a new page. "
      },
      {
         "name" : "grid.null",
         "title" : " Null Graphical Object ",
         "package" : "grid",
         "desc" : " These functions create a NULL graphical object, which has zero width, zero height, and draw nothing. It can be used as a place-holder or as an invisible reference point for other drawing. "
      },
      {
         "title" : " Pack an Object within a Frame ",
         "desc" : " these functions, together with grid.frame and frameGrob are part of a GUI-builder-like interface to constructing graphical images. The idea is that you create a frame with grid.frame or frameGrob then use these functions to pack objects into the frame. ",
         "package" : "grid",
         "name" : "grid.pack"
      },
      {
         "title" : " Draw a Path ",
         "package" : "grid",
         "desc" : " These functions create and draw a path. The final point will automatically be connected to the initial point. ",
         "name" : "grid.path"
      },
      {
         "name" : "grid.place",
         "desc" : " These functions provide a simpler (and faster) alternative to the grid.pack() and packGrob functions. They can be used to place objects within the existing rows and columns of a frame layout. They do not provide the ability to add new rows and columns nor do they affect the heights and widths of the rows and columns. ",
         "package" : "grid",
         "title" : " Place an Object within a Frame "
      },
      {
         "title" : " A Simple Plot and Legend Demo ",
         "desc" : " This function is just a wrapper for a simple demonstration of how a basic plot and legend can be drawn from scratch using grid. ",
         "package" : "grid",
         "name" : "grid.plot.and.legend"
      },
      {
         "desc" : " These functions create and draw data symbols. ",
         "package" : "grid",
         "title" : "Draw Data Symbols",
         "name" : "grid.points"
      },
      {
         "name" : "grid.polygon",
         "desc" : " These functions create and draw a polygon. The final point will automatically be connected to the initial point. ",
         "package" : "grid",
         "title" : " Draw a Polygon "
      },
      {
         "desc" : " Produces a pretty set of breakpoints within the range given. ",
         "package" : "grid",
         "title" : " Generate a Sensible Set of Breakpoints ",
         "name" : "grid.pretty"
      },
      {
         "name" : "grid.raster",
         "desc" : " Render a raster object (bitmap image) at the given location, size, and orientation. ",
         "package" : "grid",
         "title" : " Render a raster object "
      },
      {
         "desc" : " General information about the grid graphics package. ",
         "package" : "grid",
         "title" : "Grid Graphics",
         "name" : "Grid"
      },
      {
         "name" : "grid.record",
         "title" : " Encapsulate calculations and drawing ",
         "package" : "grid",
         "desc" : " Evaluates an expression that includes both calculations and drawing that depends on the calculations so that both the calculations and the drawing will be rerun when the scene is redrawn (e.g., device resize or editing). Intended only for expert use. "
      },
      {
         "name" : "grid.rect",
         "desc" : " These functions create and draw rectangles. ",
         "package" : "grid",
         "title" : "Draw rectangles "
      },
      {
         "title" : " Refresh the current grid scene ",
         "package" : "grid",
         "desc" : " Replays the current grid display list. ",
         "name" : "grid.refresh"
      },
      {
         "name" : "grid.remove",
         "title" : "Remove a Grid Graphical Object",
         "desc" : " Remove a grob from a gTree or a descendant of a gTree. ",
         "package" : "grid"
      },
      {
         "desc" : " Change the order in which the children of a gTree get drawn. ",
         "package" : "grid",
         "title" : " Reorder the children of a gTree ",
         "name" : "grid.reorder"
      },
      {
         "name" : "roundrect",
         "desc" : "Draw a single rectangle with rounded corners.",
         "package" : "grid",
         "title" : "Draw a rectangle with rounded corners"
      },
      {
         "desc" : " These functions create and draw line segments. ",
         "package" : "grid",
         "title" : " Draw Line Segments ",
         "name" : "grid.segments"
      },
      {
         "title" : "Set a Grid Graphical Object",
         "package" : "grid",
         "desc" : " Replace a grob or a descendant of a grob. ",
         "name" : "grid.set"
      },
      {
         "title" : "Draw a Diagram of a Grid Layout",
         "desc" : " This function uses Grid graphics to draw a diagram of a Grid layout. ",
         "package" : "grid",
         "name" : "grid.show.layout"
      },
      {
         "name" : "grid.show.viewport",
         "package" : "grid",
         "desc" : " This function uses Grid graphics to draw a diagram of a Grid viewport. ",
         "title" : "Draw a Diagram of a Grid Viewport"
      },
      {
         "desc" : " These functions create and draw text and plotmath expressions. ",
         "package" : "grid",
         "title" : "Draw Text",
         "name" : "grid.text"
      },
      {
         "title" : "Draw an X-Axis",
         "desc" : " These functions create and draw an x-axis. ",
         "package" : "grid",
         "name" : "grid.xaxis"
      },
      {
         "name" : "grid.xspline",
         "title" : " Draw an Xspline ",
         "desc" : " These functions create and draw an xspline, a curve drawn relative to control points. ",
         "package" : "grid"
      },
      {
         "package" : "grid",
         "desc" : " These functions create and draw a y-axis. ",
         "title" : "Draw a Y-Axis",
         "name" : "grid.yaxis"
      },
      {
         "name" : "grobName",
         "package" : "grid",
         "desc" : " This function generates a unique (within-session) name for a grob, based on the grob's class. ",
         "title" : "Generate a Name for a Grob"
      },
      {
         "package" : "grid",
         "desc" : " These functions create a unit object describing the width or height of a grob. They are generic. ",
         "title" : "Create a Unit Describing the Width of a Grob",
         "name" : "grobWidth"
      },
      {
         "package" : "grid",
         "desc" : " These functions create a unit object describing a location somewhere on the boundary of a grob. They are generic. ",
         "title" : "Create a Unit Describing a Grob Boundary Location",
         "name" : "grobX"
      },
      {
         "title" : "Constructing a Legend Grob",
         "desc" : " Constructing a legend grob (in progress) ",
         "package" : "grid",
         "name" : "legendGrob"
      },
      {
         "name" : "makeContent",
         "desc" : " These generic hook functions are called whenever a grid grob is drawn. They provide an opportunity for customising the drawing context and drawing content of a new class derived from grob (or gTree). ",
         "package" : "grid",
         "title" : " Customised grid Grobs "
      },
      {
         "title" : " Create a Viewport with a Standard Plot Layout ",
         "desc" : " This is a convenience function for producing a viewport with the common S-style plot layout -- i.e., a central plot region surrounded by margins given in terms of a number of lines of text. ",
         "package" : "grid",
         "name" : "plotViewport"
      },
      {
         "title" : " Utility function to resolve the size of a raster grob ",
         "package" : "grid",
         "desc" : " Determine the width and height of a raster grob when one or both are not given explicitly. The result depends on both the aspect ratio of the raster image and the aspect ratio of the physical drawing context, so the result is only valid for the drawing context in which this function is called. ",
         "name" : "resolveRasterSize"
      },
      {
         "name" : "showGrob",
         "title" : " Label grid grobs. ",
         "package" : "grid",
         "desc" : " Produces a graphical display of (by default) the current grid scene, with labels showing the names of each grob in the scene. It is also possible to label only specific grobs in the scene. "
      },
      {
         "name" : "showViewport",
         "desc" : " Produces a graphical display of (by default) the current grid viewport tree. It is also possible to display only specific viewports. Each viewport is drawn as a rectangle and the leaf viewports are labelled with the viewport name. ",
         "package" : "grid",
         "title" : " Display grid viewports. "
      },
      {
         "name" : "stringWidth",
         "title" : "Create a Unit Describing the Width and Height of a String or Math Expression",
         "package" : "grid",
         "desc" : " These functions create a unit object describing the width or height of a string. "
      },
      {
         "desc" : " This function produces a new unit object by combining the unit objects specified as arguments. ",
         "package" : "grid",
         "title" : "Combine Unit Objects",
         "name" : "unit.c"
      },
      {
         "title" : "Length of a Unit Object",
         "desc" : " The length of a unit object is defined as the number of unit values in the unit object. This function has been deprecated in favour of a unit method for the generic length function. ",
         "package" : "grid",
         "name" : "unit.length"
      },
      {
         "name" : "unit.pmin",
         "title" : " Parallel Unit Minima and Maxima ",
         "package" : "grid",
         "desc" : " Returns a unit object whose i'th value is the minimum (or maximum) of the i'th values of the arguments. "
      },
      {
         "package" : "grid",
         "desc" : " This function creates a unit object --- a vector of unit values. A unit value is typically just a single numeric value with an associated unit. ",
         "title" : "Function to Create a Unit Object",
         "name" : "unit"
      },
      {
         "title" : " Replicate Elements of Unit Objects ",
         "desc" : " Replicates the units according to the values given in times and length.out. This function has been deprecated in favour of a unit method for the generic rep function. ",
         "package" : "grid",
         "name" : "unit.rep"
      },
      {
         "title" : "Validate a Justification",
         "package" : "grid",
         "desc" : " Utility functions for determining whether a justification specification is valid and for resolving a single justification value from a combination of character and numeric values. ",
         "name" : "valid.just"
      },
      {
         "name" : "validDetails",
         "title" : " Customising grid grob Validation ",
         "desc" : " This generic hook function is called whenever a grid grob is created or edited via grob, gTree, grid.edit or editGrob. This provides an opportunity for customising the validation of a new class derived from grob (or gTree). ",
         "package" : "grid"
      },
      {
         "name" : "Grid Viewports",
         "title" : "Create a Grid Viewport",
         "desc" : " These functions create viewports, which describe rectangular regions on a graphics device and define a number of coordinate systems within those regions. ",
         "package" : "grid"
      },
      {
         "name" : "Working with Viewports",
         "title" : "Maintaining and Navigating the Grid Viewport Tree",
         "package" : "grid",
         "desc" : " Grid maintains a tree of viewports --- nested drawing contexts. These functions provide ways to add or remove viewports and to navigate amongst viewports in the tree. "
      },
      {
         "title" : " Concatenate Viewport Names ",
         "package" : "grid",
         "desc" : " This function can be used to generate a viewport path for use in downViewport or seekViewport. A viewport path is a list of nested viewport names. ",
         "name" : "vpPath"
      },
      {
         "title" : " Width and Height of a grid grob ",
         "desc" : " These generic functions are used to determine the size of grid grobs. ",
         "package" : "grid",
         "name" : "widthDetails"
      },
      {
         "name" : "xDetails",
         "package" : "grid",
         "desc" : " These generic functions are used to determine a location on the boundary of a grid grob. ",
         "title" : " Boundary of a grid grob "
      },
      {
         "name" : "xsplinePoints",
         "title" : " Return the points that would be used to draw an Xspline (or a Bezier curve). ",
         "desc" : " Rather than drawing an Xspline (or Bezier curve), this function returns the points that would be used to draw the series of line segments for the Xspline. This may be useful to post-process the Xspline curve, for example, to clip the curve. ",
         "package" : "grid"
      },
      {
         "title" : "Force an Object to Belong to a Class",
         "package" : "methods",
         "desc" : " These functions manage the relations that allow coercing an object to a given class. ",
         "name" : "as"
      },
      {
         "name" : "BasicClasses",
         "desc" : " Formal classes exist corresponding to the basic R object types, allowing these types to be used in method signatures, as slots in class definitions, and to be extended by new classes.",
         "package" : "methods",
         "title" : "Classes Corresponding to Basic Data Types "
      },
      {
         "name" : "callGeneric",
         "title" : "Call the Current Generic Function from a Method",
         "desc" : " A call to callGeneric can only appear inside a method definition. It then results in a call to the current generic function. The value of that call is the value of callGeneric. While it can be called from any method, it is useful and typically used in methods for group generic functions. ",
         "package" : "methods"
      },
      {
         "name" : "canCoerce",
         "package" : "methods",
         "desc" : " Test if an object can be coerced to a given S4 class. Maybe useful inside if() to ensure that calling as(object, Class) will find a method. ",
         "title" : "Can an Object be Coerced to a Certain S4 Class?"
      },
      {
         "name" : "cbind2",
         "title" : "Combine two Objects by Columns or Rows",
         "package" : "methods",
         "desc" : " Combine two matrix-like objects by columns (cbind2) or rows (rbind2). These are (S4) generic functions with default methods. "
      },
      {
         "desc" : " Class definitions are objects that contain the formal definition of a class of objects, usually referred to as an S4 class, to distinguish them from the informal S3 classes. This document gives an overview of S4 classes; for details of the class representation objects, see help for the class classRepresentation. ",
         "package" : "methods",
         "title" : "Class Definitions",
         "name" : "Classes"
      },
      {
         "name" : "classesToAM",
         "title" : " Compute an Adjacency Matrix for Superclasses of Class Definitions ",
         "package" : "methods",
         "desc" : " Given a vector of class names or a list of class definitions, the function returns an adjacency matrix of the superclasses of these classes; that is, a matrix with class names as the row and column names and with element [i, j] being 1 if the class in column j is a direct superclass of the class in row i, and 0 otherwise. The matrix has the information implied by the contains slot of the class definitions, but in a form that is often more convenient for further analysis; for example, an adjacency matrix is used in packages and other software to construct graph representations of relationships. "
      },
      {
         "title" : " Class names including the corresponding package ",
         "desc" : " The function className() generates a valid references to a class, including the name of the package containing the class definition. The object returned, from class \"className\", is the unambiguous way to refer to a class, for example when calling setMethod, just in case multiple definitions of the class exist. Function \"multipleClasses\" returns information about multiple definitions of classes with the same name from different packages. ",
         "package" : "methods",
         "name" : "className"
      },
      {
         "package" : "methods",
         "desc" : " These are the objects that hold the definition of classes of objects. They are constructed and stored as meta-data by calls to the function setClass. Don't manipulate them directly, except perhaps to look at individual slots. ",
         "title" : "Class Objects ",
         "name" : "classRepresentation-class"
      },
      {
         "desc" : "Special documentation can be supplied to describe the classes and methods that are created by the software in the methods package. Techniques to access this documentation and to create it in R help files are described here.",
         "package" : "methods",
         "title" : "Using and Creating On-line Documentation for Classes and Methods",
         "name" : "Documentation"
      },
      {
         "desc" : " The argument in functions is treated specially, in that it matches zero, one or more actual arguments (and so, objects). A mechanism has been added to to allow as the signature of a generic function. Methods defined for such functions will be selected and called when all the arguments matching are from the specified class or from some subclass of that class. ",
         "package" : "methods",
         "title" : "The Use of ... in Method Signatures",
         "name" : "dotsMethods"
      },
      {
         "package" : "methods",
         "desc" : " Objects from class \"EmptyMethodsList\" are generated during method selection to indicate failed search (forcing backtracking). Other classes described here are used internally in method dispatch. All these are for internal use.",
         "title" : "Internal Class representing Empty Methods List ",
         "name" : "EmptyMethodsList-class"
      },
      {
         "name" : "environment-class",
         "desc" : " A formal class for R environments.",
         "package" : "methods",
         "title" : "Class \"environment\""
      },
      {
         "name" : "evalSource",
         "package" : "methods",
         "desc" : " Definitions of functions and/or methods from a source file are inserted into a package, using the trace mechanism. Typically, this allows testing or debugging modified versions of a few functions without reinstalling a large package. ",
         "title" : " Use Function Definitions from a Source File without Reinstalling a Package "
      },
      {
         "desc" : " Functions to find and manipulate class definitions. ",
         "package" : "methods",
         "title" : "Computations with Classes",
         "name" : "findClass"
      },
      {
         "package" : "methods",
         "desc" : " The function findMethods converts the methods defined in a table for a generic function (as used for selection of methods) into a list, for study or display. The list is actually from the class listOfMethods (see the section describing the class, below). The list will be limited to the methods defined in environment where if that argument is supplied and limited to those including one or more of the specified classes in the method signature if that argument is supplied. To see the actual table (an environment) used for methods dispatch, call getMethodsForDispatch. The names of the list returned by findMethods are the names of the objects in the table. The function findMethodSignatures returns a character matrix whose rows are the class names from the signature of the corresponding methods; it operates either from a list returned by findMethods, or by computing such a list itself, given the same arguments as findMethods . The function hasMethods returns TRUE or FALSE according to whether there is a non-empty table of methods for function f in the environment or search position where (or for the generic function generally if where is missing). The defunct function getMethods is an older alternative to findMethods , returning information in the form of an object of class MethodsList, previously used for method dispatch. It is not recommended, since this class of objects is deprecated generally and will disappear in a future version of R. ",
         "title" : "Description of the Methods Defined for a Generic Function",
         "name" : "findMethods"
      },
      {
         "title" : "Fix Objects Saved from R Versions Previous to 1.8",
         "desc" : " Beginning with R version 1.8.0, the class of an object contains the identification of the package in which the class is defined. The function fixPre1.8 fixes and re-assigns objects missing that information (typically because they were loaded from a file saved with a previous version of R.) ",
         "package" : "methods",
         "name" : "fixPre1.8"
      },
      {
         "title" : "Generic Function Objects ",
         "package" : "methods",
         "desc" : " Generic functions (objects from or extending class genericFunction) are extended function objects, containing information used in creating and dispatching methods for this function. They also identify the package associated with the function and its methods. ",
         "name" : "genericFunction-class"
      },
      {
         "title" : "Tools for Managing Generic Functions",
         "package" : "methods",
         "desc" : " The functions documented here manage collections of methods associated with a generic function, as well as providing information about the generic functions themselves. ",
         "name" : "GenericFunctions"
      },
      {
         "name" : "getClass",
         "title" : "Get Class Definition ",
         "desc" : " Get the definition of a class. ",
         "package" : "methods"
      },
      {
         "title" : " Get or Test for the Definition of a Method ",
         "package" : "methods",
         "desc" : " Functions to look for a method corresponding to a given generic function and signature. The functions getMethod and selectMethod return the method; the functions existsMethod and hasMethod test for its existence. In both cases the first function only gets direct definitions and the second uses inheritance. In all cases, the search is in the generic function itself or in the package/environment specified by argument where. The function findMethod returns the package(s) in the search list (or in the packages specified by the where argument) that contain a method for this function and signature. ",
         "name" : "getMethod"
      },
      {
         "name" : "getPackageName",
         "title" : "The Name associated with a Given Package",
         "package" : "methods",
         "desc" : " The functions below produce the package associated with a particular environment or position on the search list, or of the package containing a particular function. They are primarily used to support computations that need to differentiate objects on multiple packages. "
      },
      {
         "title" : "Look for an Argument in the Call",
         "desc" : " Returns TRUE if name corresponds to an argument in the call, either a formal argument to the function, or a component of ..., and FALSE otherwise. ",
         "package" : "methods",
         "name" : "hasArg"
      },
      {
         "name" : "implicitGeneric",
         "title" : "Manage Implicit Versions of Generic Functions",
         "package" : "methods",
         "desc" : " Create or access implicit generic functions, used to enforce consistent generic versions of functions that are not currently generic. Function implicitGeneric() returns the implicit generic version, setGenericImplicit() turns a generic implicit, prohibitGeneric() prevents your function from being made generic, and registerImplicitGenerics() saves a set of implicit generic definitions in the cached table of the current session. "
      },
      {
         "name" : "inheritedSlotNames",
         "package" : "methods",
         "desc" : " For a class (or class definition, see getClass and the description of class classRepresentation), give the names which are inherited from above, i.e., super classes, rather than by this class' definition itself. ",
         "title" : "Names of Slots Inherited From a Super Class"
      },
      {
         "name" : "initialize-methods",
         "title" : "Methods to Initialize New Objects from a Class",
         "package" : "methods",
         "desc" : " The arguments to function new to create an object from a particular class can be interpreted specially for that class, by the definition of a method for function initialize for the class. This documentation describes some existing methods, and also outlines how to write new ones. "
      },
      {
         "package" : "methods",
         "desc" : " Functions to test inheritance relationships between an object and a class (is) or between two classes (extends), and to establish such relationships (setIs, an explicit alternative to the contains= argument to setClass). ",
         "title" : "Is an Object from a Class?",
         "name" : "is"
      },
      {
         "desc" : " These functions check for either a method or a class that has been sealed when it was defined, and which therefore cannot be re-defined. ",
         "package" : "methods",
         "title" : " Check for a Sealed Method or Class ",
         "name" : "isSealedMethod"
      },
      {
         "title" : "Classes to Represent Unevaluated Language Objects ",
         "desc" : " The virtual class \"language\" and the specific classes that extend it represent unevaluated objects, as produced for example by the parser or by functions such as quote. ",
         "package" : "methods",
         "name" : "language-class"
      },
      {
         "name" : "languageEl",
         "desc" : " Internal routines to support some operations on language objects. ",
         "package" : "methods",
         "title" : "Elements of Language Objects"
      },
      {
         "name" : "LinearMethodsList-class",
         "title" : "Class \"LinearMethodsList\"",
         "desc" : " A version of methods lists that has been linearized for producing summary information. The actual objects from class \"MethodsList\" used for method dispatch are defined recursively over the arguments involved. ",
         "package" : "methods"
      },
      {
         "title" : "Localized Objects based on Reference Classes",
         "desc" : " Local reference classes are modified ReferenceClasses that isolate the objects to the local frame. Therefore, they do not propagate changes back to the calling environment. At the same time, they use the reference field semantics locally, avoiding the automatic duplication applied to standard objects. The current implementation has no special construction. To create a local reference class, call setRefClass() with a contains= argument that includes \"localRefClass\". See the example below. Local reference classes operate essentially as do regular, functional classes in ; that is, changes are made by assignment and take place in the local frame. The essential difference is that replacement operations (like the change to the twiddle field in the example) do not cause duplication of the entire object, as would be the case for a formal class or for data with attributes or in a named list. The purpose is to allow large objects in some fields that are not changed along with potentially frequent changes to other fields, but without copying the large fields. ",
         "package" : "methods",
         "name" : "LocalReferenceClasses"
      },
      {
         "name" : "method.skeleton",
         "desc" : " This function writes a source file containing a call to setMethod to define a method for the generic function and signature supplied. By default the method definition is in line in the call, but can be made an external (previously assigned) function. ",
         "package" : "methods",
         "title" : "Create a Skeleton File for a New Method"
      },
      {
         "name" : "MethodDefinition-class",
         "title" : "Classes to Represent Method Definitions",
         "desc" : " These classes extend the basic class \"function\" when functions are to be stored and used as method definitions. ",
         "package" : "methods"
      },
      {
         "name" : "methods-defunct",
         "title" : "Defunct Functions in Package methods",
         "desc" : " Defunct functions in package methods. ",
         "package" : "methods"
      },
      {
         "title" : "Deprecated Functions in Package methods",
         "package" : "methods",
         "desc" : " These functions are provided for compatibility with older versions of only, and may be defunct as soon as the next release. ",
         "name" : "methods-deprecated"
      },
      {
         "name" : "methods-package",
         "title" : " Formal Methods and Classes ",
         "package" : "methods",
         "desc" : " Formally defined methods and classes for R objects, plus other programming tools, as described in the references. "
      },
      {
         "title" : "General Information on Methods",
         "desc" : " This documentation section covers some general topics on how methods work and how the methods package interacts with the rest of . The information is usually not needed to get started with methods and classes, but may be helpful for moderately ambitious projects, or when something doesn't work as expected. The section How Methods Work describes the underlying mechanism; S3 Methods and Generic Functions gives the rules applied when S4 classes and methods interact with older S3 methods; Method Selection and Dispatch provides more details on how class definitions determine which methods are used; Generic Functions discusses generic functions as objects. For additional information specifically about class definitions, see Classes. ",
         "package" : "methods",
         "name" : "Methods"
      },
      {
         "title" : "Class MethodsList, Defunct Representation of Methods ",
         "package" : "methods",
         "desc" : " This class of objects was used in the original implementation of the package to control method dispatch. Its use is now defunct, but object appear as the default method slot in generic functions. This and any other remaining uses will be removed in the future. For the modern alternative, see listOfMethods. The details in this documentation are retained to allow analysis of old-style objects. ",
         "name" : "MethodsList-class"
      },
      {
         "desc" : " These functions create and manipulate MethodsList objects, the objects formerly used in R to store methods for dispatch. Use of these objects is deprecated since 3.2.0, as it will rarely be a good idea. Where methods dispatch is to be studied, see selectMethod. For computations that iterate over methods or over method signatures, see findMethods, which returns a linearized methods list to hold method definitions, usually more convenient for iteration than the recursive MethodsList objects. ",
         "package" : "methods",
         "title" : "MethodsList Objects",
         "name" : "MethodsList"
      },
      {
         "title" : "Additional (Support) Functions for Methods",
         "desc" : " These are support routines for computations on formal methods. ",
         "package" : "methods",
         "name" : "MethodSupport"
      },
      {
         "name" : "methodUtilities",
         "desc" : " These are utilities, currently in the methods package, that either provide some functionality needed by the package (e.g., element matching by name), or add compatibility with S-Plus, or both. ",
         "package" : "methods",
         "title" : "Utility Functions for Methods and S-Plus Compatibility"
      },
      {
         "desc" : " Class of method definitions set up for callNextMethod ",
         "package" : "methods",
         "title" : "Class MethodWithNext ",
         "name" : "MethodWithNext-class"
      },
      {
         "package" : "methods",
         "desc" : " Given the name or the definition of a class, plus optionally data to be included in the object, new returns an object from that class. ",
         "title" : " Generate an Object from a Class ",
         "name" : "new"
      },
      {
         "name" : "callNextMethod",
         "desc" : " A call to callNextMethod can only appear inside a method definition. It then results in a call to the first inherited method after the current method, with the arguments to the current method passed down to the next method. The value of that method call is the value of callNextMethod. ",
         "package" : "methods",
         "title" : "Call an Inherited Method"
      },
      {
         "name" : "nonStructure-class",
         "desc" : " S4 classes that are defined to extend one of the basic vector classes should contain the class structure if they behave like structures; that is, if they should retain their class behavior under math functions or operators, so long as their length is unchanged. On the other hand, if their class depends on the values in the object, not just its structure, then they should lose that class under any such transformations. In the latter case, they should be defined to contain nonStructure. If neither of these strategies applies, the class likely needs some methods of its own for Ops, Math, and/or other generic functions. What is not usually a good idea is to allow such computations to drop down to the default, base code. This is inconsistent with most definitions of such classes.",
         "package" : "methods",
         "title" : "A non-structure S4 Class for basic types "
      },
      {
         "name" : "ObjectsWithPackage-class",
         "title" : "A Vector of Object Names, with associated Package Names ",
         "package" : "methods",
         "desc" : " This class of objects is used to represent ordinary character string object names, extended with a package slot naming the package associated with each object. "
      },
      {
         "name" : "promptClass",
         "package" : "methods",
         "desc" : " Assembles all relevant slot and method information for a class, with minimal markup for Rd processing; no QC facilities at present. ",
         "title" : "Generate a Shell for Documentation of a Formal Class"
      },
      {
         "title" : " Generate a Shell for Documentation of Formal Methods ",
         "package" : "methods",
         "desc" : " Generates a shell of documentation for the methods of a generic function. ",
         "name" : "promptMethods"
      },
      {
         "title" : "Utilities for Managing Class Definitions",
         "package" : "methods",
         "desc" : " These are various functions to support the definition and use of formal classes. Most of them are rarely suitable to be called directly. Others are somewhat experimental and/or partially implemented only. Do refer to setClass for normal code development. ",
         "name" : "RClassUtils"
      },
      {
         "name" : "ReferenceClasses",
         "desc" : " The software described here supports reference classes whose objects have fields accessed by reference in the style of OOP languages such as Java and C++. Computations with these objects invoke methods on them and extract or set their fields. The field and method computations potentially modify the object. All computations referring to the objects see the modifications, in contrast to the usual functional programming model in . Reference classes can be used to program in directly or in combination with an interface to an OOP-style language, allowing -written methods to extend the interface. ",
         "package" : "methods",
         "title" : "Objects With Fields Treated by Reference (OOP-style)"
      },
      {
         "package" : "methods",
         "desc" : " These are old utility functions to construct, respectively a list designed to represent the slots and superclasses and a list of prototype specifications. The representation() function is no longer useful, since the arguments slots and contains to setClass are now recommended. The prototype() function may still be used for the corresponding argument, but a simple list of the same arguments works as well. ",
         "title" : " Construct a Representation or a Prototype for a Class Definition",
         "name" : "representation"
      },
      {
         "title" : "Method Utilities",
         "desc" : " Utility functions to support the definition and use of formal methods. Most of these functions will not normally be called directly by the user. ",
         "package" : "methods",
         "name" : "RMethodUtils"
      },
      {
         "name" : "S3Part",
         "desc" : " Old-style (S3) classes may be registered as S4 classes (by calling setOldClass, and many have been. These classes can then be contained in (that is, superclasses of) regular S4 classes, allowing formal methods and slots to be added to the S3 behavior. The function S3Part extracts or replaces the S3 part of such an object. S3Class extracts or replaces the S3-style class. S3Class also applies to object from an S4 class with S3methods=TRUE in the call to setClass. See the details below. Also discussed are S3 <-> S4 coercion; see the section S3 and S4 objects ",
         "package" : "methods",
         "title" : " S3-style Objects and S4-class Objects"
      },
      {
         "package" : "methods",
         "desc" : " Methods can be defined for group generic functions. Each group generic function has a number of member generic functions associated with it. Methods defined for a group generic function cause the same method to be defined for each member of the group, but a method explicitly defined for a member of the group takes precedence over a method defined, with the same signature, for the group generic. The functions shown in this documentation page all reside in the methods package, but the mechanism is available to any programmer, by calling setGroupGeneric (provided package methods is attached). ",
         "title" : "S4 Group Generic Functions",
         "name" : "S4groupGeneric"
      },
      {
         "title" : "Class to Represent Inheritance (Extension) Relations ",
         "desc" : " An object from this class represents a single is relationship; lists of these objects are used to represent all the extensions (superclasses) and subclasses for a given class. The object contains information about how the relation is defined and methods to coerce, test, and replace correspondingly. ",
         "package" : "methods",
         "name" : "SClassExtension-class"
      },
      {
         "name" : "selectSuperClasses",
         "title" : "Super Classes (of Specific Kinds) of a Class",
         "desc" : " Return superclasses of ClassDef, possibly only non-virtual or direct or simple ones. These functions are designed to be fast, and consequently only work with the contains slot of the corresponding class definitions. ",
         "package" : "methods"
      },
      {
         "package" : "methods",
         "desc" : " Create a class definition, specifying the representation (the slots) and/or the classes contained in this one (the superclasses), plus other optional details. As a side effect, the class definition is stored in the specified environment. A generator function is returned as the value of setClass(), suitable for creating objects from the class if the class is not virtual. Of the many arguments to the function only Class, slots= and contains= are usually needed. ",
         "title" : "Create a Class Definition",
         "name" : "setClass"
      },
      {
         "name" : "setClassUnion",
         "title" : "Classes Defined as the Union of Other Classes",
         "package" : "methods",
         "desc" : " A class may be defined as the union of other classes; that is, as a virtual class defined as a superclass of several other classes. Class unions are useful in method signatures or as slots in other classes, when we want to allow one of several classes to be supplied. "
      },
      {
         "desc" : " Create a new generic function of the given name, that is, a function that dispatches methods according to the classes of the arguments, from among the formal methods defined for this function. ",
         "package" : "methods",
         "title" : "Define a New Generic Function",
         "name" : "setGeneric"
      },
      {
         "name" : "setLoadActions",
         "desc" : " These functions provide a mechanism for packages to specify computations to be done during the loading of a package namespace. Such actions are a flexible way to provide information only available at load time (such as locations in a dynamically linked library). A call to setLoadAction() or setLoadActions() specifies one or more functions to be called when the corresponding namespace is loaded, with the argument names being used as identifying names for the actions. getLoadActions reports the currently defined load actions, given a package's namespace as its argument. hasLoadAction returns TRUE if a load action corresponding to the given name has previously been set for the where namespace. evalOnLoad() and evalqOnLoad() schedule a specific expression for evaluation at load time. ",
         "package" : "methods",
         "title" : " Set Actions For Package Loading "
      },
      {
         "package" : "methods",
         "desc" : " Create and save a formal method for a given function and list of classes. ",
         "title" : " Create and Save a Method ",
         "name" : "setMethod"
      },
      {
         "name" : "setOldClass",
         "desc" : " Register an old-style (a.k.a. S3) class as a formally defined class. The Classes argument is the character vector used as the class attribute; in particular, if there is more than one string, old-style class inheritance is mimicked. Registering via setOldClass allows S3 classes to appear in method signatures, as a slot in an S4 class, or as a superclass of an S4 class. ",
         "package" : "methods",
         "title" : "Register Old-Style (S3) Classes and Inheritance"
      },
      {
         "title" : "Create a Class Definition",
         "package" : "methods",
         "desc" : " Constructs an object of class classRepresentation to describe a particular class. Mostly a utility function, but you can call it to create a class definition without assigning it, as setClass would do. ",
         "name" : "makeClassRepresentation"
      },
      {
         "name" : "show",
         "title" : "Show an Object",
         "desc" : " Display the object, by printing, plotting or whatever suits its class. This function exists to be specialized by methods. The default method calls showDefault. Formal methods for show will usually be invoked for automatic printing (see the details). ",
         "package" : "methods"
      },
      {
         "desc" : " Show a summary of the methods for one or more generic functions, possibly restricted to those involving specified classes. ",
         "package" : "methods",
         "title" : "Show all the methods for the specified function(s) or class",
         "name" : "showMethods"
      },
      {
         "name" : "signature-class",
         "desc" : "This class represents the mapping of some of the formal arguments of a function onto the corresponding classes. It is used for two slots in the MethodDefinition class. ",
         "package" : "methods",
         "title" : "Class \"signature\" For Method Definitions"
      },
      {
         "package" : "methods",
         "desc" : " These functions return or set information about the individual slots in an object. ",
         "title" : "The Slots in an Object from a Formal Class",
         "name" : "slot"
      },
      {
         "title" : "Class \"envRefClass\"",
         "package" : "methods",
         "desc" : " Support Class to Implement R Objects using Reference Semantics ",
         "name" : "envRefClass-class"
      },
      {
         "title" : "Classes Corresponding to Basic Structures",
         "package" : "methods",
         "desc" : " The virtual class structure and classes that extend it are formal classes analogous to S language structures such as arrays and time-series. ",
         "name" : "StructureClasses"
      },
      {
         "title" : "SubstituteDirect",
         "desc" : " Substitute for the variables named in the second argument the corresponding objects, substituting into object. The argument frame is a named list; if omitted, the environment of the caller is used. This function differs from the ordinary substitute in that it treats its first argument in the standard S way, by evaluating it. In contrast, substitute does not evaluate its first argument. The goal is to replace this with an eval= argument to substitute. ",
         "package" : "methods",
         "name" : "substituteDirect"
      },
      {
         "desc" : " A set of distinct inherited signatures is generated to test inheritance for all the methods of a specified generic function. If method selection is ambiguous for some of these, a summary of the ambiguities is attached to the returned object. This test should be performed by package authors before releasing a package. ",
         "package" : "methods",
         "title" : " Test for and Report about Selection of Inherited Methods ",
         "name" : "testInheritedMethods"
      },
      {
         "name" : "TraceClasses",
         "desc" : " The classes described here are used by the R function trace to create versions of functions and methods including browser calls, etc., and also to untrace the same objects.",
         "package" : "methods",
         "title" : "Classes Used Internally to Control Tracing "
      },
      {
         "package" : "methods",
         "desc" : " The validity of object related to its class definition is tested. If the object is valid, TRUE is returned; otherwise, either a vector of strings describing validity failures is returned, or an error is generated (according to whether test is TRUE). Optionally, all slots in the object can also be validated. The function setValidity sets the validity method of a class (but more normally, this method will be supplied as the validity argument to setClass). The method should be a function of one object that returns TRUE or a description of the non-validity. ",
         "title" : " Test the Validity of an Object ",
         "name" : "validObject"
      },
      {
         "title" : "List of Builtin and Special Functions",
         "package" : "methods",
         "desc" : " A named list providing instructions for turning builtin and special functions into generic functions. Functions in R that are defined as .Primitive(<name>) are not suitable for formal methods, because they lack the basic reflectance property. You can't find the argument list for these functions by examining the function object itself. Future versions of R may fix this by attaching a formal argument list to the corresponding function. While generally the names of arguments are not checked by the internal code implementing the function, the number of arguments frequently is. In any case, some definition of a formal argument list is needed if users are to define methods for these functions. In particular, if methods are to be merged from multiple packages, the different sets of methods need to agree on the formal arguments. In the absence of reflectance, this list provides the relevant information via a dummy function associated with each of the known specials for which methods are allowed. At the same, the list flags those specials for which methods are meaningless (e.g., for) or just a very bad idea (e.g., .Primitive). A generic function created via setMethod, for example, for one of these special functions will have the argument list from .BasicFunsList. If no entry exists, the argument list (x, ...) is assumed. ",
         "name" : ".BasicFunsList"
      },
      {
         "package" : "parallel",
         "desc" : " These functions provide several ways to parallelize computations using a cluster. ",
         "title" : "Apply Operations using Clusters",
         "name" : "clusterApply"
      },
      {
         "title" : "Detect the Number of CPU Cores",
         "package" : "parallel",
         "desc" : " Attempt to detect the number of CPU cores on the current host. ",
         "name" : "detectCores"
      },
      {
         "title" : " Create a Parallel Socket Cluster ",
         "desc" : " Creates a set of copies of running in parallel and communicating over sockets. ",
         "package" : "parallel",
         "name" : "makeCluster"
      },
      {
         "package" : "parallel",
         "desc" : " Support for parallel computation, including random-number generation. ",
         "title" : " Support for Parallel Computation ",
         "name" : "parallel-package"
      },
      {
         "title" : "Implementation of Pierre L'Ecuyer's RngStreams",
         "package" : "parallel",
         "desc" : " This is an re-implementation of Pierre L'Ecuyer's RngStreams multiple streams of pseudo-random numbers. ",
         "name" : "RNGstreams"
      },
      {
         "desc" : " This divides up 1:nx into ncl lists of approximately equal size, as a way to allocate tasks to nodes in a cluster. It is mainly for internal use, but some package authors have found it useful. ",
         "package" : "parallel",
         "title" : "Divide Tasks for Distribution in a Cluster",
         "name" : "splitIndices"
      },
      {
         "title" : "Low-level Functions for Management of Forked Processes",
         "package" : "man",
         "desc" : " These are low-level support functions for the forking approach. They are not available on Windows, and not exported from the namespace. ",
         "name" : "mcchildren"
      },
      {
         "name" : "mcaffinity",
         "package" : "man",
         "desc" : " mcaffinity retrieves or sets the CPU affinity mask of the current process, i.e., the set of CPUs the process is allowed to be run on. (CPU here means logical CPU which can be CPU, core or hyperthread unit.) ",
         "title" : "Get or Set CPU Affinity Mask of the Current Process"
      },
      {
         "name" : "mcfork",
         "title" : "Fork a Copy of the Current R Process",
         "desc" : " These are low-level functions, not available on Windows, and not exported from the namespace. mcfork creates a new child process as a copy of the current process. mcexit closes the current child process, informing the master process as necessary. ",
         "package" : "man"
      },
      {
         "name" : "mclapply",
         "title" : "Parallel Versions of lapply and mapply using Forking",
         "desc" : " mclapply is a parallelized version of lapply, it returns a list of the same length as X, each element of which is the result of applying FUN to the corresponding element of X. It relies on forking and hence is not available on Windows unless mc.cores = 1. mcmapply is a parallelized version of mapply, and mcMap corresponds to Map. ",
         "package" : "man"
      },
      {
         "name" : "mcparallel",
         "desc" : " These functions are based on forking and so are not available on Windows. mcparallel starts a parallel process which evaluates the given expression. mccollect collects results from one or more parallel processes. ",
         "package" : "man",
         "title" : "Evaluate an Expression Asynchronously in a Separate Process"
      },
      {
         "name" : "pvec",
         "desc" : " pvec parellelizes the execution of a function on vector elements by splitting the vector and submitting each part to one core. The function must be a vectorized map, i.e.\\\\ifelse{latex}{\\\\out{~}}{ }latex~ it takes a vector input and creates a vector output of exactly the same length as the input which doesn't depend on the partition of the vector. It relies on forking and hence is not available on Windows unless mc.cores = 1. ",
         "package" : "man",
         "title" : "Parallelize a Vector Map Function using Forking"
      },
      {
         "name" : "mclapply",
         "title" : "Serial versions of mclapply, mcmapply and pvec",
         "desc" : " These are simple serial versions of mclapply, mcmapply, mcMap and pvec for Windows where forking is not available. ",
         "package" : "man"
      },
      {
         "name" : "asVector",
         "title" : "Coerce an Object to a Vector",
         "desc" : " This is a generic function. Methods for this function coerce objects of given classes to vectors. ",
         "package" : "splines"
      },
      {
         "name" : "backSpline",
         "package" : "splines",
         "desc" : " Create a monotone inverse of a monotone natural spline. ",
         "title" : "Monotone Inverse Spline"
      },
      {
         "name" : "bs",
         "package" : "splines",
         "desc" : " Generate the B-spline basis matrix for a polynomial spline. ",
         "title" : "B-Spline Basis for Polynomial Splines"
      },
      {
         "package" : "splines",
         "desc" : " Create an interpolation spline, either from x and y vectors, or from a formula/data.frame combination. ",
         "title" : "Create an Interpolation Spline",
         "name" : "interpSpline"
      },
      {
         "desc" : " Generate the B-spline basis matrix for a natural cubic spline. ",
         "package" : "splines",
         "title" : "Generate a Basis Matrix for Natural Cubic Splines",
         "name" : "ns"
      },
      {
         "name" : "periodicSpline",
         "title" : "Create a Periodic Interpolation Spline",
         "desc" : " Create a periodic interpolation spline, either from x and y vectors, or from a formula/data.frame combination. ",
         "package" : "splines"
      },
      {
         "title" : "Piecewise Polynomial Spline Representation",
         "package" : "splines",
         "desc" : " Create the piecewise polynomial representation of a spline object. ",
         "name" : "polySpline"
      },
      {
         "name" : "predict.bs",
         "title" : "Evaluate a Spline Basis",
         "desc" : " Evaluate a predefined spline basis at given values. ",
         "package" : "splines"
      },
      {
         "name" : "predict.bSpline",
         "desc" : " The predict methods for the classes that inherit from the virtual classes bSpline and polySpline are used to evaluate the spline or its derivatives. The plot method for a spline object first evaluates predict with the x argument missing, then plots the resulting xyVector with type = \"l\".",
         "package" : "splines",
         "title" : "Evaluate a Spline at New Values of x"
      },
      {
         "package" : "splines",
         "desc" : " Evaluate the design matrix for the B-splines defined by knots at the values in x. ",
         "title" : "Design Matrix for B-splines",
         "name" : "splineDesign"
      },
      {
         "name" : "splineKnots",
         "title" : "Knot Vector from a Spline",
         "package" : "splines",
         "desc" : " Return the knot vector corresponding to a spline object. "
      },
      {
         "name" : "splineOrder",
         "title" : "Determine the Order of a Spline",
         "package" : "splines",
         "desc" : " Return the order of a spline object. "
      },
      {
         "name" : "splines-package",
         "desc" : " Regression spline functions and classes. ",
         "package" : "splines",
         "title" : " Regression Spline Functions and Classes "
      },
      {
         "desc" : " Create an object to represent a set of x-y pairs. The resulting object can be treated as a matrix or as a data frame or as a vector. When treated as a vector it reduces to the y component only. The result of functions such as predict.spline is returned as an xyVector object so the x-values used to generate the y-positions are retained, say for purposes of generating plots. ",
         "package" : "splines",
         "title" : "Construct an xyVector Object",
         "name" : "xyVector"
      },
      {
         "title" : "Auto- and Cross- Covariance and -Correlation Function Estimation",
         "desc" : " The function acf computes (and by default plots) estimates of the autocovariance or autocorrelation function. Function pacf is the function used for the partial autocorrelations. Function ccf computes the cross-correlation or cross-covariance of two univariate series. ",
         "package" : "stats",
         "name" : "acf"
      },
      {
         "name" : "acf2AR",
         "package" : "stats",
         "desc" : " Compute an AR process exactly fitting an autocorrelation function. ",
         "title" : "Compute an AR Process Exactly Fitting an ACF"
      },
      {
         "package" : "stats",
         "desc" : " Compute all the single terms in the scope argument that can be added to or dropped from the model, fit those models and compute a table of the changes in fit. ",
         "title" : "Add or Drop All Possible Single Terms to a Model",
         "name" : "add1"
      },
      {
         "name" : "addmargins",
         "desc" : " For a given table one can specify which of the classifying factors to expand by one or more levels to hold margins to be calculated. One may for example form sums and means over the first dimension and medians over the second. The resulting table will then have two extra levels for the first dimension and one extra level for the second. The default is to sum over all margins in the table. Other possibilities may give results that depend on the order in which the margins are computed. This is flagged in the printed output from the function. ",
         "package" : "stats",
         "title" : " Puts Arbitrary Margins on Multidimensional Tables or Arrays "
      },
      {
         "title" : "Compute Summary Statistics of Data Subsets",
         "package" : "stats",
         "desc" : " Splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form. ",
         "name" : "aggregate"
      },
      {
         "name" : "AIC",
         "desc" : " Generic function calculating Akaike's An Information Criterion for one or several fitted model objects for which a log-likelihood value can be obtained, according to the formula -2 \\\\mbox{log-likelihood} + k n_{par}-2*log-likelihood + k*npar, where n_{par}npar represents the number of parameters in the fitted model, and k = 2 for the usual AIC, or k = \\\\log(n)k = log(n) (n being the number of observations) for the so-called BIC or SBC (Schwarz's Bayesian criterion). ",
         "package" : "stats",
         "title" : "Akaike's An Information Criterion"
      },
      {
         "title" : "Find Aliases (Dependencies) in a Model",
         "desc" : " Find aliases (linearly dependent terms) in a linear model specified by a formula. ",
         "package" : "stats",
         "name" : "alias"
      },
      {
         "name" : "anova.glm",
         "desc" : " Compute an analysis of deviance table for one or more generalized linear model fits. ",
         "package" : "stats",
         "title" : "Analysis of Deviance for Generalized Linear Model Fits"
      },
      {
         "title" : "ANOVA for Linear Model Fits",
         "desc" : " Compute an analysis of variance table for one or more linear model fits. ",
         "package" : "stats",
         "name" : "anova.lm"
      },
      {
         "package" : "stats",
         "desc" : " Compute a (generalized) analysis of variance table for one or more multivariate linear models. ",
         "title" : "Comparisons between Multivariate Linear Models",
         "name" : "anova.mlm"
      },
      {
         "name" : "anova",
         "title" : "Anova Tables",
         "package" : "stats",
         "desc" : " Compute analysis of variance (or deviance) tables for one or more fitted model objects. "
      },
      {
         "package" : "stats",
         "desc" : " Performs the Ansari-Bradley two-sample test for a difference in scale parameters. ",
         "title" : "Ansari-Bradley Test",
         "name" : "ansari.test"
      },
      {
         "desc" : " Fit an analysis of variance model by a call to lm for each stratum. ",
         "package" : "stats",
         "title" : "Fit an Analysis of Variance Model",
         "name" : "aov"
      },
      {
         "name" : "approxfun",
         "package" : "stats",
         "desc" : " Return a list of points which linearly interpolate given data points, or a function performing the linear (or constant) interpolation. ",
         "title" : "Interpolation Functions"
      },
      {
         "package" : "stats",
         "desc" : " Fit an autoregressive time series model to the data by ordinary least squares, by default selecting the complexity by AIC. ",
         "title" : "Fit Autoregressive Models to Time Series by OLS",
         "name" : "ar.ols"
      },
      {
         "title" : "Fit Autoregressive Models to Time Series",
         "package" : "stats",
         "desc" : " Fit an autoregressive time series model to the data, by default selecting the complexity by AIC. ",
         "name" : "ar"
      },
      {
         "package" : "stats",
         "desc" : " Fit an ARIMA model to a univariate time series. ",
         "title" : "ARIMA Modelling of Time Series",
         "name" : "arima"
      },
      {
         "package" : "stats",
         "desc" : " Simulate from an ARIMA model. ",
         "title" : "Simulate from an ARIMA Model",
         "name" : "arima.sim"
      },
      {
         "title" : "ARIMA Modelling of Time Series -- Preliminary Version",
         "package" : "stats",
         "desc" : " Fit an ARIMA model to a univariate time series, and forecast from the fitted model. ",
         "name" : "arima0"
      },
      {
         "name" : "ARMAacf",
         "package" : "stats",
         "desc" : " Compute the theoretical autocorrelation function or partial autocorrelation function for an ARMA process. ",
         "title" : "Compute Theoretical ACF for an ARMA Process"
      },
      {
         "name" : "ARMAtoMA",
         "title" : "Convert ARMA Process to Infinite MA Process",
         "package" : "stats",
         "desc" : " Convert ARMA process to infinite MA process. "
      },
      {
         "name" : "as.hclust",
         "title" : "Convert Objects to Class hclust",
         "desc" : " Converts objects from other hierarchical clustering functions to class \"hclust\". ",
         "package" : "stats"
      },
      {
         "title" : "Convert to One-Sided Formula",
         "package" : "stats",
         "desc" : " Names, expressions, numeric values, and character strings are converted to one-sided formulae. If object is a formula, it must be one-sided, in which case it is returned unaltered. ",
         "name" : "asOneSidedFormula"
      },
      {
         "name" : "ave",
         "title" : "Group Averages Over Level Combinations of Factors",
         "desc" : " Subsets of x[] are averaged, where each subset consist of those observations with the same factor levels. ",
         "package" : "stats"
      },
      {
         "name" : "bandwidth",
         "title" : "Bandwidth Selectors for Kernel Density Estimation",
         "package" : "stats",
         "desc" : " Bandwidth selectors for Gaussian kernels in density. "
      },
      {
         "name" : "bartlett.test",
         "title" : "Bartlett Test of Homogeneity of Variances",
         "desc" : " Performs Bartlett's test of the null that the variances in each of the groups (samples) are the same. ",
         "package" : "stats"
      },
      {
         "name" : "Beta",
         "title" : "The Beta Distribution",
         "desc" : " Density, distribution function, quantile function and random generation for the Beta distribution with parameters shape1 and shape2 (and optional non-centrality parameter ncp). ",
         "package" : "stats"
      },
      {
         "name" : "binom.test",
         "package" : "stats",
         "desc" : " Performs an exact test of a simple null hypothesis about the probability of success in a Bernoulli experiment. ",
         "title" : "Exact Binomial Test"
      },
      {
         "title" : "The Binomial Distribution",
         "package" : "stats",
         "desc" : " Density, distribution function, quantile function and random generation for the binomial distribution with parameters size and prob. This is conventionally interpreted as the number of successes in size trials. ",
         "name" : "Binomial"
      },
      {
         "name" : "biplot.princomp",
         "title" : " Biplot for Principal Components ",
         "desc" : " Produces a biplot (in the strict sense) from the output of princomp or prcomp ",
         "package" : "stats"
      },
      {
         "name" : "biplot",
         "package" : "stats",
         "desc" : " Plot a biplot on the current graphics device. ",
         "title" : "Biplot of Multivariate Data"
      },
      {
         "title" : "Probability of coincidences",
         "desc" : " Computes answers to a generalised birthday paradox problem. pbirthday computes the probability of a coincidence and qbirthday computes the smallest number of observations needed to have at least a specified probability of coincidence. ",
         "package" : "stats",
         "name" : "birthday"
      },
      {
         "title" : "Box-Pierce and Ljung-Box Tests",
         "desc" : " Compute the Box--Pierce or Ljung--Box test statistic for examining the null hypothesis of independence in a given time series. These are sometimes known as portmanteau tests. ",
         "package" : "stats",
         "name" : "Box.test"
      },
      {
         "title" : "Canonical Correlations",
         "desc" : " Compute the canonical correlations between two data matrices. ",
         "package" : "stats",
         "name" : "cancor"
      },
      {
         "title" : "Case and Variable Names of Fitted Models",
         "desc" : " Simple utilities returning (non-missing) case names, and (non-eliminated) variable names. ",
         "package" : "stats",
         "name" : "case+variable.names"
      },
      {
         "name" : "Cauchy",
         "title" : "The Cauchy Distribution",
         "package" : "stats",
         "desc" : " Density, distribution function, quantile function and random generation for the Cauchy distribution with location parameter location and scale parameter scale. "
      },
      {
         "name" : ".checkMFClasses",
         "title" : "Functions to Check the Type of Variables passed to Model Frames",
         "desc" : " .checkMFClasses checks if the variables used in a predict method agree in type with those used for fitting. .MFclass categorizes variables for this purpose. ",
         "package" : "stats"
      },
      {
         "name" : "chisq.test",
         "desc" : " chisq.test performs chi-squared contingency table tests and goodness-of-fit tests. ",
         "package" : "stats",
         "title" : "Pearson's Chi-squared Test for Count Data"
      },
      {
         "name" : "Chisquare",
         "title" : "The (non-central) Chi-Squared Distribution",
         "desc" : " Density, distribution function, quantile function and random generation for the chi-squared (\\\\chi^2chi^2) distribution with df degrees of freedom and optional non-centrality parameter ncp. ",
         "package" : "stats"
      },
      {
         "name" : "cmdscale",
         "package" : "stats",
         "desc" : " Classical multidimensional scaling of a data matrix. Also known as principal coordinates analysis (Gower, 1966). ",
         "title" : "Classical (Metric) Multidimensional Scaling"
      },
      {
         "desc" : " coef is a generic function which extracts model coefficients from objects returned by modeling functions. coefficients is an alias for it. ",
         "package" : "stats",
         "title" : "Extract Model Coefficients",
         "name" : "coef"
      },
      {
         "title" : "Find Complete Cases",
         "desc" : " Return a logical vector indicating which cases are complete, i.e., have no missing values. ",
         "package" : "stats",
         "name" : "complete.cases"
      },
      {
         "name" : "confint",
         "title" : "Confidence Intervals for Model Parameters",
         "desc" : " Computes confidence intervals for one or more parameters in a fitted model. There is a default and a method for objects inheriting from class \"lm\". ",
         "package" : "stats"
      },
      {
         "name" : "constrOptim",
         "desc" : " Minimise a function subject to linear inequality constraints using an adaptive barrier algorithm. ",
         "package" : "stats",
         "title" : "Linearly Constrained Optimization"
      },
      {
         "desc" : " Return a matrix of contrasts. ",
         "package" : "stats",
         "title" : "(Possibly Sparse) Contrast Matrices",
         "name" : "contrast"
      },
      {
         "title" : "Get and Set Contrast Matrices",
         "package" : "stats",
         "desc" : " Set and view the contrasts associated with a factor. ",
         "name" : "contrasts"
      },
      {
         "package" : "stats",
         "desc" : " Use the Fast Fourier Transform to compute the several kinds of convolutions of two sequences. ",
         "title" : "Convolution of Sequences via FFT",
         "name" : "convolve"
      },
      {
         "name" : "cophenetic",
         "title" : "Cophenetic Distances for a Hierarchical Clustering",
         "package" : "stats",
         "desc" : " Computes the cophenetic distances for a hierarchical clustering. "
      },
      {
         "title" : "Correlation, Variance and Covariance (Matrices)",
         "package" : "stats",
         "desc" : " var, cov and cor compute the variance of x and the covariance or correlation of x and y if these are vectors. If x and y are matrices then the covariances (or correlations) between the columns of x and the columns of y are computed. cov2cor scales a covariance matrix into the corresponding correlation matrix efficiently. ",
         "name" : "cor"
      },
      {
         "package" : "stats",
         "desc" : " Test for association between paired samples, using one of Pearson's product moment correlation coefficient, Kendall's \\\\tautau or Spearman's \\\\rhorho. ",
         "title" : "Test for Association/Correlation Between Paired Samples",
         "name" : "cor.test"
      },
      {
         "title" : "Weighted Covariance Matrices",
         "desc" : " Returns a list containing estimates of the weighted covariance matrix and the mean of the data, and optionally of the (weighted) correlation matrix.",
         "package" : "stats",
         "name" : "cov.wt"
      },
      {
         "title" : " Plot Cumulative Periodogram ",
         "package" : "stats",
         "desc" : " Plots a cumulative periodogram. ",
         "name" : "cpgram"
      },
      {
         "name" : "cutree",
         "title" : "Cut a Tree into Groups of Data",
         "package" : "stats",
         "desc" : " Cuts a tree, e.g., as resulting from hclust, into several groups either by specifying the desired number(s) of groups or the cut height(s). "
      },
      {
         "name" : "decompose",
         "desc" : " Decompose a time series into seasonal, trend and irregular components using moving averages. Deals with additive or multiplicative seasonal component. ",
         "package" : "stats",
         "title" : " Classical Seasonal Decomposition by Moving Averages "
      },
      {
         "title" : "Modify Terms Objects",
         "package" : "stats",
         "desc" : " delete.response returns a terms object for the same model but with no response variable. drop.terms removes variables from the right-hand side of the model. There is also a \"[.terms\" method to perform the same function (with keep.response = TRUE). reformulate creates a formula from a character vector. ",
         "name" : "delete.response"
      },
      {
         "name" : "dendrapply",
         "desc" : " Apply function FUN to each node of a dendrogram recursively. When y <- dendrapply(x, fn), then y is a dendrogram of the same graph structure as x and for each node, y.node[j] <- FUN( x.node[j], ...) (where y.node[j] is an (invalid!) notation for the j-th node of y. ",
         "package" : "stats",
         "title" : "Apply a Function to All Nodes of a Dendrogram"
      },
      {
         "title" : "General Tree Structures",
         "package" : "stats",
         "desc" : " Class \"dendrogram\" provides general functions for handling tree-like structures. It is intended as a replacement for similar functions in hierarchical clustering and classification/regression trees, such that all of these can use the same engine for plotting or cutting trees. ",
         "name" : "dendrogram"
      },
      {
         "package" : "stats",
         "desc" : " The (S3) generic function density computes kernel density estimates. Its default method does so with the given kernel and bandwidth for univariate observations. ",
         "title" : "Kernel Density Estimation",
         "name" : "density"
      },
      {
         "name" : "deriv",
         "desc" : " Compute derivatives of simple expressions, symbolically. ",
         "package" : "stats",
         "title" : "Symbolic and Algorithmic Derivatives of Simple Expressions"
      },
      {
         "name" : "deviance",
         "title" : "Model Deviance",
         "package" : "stats",
         "desc" : " Returns the deviance of a fitted model object. "
      },
      {
         "package" : "stats",
         "desc" : " Returns the residual degrees-of-freedom extracted from a fitted model object. ",
         "title" : "Residual Degrees-of-Freedom",
         "name" : "df.residual"
      },
      {
         "name" : "diffinv",
         "title" : "Discrete Integration: Inverse of Differencing",
         "desc" : " Computes the inverse function of the lagged differences function diff. ",
         "package" : "stats"
      },
      {
         "name" : "dist",
         "package" : "stats",
         "desc" : " This function computes and returns the distance matrix computed by using the specified distance measure to compute the distances between the rows of a data matrix. ",
         "title" : "Distance Matrix Computation"
      },
      {
         "title" : "Distributions in the stats package",
         "desc" : " Density, cumulative distribution function, quantile function and random variate generation for many standard probability distributions are available in the stats package. ",
         "package" : "stats",
         "name" : "Distributions"
      },
      {
         "package" : "stats",
         "desc" : " This extracts coefficients in terms of the original levels of the coefficients rather than the coded variables. ",
         "title" : "Extract Coefficients in Original Coding",
         "name" : "dummy.coef"
      },
      {
         "package" : "stats",
         "desc" : " Compute an empirical cumulative distribution function, with several methods for plotting, printing and computing with such an ecdf object. ",
         "title" : "Empirical Cumulative Distribution Function",
         "name" : "ecdf"
      },
      {
         "title" : "Compute Efficiencies of Multistratum Analysis of Variance",
         "desc" : " Computes the efficiencies of fixed-effect terms in an analysis of variance model with multiple strata. ",
         "package" : "stats",
         "name" : "eff.aovlist"
      },
      {
         "name" : "effects",
         "desc" : " Returns (orthogonal) effects from a fitted model, usually a linear model. This is a generic function, but currently only has a methods for objects inheriting from classes \"lm\" and \"glm\". ",
         "package" : "stats",
         "title" : "Effects from Fitted Model"
      },
      {
         "title" : "Embedding a Time Series",
         "package" : "stats",
         "desc" : " Embeds the time series x into a low-dimensional Euclidean space. ",
         "name" : "embed"
      },
      {
         "title" : "Add new variables to a model frame",
         "package" : "stats",
         "desc" : " Evaluates new variables as if they had been part of the formula of the specified model. This ensures that the same na.action and subset arguments are applied and allows, for example, x to be recovered for a model using sin(x) as a predictor. ",
         "name" : "expand.model.frame"
      },
      {
         "name" : "Exponential",
         "title" : "The Exponential Distribution",
         "package" : "stats",
         "desc" : " Density, distribution function, quantile function and random generation for the exponential distribution with rate rate (i.e., mean 1/rate). "
      },
      {
         "name" : "extractAIC",
         "package" : "stats",
         "desc" : " Computes the (generalized) Akaike An Information Criterion for a fitted parametric model. ",
         "title" : "Extract AIC from a Fitted Model"
      },
      {
         "name" : "factanal",
         "title" : "Factor Analysis",
         "package" : "stats",
         "desc" : " Perform maximum-likelihood factor analysis on a covariance matrix or data matrix. "
      },
      {
         "package" : "stats",
         "desc" : " add.scope and drop.scope compute those terms that can be individually added to or dropped from a model while respecting the hierarchy of terms. ",
         "title" : "Compute Allowed Changes in Adding to or Dropping from a Formula",
         "name" : "factor.scope"
      },
      {
         "desc" : " Family objects provide a convenient way to specify the details of the models used by functions such as glm. See the documentation for glm for the details on how such model fitting takes place. ",
         "package" : "stats",
         "title" : "Family Objects for Models",
         "name" : "family"
      },
      {
         "name" : "FDist",
         "title" : "The F Distribution",
         "package" : "stats",
         "desc" : " Density, distribution function, quantile function and random generation for the F distribution with df1 and df2 degrees of freedom (and optional non-centrality parameter ncp). "
      },
      {
         "desc" : " Computes the Discrete Fourier Transform (DFT) of an array with a fast algorithm, the Fast Fourier Transform (FFT). ",
         "package" : "stats",
         "title" : "Fast Discrete Fourier Transform (FFT)",
         "name" : "fft"
      },
      {
         "name" : "filter",
         "package" : "stats",
         "desc" : " Applies linear filtering to a univariate time series or to each series separately of a multivariate time series. ",
         "title" : "Linear Filtering on a Time Series"
      },
      {
         "name" : "fisher.test",
         "desc" : " Performs Fisher's exact test for testing the null of independence of rows and columns in a contingency table with fixed marginals. ",
         "package" : "stats",
         "title" : "Fisher's Exact Test for Count Data"
      },
      {
         "name" : "fitted",
         "desc" : " fitted is a generic function which extracts fitted values from objects returned by modeling functions. fitted.values is an alias for it. All object classes which are returned by model fitting functions should provide a fitted method. (Note that the generic is fitted and not fitted.values.) Methods can make use of napredict methods to compensate for the omission of missing values. The default and nls methods do. ",
         "package" : "stats",
         "title" : "Extract Model Fitted Values"
      },
      {
         "desc" : " Returns Tukey's five number summary (minimum, lower-hinge, median, upper-hinge, maximum) for the input data. ",
         "package" : "stats",
         "title" : "Tukey Five-Number Summaries",
         "name" : "fivenum"
      },
      {
         "name" : "fligner.test",
         "title" : "Fligner-Killeen Test of Homogeneity of Variances",
         "package" : "stats",
         "desc" : " Performs a Fligner-Killeen (median) test of the null that the variances in each of the groups (samples) are the same. "
      },
      {
         "package" : "stats",
         "desc" : " Returns the model used to fit object. ",
         "title" : "Extract Model Formula from nls Object",
         "name" : "formula.nls"
      },
      {
         "package" : "stats",
         "desc" : " The generic function formula and its specific methods provide a way of extracting formulae which have been included in other objects. as.formula is almost identical, additionally preserving attributes when object already inherits from \"formula\". ",
         "title" : "Model Formulae",
         "name" : "formula"
      },
      {
         "name" : "friedman.test",
         "desc" : " Performs a Friedman rank sum test with unreplicated blocked data. ",
         "package" : "stats",
         "title" : "Friedman Rank Sum Test"
      },
      {
         "name" : "ftable.formula",
         "package" : "stats",
         "desc" : "Produce or manipulate a flat contingency table using formula notation.",
         "title" : "Formula Notation for Flat Contingency Tables"
      },
      {
         "name" : "ftable",
         "title" : "Flat Contingency Tables",
         "package" : "stats",
         "desc" : "Create flat contingency tables."
      },
      {
         "name" : "GammaDist",
         "package" : "stats",
         "desc" : " Density, distribution function, quantile function and random generation for the Gamma distribution with parameters shape and scale. ",
         "title" : "The Gamma Distribution"
      },
      {
         "name" : "Geometric",
         "title" : "The Geometric Distribution",
         "package" : "stats",
         "desc" : " Density, distribution function, quantile function and random generation for the geometric distribution with parameter prob. "
      },
      {
         "name" : "getInitial",
         "desc" : " This function evaluates initial parameter estimates for a nonlinear regression model. If data is a parameterized data frame or pframe object, its parameters attribute is returned. Otherwise the object is examined to see if it contains a call to a selfStart object whose initial attribute can be evaluated. ",
         "package" : "stats",
         "title" : "Get Initial Parameter Estimates"
      },
      {
         "name" : "glm.control",
         "title" : "Auxiliary for Controlling GLM Fitting",
         "package" : "stats",
         "desc" : " Auxiliary function for glm fitting. Typically only used internally by glm.fit, but may be used to construct a control argument to either function. "
      },
      {
         "package" : "stats",
         "desc" : " glm is used to fit generalized linear models, specified by giving a symbolic description of the linear predictor and a description of the error distribution. ",
         "title" : "Fitting Generalized Linear Models",
         "name" : "glm"
      },
      {
         "name" : "glm.summaries",
         "title" : "Accessing Generalized Linear Model Fits",
         "desc" : " These functions are all methods for class glm or summary.glm objects. ",
         "package" : "stats"
      },
      {
         "name" : "hclust",
         "package" : "stats",
         "desc" : " Hierarchical cluster analysis on a set of dissimilarities and methods for analyzing it. ",
         "title" : "Hierarchical Clustering"
      },
      {
         "name" : "heatmap",
         "title" : " Draw a Heat Map ",
         "package" : "stats",
         "desc" : " A heat map is a false color image (basically image(t(x))) with a dendrogram added to the left side and to the top. Typically, reordering of the rows and columns according to some set of values (row or column means) within the restrictions imposed by the dendrogram is carried out. "
      },
      {
         "name" : "HoltWinters",
         "title" : "Holt-Winters Filtering",
         "desc" : " Computes Holt-Winters Filtering of a given time series. Unknown parameters are determined by minimizing the squared prediction error. ",
         "package" : "stats"
      },
      {
         "name" : "Hypergeometric",
         "title" : "The Hypergeometric Distribution",
         "desc" : " Density, distribution function, quantile function and random generation for the hypergeometric distribution. ",
         "package" : "stats"
      },
      {
         "name" : "identify.hclust",
         "desc" : " identify.hclust reads the position of the graphics pointer when the (first) mouse button is pressed. It then cuts the tree at the vertical position of the pointer and highlights the cluster containing the horizontal position of the pointer. Optionally a function is applied to the index of data points contained in the cluster. ",
         "package" : "stats",
         "title" : "Identify Clusters in a Dendrogram"
      },
      {
         "desc" : " This suite of functions can be used to compute some of the regression (leave-one-out deletion) diagnostics for linear and generalized linear models discussed in Belsley, Kuh and Welsch (1980), Cook and Weisberg (1982), etc. ",
         "package" : "stats",
         "title" : "Regression Deletion Diagnostics",
         "name" : "influence.measures"
      },
      {
         "desc" : " Adaptive quadrature of functions of one variable over a finite or infinite interval. ",
         "package" : "stats",
         "title" : "Integration of One-Dimensional Functions",
         "name" : "integrate"
      },
      {
         "name" : "interaction.plot",
         "title" : "Two-way Interaction Plot",
         "desc" : " Plots the mean (or other summary) of the response for two-way combinations of factors, thereby illustrating possible interactions. ",
         "package" : "stats"
      },
      {
         "title" : "The Interquartile Range",
         "desc" : "computes interquartile range of the x values.",
         "package" : "stats",
         "name" : "IQR"
      },
      {
         "name" : "is.empty.model",
         "package" : "stats",
         "desc" : " 's formula notation allows models with no intercept and no predictors. These require special handling internally. is.empty.model() checks whether an object describes an empty model. ",
         "title" : "Test if a Model's Formula is Empty"
      },
      {
         "name" : "isoreg",
         "package" : "stats",
         "desc" : " Compute the isotonic (monotonely increasing nonparametric) least squares regression which is piecewise constant. ",
         "title" : "Isotonic / Monotone Regression"
      },
      {
         "name" : "KalmanLike",
         "package" : "stats",
         "desc" : " Use Kalman Filtering to find the (Gaussian) log-likelihood, or for forecasting or smoothing. ",
         "title" : "Kalman Filtering"
      },
      {
         "name" : "kernapply",
         "package" : "stats",
         "desc" : " kernapply computes the convolution between an input sequence and a specific kernel. ",
         "title" : "Apply Smoothing Kernel"
      },
      {
         "name" : "kernel",
         "title" : "Smoothing Kernel Objects",
         "package" : "stats",
         "desc" : " The \"tskernel\" class is designed to represent discrete symmetric normalized smoothing kernels. These kernels can be used to smooth vectors, matrices, or time series objects. There are print, plot and [ methods for these kernel objects. "
      },
      {
         "name" : "kmeans",
         "title" : " K-Means Clustering ",
         "package" : "stats",
         "desc" : " Perform k-means clustering on a data matrix. "
      },
      {
         "title" : "Kruskal-Wallis Rank Sum Test",
         "package" : "stats",
         "desc" : " Performs a Kruskal-Wallis rank sum test. ",
         "name" : "kruskal.test"
      },
      {
         "package" : "stats",
         "desc" : " Perform a one- or two-sample Kolmogorov-Smirnov test. ",
         "title" : "Kolmogorov-Smirnov Tests",
         "name" : "ks.test"
      },
      {
         "name" : "ksmooth",
         "package" : "stats",
         "desc" : " The Nadaraya--Watson kernel regression estimate. ",
         "title" : "Kernel Regression Smoother"
      },
      {
         "name" : "lag.plot",
         "title" : "Time Series Lag Plots",
         "package" : "stats",
         "desc" : " Plot time series against lagged versions of themselves. Helps visualizing auto-dependence even when auto-correlations vanish. "
      },
      {
         "package" : "stats",
         "desc" : " Compute a lagged version of a time series, shifting the time base back by a given number of observations. lag is a generic function; this page documents its default method. ",
         "title" : "Lag a Time Series",
         "name" : "lag"
      },
      {
         "name" : "line",
         "title" : "Robust Line Fitting",
         "package" : "stats",
         "desc" : " Fit a line robustly as recommended in Exploratory Data Analysis. "
      },
      {
         "name" : "listof",
         "title" : "A Class for Lists of (Parts of) Model Fits",
         "desc" : " Class \"listof\" is used by aov and the \"lm\" method of alias for lists of model fits or parts thereof. It is simply a list with an assigned class to control the way methods, especially printing, act on it. It has a coef method in this package (which returns an object of this class), and [ and print methods in package base. ",
         "package" : "stats"
      },
      {
         "package" : "stats",
         "desc" : " This function provides the basic quantities which are used in forming a wide variety of diagnostics for checking the quality of regression fits. ",
         "title" : "Regression Diagnostics",
         "name" : "lm.influence"
      },
      {
         "name" : "lm",
         "package" : "stats",
         "desc" : " lm is used to fit linear models. It can be used to carry out regression, single stratum analysis of variance and analysis of covariance (although aov may provide a more convenient interface for these). ",
         "title" : "Fitting Linear Models"
      },
      {
         "name" : "lm.summaries",
         "desc" : " All these functions are methods for class \"lm\" objects. ",
         "package" : "stats",
         "title" : "Accessing Linear Model Fits"
      },
      {
         "name" : "lm.fit",
         "package" : "stats",
         "desc" : " These are the basic computing engines called by lm used to fit linear models. These should usually not be used directly unless by experienced users. .lm.fit() is bare bone wrapper to the innermost QR-based C code, on which glm.fit and lsfit are based as well, for even more experienced users. ",
         "title" : "Fitter Functions for Linear Models"
      },
      {
         "name" : "loadings",
         "title" : "Print Loadings in Factor Analysis",
         "desc" : " Extract or print loadings in factor analysis (or principal components analysis). ",
         "package" : "stats"
      },
      {
         "desc" : " Set control parameters for loess fits. ",
         "package" : "stats",
         "title" : "Set Parameters for Loess",
         "name" : "loess.control"
      },
      {
         "package" : "stats",
         "desc" : " Fit a polynomial surface determined by one or more numerical predictors, using local fitting. ",
         "title" : "Local Polynomial Regression Fitting",
         "name" : "loess"
      },
      {
         "name" : "Logistic",
         "desc" : " Density, distribution function, quantile function and random generation for the logistic distribution with parameters location and scale. ",
         "package" : "stats",
         "title" : "The Logistic Distribution"
      },
      {
         "name" : "logLik",
         "desc" : " This function is generic; method functions can be written to handle specific classes of objects. Classes which have methods for this function include: \"glm\", \"lm\", \"nls\" and \"Arima\". Packages contain methods for other classes, such as \"fitdistr\", \"negbin\" and \"polr\" in package \\\\href{https://CRAN.R-project.org/package=#1}{\\\\pkg{#1}}MASShttps://CRAN.R-project.org/package=MASSMASS, \"multinom\" in package \\\\href{https://CRAN.R-project.org/package=#1}{\\\\pkg{#1}}nnethttps://CRAN.R-project.org/package=nnetnnet and \"gls\", \"gnls\" \"lme\" and others in package \\\\href{https://CRAN.R-project.org/package=#1}{\\\\pkg{#1}}nlmehttps://CRAN.R-project.org/package=nlmenlme. ",
         "package" : "stats",
         "title" : "Extract Log-Likelihood"
      },
      {
         "name" : "loglin",
         "title" : "Fitting Log-Linear Models",
         "desc" : " loglin is used to fit log-linear models to multidimensional contingency tables by Iterative Proportional Fitting. ",
         "package" : "stats"
      },
      {
         "package" : "stats",
         "desc" : " Density, distribution function, quantile function and random generation for the log normal distribution whose logarithm has mean equal to meanlog and standard deviation equal to sdlog. ",
         "title" : "The Log Normal Distribution",
         "name" : "Lognormal"
      },
      {
         "name" : "lowess",
         "package" : "stats",
         "desc" : " This function performs the computations for the LOWESS smoother which uses locally-weighted polynomial regression (see the references). ",
         "title" : "Scatter Plot Smoothing"
      },
      {
         "name" : "ls.diag",
         "title" : "Compute Diagnostics for lsfit Regression Results",
         "package" : "stats",
         "desc" : " Computes basic statistics, including standard errors, t- and p-values for the regression coefficients. "
      },
      {
         "name" : "ls.print",
         "desc" : " Computes basic statistics, including standard errors, t- and p-values for the regression coefficients and prints them if print.it is TRUE. ",
         "package" : "stats",
         "title" : "Print lsfit Regression Results"
      },
      {
         "package" : "stats",
         "desc" : " The least squares estimate of \\\\betab in the model \\\\bold{Y} = \\\\bold{X \\\\beta} + \\\\bold{\\\\epsilon}y = X b + e is found. ",
         "title" : "Find the Least Squares Fit",
         "name" : "lsfit"
      },
      {
         "name" : "mad",
         "title" : "Median Absolute Deviation",
         "package" : "stats",
         "desc" : " Compute the median absolute deviation, i.e., the (lo-/hi-) median of the absolute deviations from the median, and (by default) adjust by a factor for asymptotically normal consistency. "
      },
      {
         "package" : "stats",
         "desc" : " Returns the squared Mahalanobis distance of all rows in x and the vector \\\\mumu = center with respect to \\\\SigmaSigma = cov. This is (for vector x) defined as D^2 = (x - \\\\mu)' \\\\Sigma^{-1} (x - \\\\mu)D^2 = (x - \\\\mu)' \\\\Sigma^-1 (x - \\\\mu) ",
         "title" : "Mahalanobis Distance",
         "name" : "mahalanobis"
      },
      {
         "name" : "make.link",
         "package" : "stats",
         "desc" : " This function is used with the family functions in glm(). Given the name of a link, it returns a link function, an inverse link function, the derivative d\\\\mu / d\\\\etadmu/deta and a function for domain checking. ",
         "title" : "Create a Link for GLM Families"
      },
      {
         "package" : "stats",
         "desc" : " A utility to help model.frame.default create the right matrices when predicting from models with terms like (univariate) poly or ns. ",
         "title" : "Utility Function for Safe Prediction",
         "name" : "makepredictcall"
      },
      {
         "name" : "manova",
         "package" : "stats",
         "desc" : " A class for the multivariate analysis of variance. ",
         "title" : "Multivariate Analysis of Variance"
      },
      {
         "name" : "mantelhaen.test",
         "title" : "Cochran-Mantel-Haenszel Chi-Squared Test for Count Data",
         "package" : "stats",
         "desc" : " Performs a Cochran-Mantel-Haenszel chi-squared test of the null that two nominal variables are conditionally independent in each stratum, assuming that there is no three-way interaction. "
      },
      {
         "name" : "mauchly.test",
         "desc" : " Tests whether a Wishart-distributed covariance matrix (or transformation thereof) is proportional to a given matrix. ",
         "package" : "stats",
         "title" : "Mauchly's Test of Sphericity"
      },
      {
         "name" : "mcnemar.test",
         "desc" : " Performs McNemar's chi-squared test for symmetry of rows and columns in a two-dimensional contingency table. ",
         "package" : "stats",
         "title" : "McNemar's Chi-squared Test for Count Data"
      },
      {
         "name" : "median",
         "title" : "Median Value",
         "package" : "stats",
         "desc" : " Compute the sample median. "
      },
      {
         "name" : "medpolish",
         "desc" : " Fits an additive model using Tukey's median polish procedure. ",
         "package" : "stats",
         "title" : "Median Polish of a Matrix"
      },
      {
         "title" : "Extract Components from a Model Frame",
         "package" : "stats",
         "desc" : "Returns the response, offset, subset, weights or other special components of a model frame passed as optional arguments to model.frame. ",
         "name" : "model.extract"
      },
      {
         "name" : "model.frame",
         "title" : "Extracting the Model Frame from a Formula or Fit",
         "desc" : " model.frame (a generic function) and its methods return a data.frame with the variables needed to use formula and any arguments. ",
         "package" : "stats"
      },
      {
         "name" : "model.matrix",
         "title" : "Construct Design Matrices",
         "package" : "stats",
         "desc" : " model.matrix creates a design (or model) matrix. "
      },
      {
         "name" : "model.tables",
         "package" : "stats",
         "desc" : " Computes summary tables for model fits, especially complex aov fits. ",
         "title" : "Compute Tables of Results from an Aov Model Fit"
      },
      {
         "title" : " Plot a Seasonal or other Subseries from a Time Series ",
         "package" : "stats",
         "desc" : " These functions plot seasonal (or other) subseries of a time series. For each season (or other category), a time series is plotted. ",
         "name" : "monthplot"
      },
      {
         "name" : "mood.test",
         "package" : "stats",
         "desc" : " Performs Mood's two-sample test for a difference in scale parameters. ",
         "title" : "Mood Two-Sample Test of Scale"
      },
      {
         "name" : "Multinom",
         "title" : "The Multinomial Distribution",
         "package" : "stats",
         "desc" : " Generate multinomially distributed random number vectors and compute multinomial probabilities. "
      },
      {
         "name" : "na.action",
         "package" : "stats",
         "desc" : " Extract information on the NA action used to create an object. ",
         "title" : "NA Action"
      },
      {
         "title" : "Find Longest Contiguous Stretch of non-NAs",
         "package" : "stats",
         "desc" : " Find the longest consecutive stretch of non-missing values in a time series object. (In the event of a tie, the first such stretch.) ",
         "name" : "na.contiguous"
      },
      {
         "name" : "na.fail",
         "package" : "stats",
         "desc" : " These generic functions are useful for dealing with NAs in e.g., data frames. na.fail returns the object if it does not contain any missing values, and signals an error otherwise. na.omit returns the object with incomplete cases removed. na.pass returns the object unchanged. ",
         "title" : "Handle Missing Values in Objects"
      },
      {
         "title" : " Adjust for Missing Values ",
         "desc" : " Use missing value information to adjust residuals and predictions. ",
         "package" : "stats",
         "name" : "naresid"
      },
      {
         "name" : "naprint",
         "package" : "stats",
         "desc" : " Use missing value information to report the effects of an na.action. ",
         "title" : " Adjust for Missing Values "
      },
      {
         "name" : "NegBinomial",
         "title" : "The Negative Binomial Distribution",
         "desc" : " Density, distribution function, quantile function and random generation for the negative binomial distribution with parameters size and prob. ",
         "package" : "stats"
      },
      {
         "name" : "nextn",
         "package" : "stats",
         "desc" : " nextn returns the smallest integer, greater than or equal to n, which can be obtained as a product of powers of the values contained in factors. nextn is intended to be used to find a suitable length to zero-pad the argument of fft to so that the transform is computed quickly. The default value for factors ensures this. ",
         "title" : "Highly Composite Numbers"
      },
      {
         "package" : "stats",
         "desc" : " This function carries out a minimization of the function f using a Newton-type algorithm. See the references for details. ",
         "title" : "Non-Linear Minimization",
         "name" : "nlm"
      },
      {
         "name" : "nlminb",
         "title" : "Optimization using PORT routines ",
         "desc" : " Unconstrained and box-constrained optimization using PORT routines. For historical compatibility. ",
         "package" : "stats"
      },
      {
         "name" : "nls.control",
         "title" : "Control the Iterations in nls",
         "package" : "stats",
         "desc" : " Allow the user to set some characteristics of the nls nonlinear least squares algorithm. "
      },
      {
         "title" : "Nonlinear Least Squares",
         "desc" : " Determine the nonlinear (weighted) least-squares estimates of the parameters of a nonlinear model. ",
         "package" : "stats",
         "name" : "nls"
      },
      {
         "name" : "NLSstAsymptotic",
         "desc" : " Fits the asymptotic regression model, in the form b0 + b1*(1-exp(-exp(lrc) * x) to the xy data. This can be used as a building block in determining starting estimates for more complicated models. ",
         "package" : "stats",
         "title" : "Fit the Asymptotic Regression Model"
      },
      {
         "name" : "NLSstClosestX",
         "package" : "stats",
         "desc" : " Use inverse linear interpolation to approximate the x value at which the function represented by xy is equal to yval. ",
         "title" : "Inverse Interpolation"
      },
      {
         "name" : "NLSstLfAsymptote",
         "desc" : " Provide an initial guess at the horizontal asymptote on the left side (i.e., small values of x) of the graph of y versus x from the xy object. Primarily used within initial functions for self-starting nonlinear regression models. ",
         "package" : "stats",
         "title" : "Horizontal Asymptote on the Left Side"
      },
      {
         "title" : "Horizontal Asymptote on the Right Side",
         "package" : "stats",
         "desc" : " Provide an initial guess at the horizontal asymptote on the right side (i.e., large values of x) of the graph of y versus x from the xy object. Primarily used within initial functions for self-starting nonlinear regression models. ",
         "name" : "NLSstRtAsymptote"
      },
      {
         "package" : "stats",
         "desc" : " Extract the number of observations from a model fit. This is principally intended to be used in computing BIC (see AIC). ",
         "title" : " Extract the Number of Observations from a Fit. ",
         "name" : "nobs"
      },
      {
         "name" : "Normal",
         "desc" : " Density, distribution function, quantile function and random generation for the normal distribution with mean equal to mean and standard deviation equal to sd. ",
         "package" : "stats",
         "title" : "The Normal Distribution"
      },
      {
         "title" : "Evaluate Derivatives Numerically",
         "package" : "stats",
         "desc" : " numericDeriv numerically evaluates the gradient of an expression. ",
         "name" : "numericDeriv"
      },
      {
         "title" : "Include an Offset in a Model Formula",
         "package" : "stats",
         "desc" : " An offset is a term to be added to a linear predictor, such as in a generalised linear model, with known coefficient 1 rather than an estimated coefficient. ",
         "name" : "offset"
      },
      {
         "name" : "oneway.test",
         "package" : "stats",
         "desc" : " Test whether two or more samples from normal distributions have the same means. The variances are not necessarily assumed to be equal. ",
         "title" : "Test for Equal Means in a One-Way Layout"
      },
      {
         "name" : "optim",
         "title" : "General-purpose Optimization",
         "desc" : " General-purpose optimization based on Nelder--Mead, quasi-Newton and conjugate-gradient algorithms. It includes an option for box-constrained optimization and simulated annealing. ",
         "package" : "stats"
      },
      {
         "desc" : " The function optimize searches the interval from lower to upper for a minimum or maximum of the function f with respect to its first argument. optimise is an alias for optimize. ",
         "package" : "stats",
         "title" : "One Dimensional Optimization",
         "name" : "optimize"
      },
      {
         "name" : "order.dendrogram",
         "title" : "Ordering or Labels of the Leaves in a Dendrogram",
         "package" : "stats",
         "desc" : " Theses functions return the order (index) or the \"label\" attribute for the leaves in a dendrogram. These indices can then be used to access the appropriate components of any additional data. "
      },
      {
         "package" : "stats",
         "desc" : "Given a set of p-values, returns p-values adjusted using one of several methods.",
         "title" : "Adjust P-values for Multiple Comparisons",
         "name" : "p.adjust"
      },
      {
         "package" : "stats",
         "desc" : " Calculate pairwise comparisons between pairs of proportions with correction for multiple testing ",
         "title" : " Pairwise comparisons for proportions",
         "name" : "pairwise.prop.test"
      },
      {
         "package" : "stats",
         "desc" : " Calculate pairwise comparisons between group levels with corrections for multiple testing ",
         "title" : " Pairwise t tests",
         "name" : "pairwise.t.test"
      },
      {
         "name" : "pairwise.table",
         "package" : "stats",
         "desc" : " Creates table of p values for pairwise comparisons with corrections for multiple testing. ",
         "title" : "Tabulate p values for pairwise comparisons"
      },
      {
         "name" : "pairwise.wilcox.test",
         "title" : "Pairwise Wilcoxon Rank Sum Tests",
         "package" : "stats",
         "desc" : " Calculate pairwise comparisons between group levels with corrections for multiple testing. "
      },
      {
         "name" : "plot.acf",
         "title" : "Plot Autocovariance and Autocorrelation Functions",
         "desc" : " Plot method for objects of class \"acf\". ",
         "package" : "stats"
      },
      {
         "name" : "plot.density",
         "title" : "Plot Method for Kernel Density Estimation",
         "desc" : " The plot method for density objects. ",
         "package" : "stats"
      },
      {
         "desc" : " Produces a chart of the original time series along with the fitted values. Optionally, predicted values (and their confidence bounds) can also be plotted. ",
         "package" : "stats",
         "title" : "Plot function for HoltWinters objects",
         "name" : "plot.HoltWinters"
      },
      {
         "name" : "plot.isoreg",
         "package" : "stats",
         "desc" : " The plot and lines method for objects of class isoreg. ",
         "title" : "Plot Method for isoreg Objects"
      },
      {
         "name" : "plot.lm",
         "title" : "Plot Diagnostics for an lm Object",
         "package" : "stats",
         "desc" : " Six plots (selectable by which) are currently available: a plot of residuals against fitted values, a Scale-Location plot of \\\\sqrt{| residuals |}sqrt(| residuals |) against fitted values, a Normal Q-Q plot, a plot of Cook's distances versus row labels, a plot of residuals against leverages, and a plot of Cook's distances against leverage/(1-leverage). By default, the first three and 5 are provided. "
      },
      {
         "name" : "plot.ppr",
         "package" : "stats",
         "desc" : " Plot ridge functions for projection pursuit regression fit. ",
         "title" : " Plot Ridge Functions for Projection Pursuit Regression Fit "
      },
      {
         "desc" : " Displays a series of plots of the profile t function and interpolated confidence intervals for the parameters in a nonlinear regression model that has been fit with nls and profiled with profile.nls. ",
         "package" : "stats",
         "title" : "Plot a profile.nls Object",
         "name" : "plot.profile.nls"
      },
      {
         "name" : "plot.spec",
         "title" : "Plotting Spectral Densities",
         "desc" : " Plotting method for objects of class \"spec\". For multivariate time series it plots the marginal spectra of the series or pairs plots of the coherency and phase of the cross-spectra. ",
         "package" : "stats"
      },
      {
         "name" : "plot.stepfun",
         "package" : "stats",
         "desc" : " Method of the generic plot for stepfun objects and utility for plotting piecewise constant functions. ",
         "title" : "Plot Step Functions"
      },
      {
         "title" : "Plotting Time-Series Objects",
         "desc" : " Plotting method for objects inheriting from class \"ts\". ",
         "package" : "stats",
         "name" : "plot.ts"
      },
      {
         "name" : "Poisson",
         "title" : "The Poisson Distribution",
         "desc" : " Density, distribution function, quantile function and random generation for the Poisson distribution with parameter lambda. ",
         "package" : "stats"
      },
      {
         "name" : "poisson.test",
         "desc" : " Performs an exact test of a simple null hypothesis about the rate parameter in Poisson distribution, or for the ratio between two rate parameters. ",
         "package" : "stats",
         "title" : "Exact Poisson tests"
      },
      {
         "title" : "Compute Orthogonal Polynomials",
         "desc" : " Returns or evaluates orthogonal polynomials of degree 1 to degree over the specified set of points x: these are all orthogonal to the constant polynomial of degree 0. Alternatively, evaluate raw polynomials. ",
         "package" : "stats",
         "name" : "poly"
      },
      {
         "name" : "power.anova.test",
         "package" : "stats",
         "desc" : " Compute power of test or determine parameters to obtain target power. ",
         "title" : "Power Calculations for Balanced One-Way Analysis of Variance Tests"
      },
      {
         "title" : "Power Calculations for Two-Sample Test for Proportions",
         "desc" : " Compute the power of the two-sample test for proportions, or determine parameters to obtain a target power. ",
         "package" : "stats",
         "name" : "power.prop.test"
      },
      {
         "name" : "power",
         "title" : "Create a Power Link Object",
         "desc" : " Creates a link object based on the link function \\\\eta = \\\\mu ^ \\\\lambda. ",
         "package" : "stats"
      },
      {
         "title" : "Power calculations for one and two sample t tests",
         "package" : "stats",
         "desc" : " Compute the power of the one- or two- sample t test, or determine parameters to obtain a target power. ",
         "name" : "power.t.test"
      },
      {
         "name" : "PP.test",
         "title" : "Phillips-Perron Test for Unit Roots",
         "desc" : " Computes the Phillips-Perron test for the null hypothesis that x has a unit root against a stationary alternative. ",
         "package" : "stats"
      },
      {
         "name" : "ppoints",
         "title" : "Ordinates for Probability Plotting",
         "desc" : " Generates the sequence of probability points (1:m - a)/(m + (1-a)-a) where m is either n, if length(n)==1, or length(n). ",
         "package" : "stats"
      },
      {
         "name" : "ppr",
         "package" : "stats",
         "desc" : " Fit a projection pursuit regression model. ",
         "title" : "Projection Pursuit Regression"
      },
      {
         "package" : "stats",
         "desc" : " Performs a principal components analysis on the given data matrix and returns the results as an object of class prcomp.",
         "title" : "Principal Components Analysis",
         "name" : "prcomp"
      },
      {
         "name" : "predict.Arima",
         "title" : "Forecast from ARIMA fits",
         "package" : "stats",
         "desc" : " Forecast from models fitted by arima. "
      },
      {
         "name" : "predict.glm",
         "package" : "stats",
         "desc" : " Obtains predictions and optionally estimates standard errors of those predictions from a fitted generalized linear model object. ",
         "title" : "Predict Method for GLM Fits"
      },
      {
         "desc" : " Computes predictions and prediction intervals for models fitted by the Holt-Winters method. ",
         "package" : "stats",
         "title" : "Prediction Function for Fitted Holt-Winters Models",
         "name" : "predict.HoltWinters"
      },
      {
         "title" : "Predict method for Linear Model Fits",
         "desc" : " Predicted values based on linear model object. ",
         "package" : "stats",
         "name" : "predict.lm"
      },
      {
         "name" : "predict.loess",
         "desc" : " Predictions from a loess fit, optionally with standard errors. ",
         "package" : "stats",
         "title" : "Predict Loess Curve or Surface"
      },
      {
         "name" : "predict.nls",
         "title" : "Predicting from Nonlinear Least Squares Fits",
         "desc" : " predict.nls produces predicted values, obtained by evaluating the regression function in the frame newdata. If the logical se.fit is TRUE, standard errors of the predictions are calculated. If the numeric argument scale is set (with optional df), it is used as the residual standard deviation in the computation of the standard errors, otherwise this is extracted from the model fit. Setting intervals specifies computation of confidence or prediction (tolerance) intervals at the specified level. At present se.fit and interval are ignored. ",
         "package" : "stats"
      },
      {
         "name" : "predict",
         "desc" : " predict is a generic function for predictions from the results of various model fitting functions. The function invokes particular methods which depend on the class of the first argument. ",
         "package" : "stats",
         "title" : "Model Predictions"
      },
      {
         "name" : "predict.smooth.spline",
         "title" : "Predict from Smoothing Spline Fit",
         "package" : "stats",
         "desc" : " Predict a smoothing spline fit at new points, return the derivative if desired. The predicted fit is linear beyond the original data. "
      },
      {
         "name" : "preplot",
         "title" : "Pre-computations for a Plotting Object",
         "desc" : " Compute an object to be used for plots relating to the given model object. ",
         "package" : "stats"
      },
      {
         "name" : "princomp",
         "package" : "stats",
         "desc" : " princomp performs a principal components analysis on the given numeric data matrix and returns the results as an object of class princomp. ",
         "title" : "Principal Components Analysis"
      },
      {
         "name" : "print.power.htest",
         "package" : "stats",
         "desc" : " Printing objects of class \"htest\" or \"power.htest\", respectively, by simple print methods. ",
         "title" : "Print Methods for Hypothesis Tests and Power Calculation Objects"
      },
      {
         "title" : "Printing and Formatting of Time-Series Objects",
         "package" : "stats",
         "desc" : " Notably for calendar related time series objects, format and print methods showing years, months and or quarters respectively. ",
         "name" : "print.ts"
      },
      {
         "title" : "Print Coefficient Matrices",
         "package" : "stats",
         "desc" : " Utility function to be used in higher-level print methods, such as those for summary.lm, summary.glm and anova. The goal is to provide a flexible interface with smart defaults such that often, only x needs to be specified. ",
         "name" : "printCoefmat"
      },
      {
         "name" : "profile.nls",
         "desc" : " Investigates the profile log-likelihood function for a fitted model of class \"nls\". ",
         "package" : "stats",
         "title" : "Method for Profiling nls Objects"
      },
      {
         "name" : "profile",
         "title" : "Generic Function for Profiling Models",
         "package" : "stats",
         "desc" : " Investigates behavior of objective function near the solution represented by fitted. See documentation on method functions for further details. "
      },
      {
         "name" : "proj",
         "title" : "Projections of Models",
         "package" : "stats",
         "desc" : " proj returns a matrix or list of matrices giving the projections of the data onto the terms of a linear model. It is most frequently used for aov models. "
      },
      {
         "title" : "Test of Equal or Given Proportions",
         "package" : "stats",
         "desc" : " prop.test can be used for testing the null that the proportions (probabilities of success) in several groups are the same, or that they equal certain given values. ",
         "name" : "prop.test"
      },
      {
         "desc" : " Performs chi-squared test for trend in proportions, i.e., a test asymptotically optimal for local alternatives where the log odds vary in proportion with score. By default, score is chosen as the group numbers. ",
         "package" : "stats",
         "title" : "Test for trend in proportions",
         "name" : "prop.trend.test"
      },
      {
         "package" : "stats",
         "desc" : " qqnorm is a generic function the default method of which produces a normal QQ plot of the values in y. qqline adds a line to a theoretical, by default normal, quantile-quantile plot which passes through the probs quantiles, by default the first and third quartiles. qqplot produces a QQ plot of two datasets. Graphical parameters may be given as arguments to qqnorm, qqplot and qqline. ",
         "title" : "Quantile-Quantile Plots",
         "name" : "qqnorm"
      },
      {
         "title" : "Quade Test",
         "desc" : " Performs a Quade test with unreplicated blocked data. ",
         "package" : "stats",
         "name" : "quade.test"
      },
      {
         "title" : "Sample Quantiles",
         "desc" : " The generic function quantile produces sample quantiles corresponding to the given probabilities. The smallest observation corresponds to a probability of 0 and the largest to a probability of 1. ",
         "package" : "stats",
         "name" : "quantile"
      },
      {
         "name" : "r2dtable",
         "package" : "stats",
         "desc" : " Generate random 2-way tables with given marginals using Patefield's algorithm. ",
         "title" : "Random 2-way Tables with Given Marginals"
      },
      {
         "title" : "Manipulate Flat Contingency Tables",
         "desc" : "Read, write and coerce flat contingency tables.",
         "package" : "stats",
         "name" : "read.ftable"
      },
      {
         "name" : "rect.hclust",
         "title" : "Draw Rectangles Around Hierarchical Clusters",
         "desc" : " Draws rectangles around the branches of a dendrogram highlighting the corresponding clusters. First the dendrogram is cut at a certain level, then a rectangle is drawn around selected branches. ",
         "package" : "stats"
      },
      {
         "name" : "relevel",
         "package" : "stats",
         "desc" : " The levels of a factor are re-ordered so that the level specified by ref is first and the others are moved down. This is useful for contr.treatment contrasts which take the first level as the reference. ",
         "title" : "Reorder Levels of Factor"
      },
      {
         "name" : "reorder.dendrogram",
         "desc" : " A method for the generic function reorder. There are many different orderings of a dendrogram that are consistent with the structure imposed. This function takes a dendrogram and a vector of values and reorders the dendrogram in the order of the supplied vector, maintaining the constraints on the dendrogram. ",
         "package" : "stats",
         "title" : "Reorder a Dendrogram"
      },
      {
         "package" : "stats",
         "desc" : " reorder is a generic function. The \"default\" method treats its first argument as a categorical variable, and reorders its levels based on the values of a second variable, usually numeric. ",
         "title" : "Reorder Levels of a Factor",
         "name" : "reorder.default"
      },
      {
         "desc" : " Returns a vector or a list of the number of replicates for each term in the formula. ",
         "package" : "stats",
         "title" : "Number of Replications of Terms",
         "name" : "replications"
      },
      {
         "name" : "reshape",
         "title" : "Reshape Grouped Data",
         "desc" : " This function reshapes a data frame between wide format with repeated measurements in separate columns of the same record and long format with the repeated measurements in separate records. ",
         "package" : "stats"
      },
      {
         "title" : "Extract Model Residuals",
         "package" : "stats",
         "desc" : " residuals is a generic function which extracts model residuals from objects returned by modeling functions. The abbreviated form resid is an alias for residuals. It is intended to encourage users to access object components through an accessor function rather than by directly referencing an object slot. All object classes which are returned by model fitting functions should provide a residuals method. (Note that the method is for residuals and not resid.) Methods can make use of naresid methods to compensate for the omission of missing values. The default, nls and smooth.spline methods do. ",
         "name" : "residuals"
      },
      {
         "desc" : " Compute running medians of odd span. This is the most robust scatter plot smoothing possible. For efficiency (and historical reason), you can use one of two different algorithms giving identical results. ",
         "package" : "stats",
         "title" : "Running Medians -- Robust Scatter Plot Smoothing",
         "name" : "runmed"
      },
      {
         "package" : "stats",
         "desc" : " Generate n random matrices, distributed according to the Wishart distribution with parameters Sigma and df, W_p(\\\\Sigma, m),\\\\ m=\\\\code{df},\\\\ \\\\Sigma=\\\\code{Sigma}W_p(Sigma, df). ",
         "title" : "Random Wishart Distributed Matrices",
         "name" : "rWishart"
      },
      {
         "name" : "scatter.smooth",
         "desc" : " Plot and add a smooth curve computed by loess to a scatter plot. ",
         "package" : "stats",
         "title" : "Scatter Plot with Smooth Curve Fitted by Loess"
      },
      {
         "name" : "screeplot",
         "title" : "Screeplots",
         "desc" : " screeplot.default plots the variances against the number of the principal component. This is also the plot method for classes \"princomp\" and \"prcomp\". ",
         "package" : "stats"
      },
      {
         "title" : "Standard Deviation",
         "desc" : " This function computes the standard deviation of the values in x. If na.rm is TRUE then missing values are removed before computation proceeds. ",
         "package" : "stats",
         "name" : "sd"
      },
      {
         "package" : "stats",
         "desc" : " Returns the standard errors for one or more contrasts in an aov object. ",
         "title" : "Standard Errors for Contrasts in Model Terms",
         "name" : "se.contrast"
      },
      {
         "title" : "Construct Self-starting Nonlinear Models",
         "desc" : " Construct self-starting nonlinear models. ",
         "package" : "stats",
         "name" : "selfStart"
      },
      {
         "name" : "setNames",
         "desc" : " This is a convenience function that sets the names on an object and returns the object. It is most useful at the end of a function definition where one is creating the object to be returned and would prefer not to store it under a name just so the names can be assigned. ",
         "package" : "stats",
         "title" : "Set the Names in an Object"
      },
      {
         "name" : "shapiro.test",
         "title" : "Shapiro-Wilk Normality Test",
         "desc" : " Performs the Shapiro-Wilk test of normality. ",
         "package" : "stats"
      },
      {
         "name" : "SignRank",
         "title" : "Distribution of the Wilcoxon Signed Rank Statistic",
         "package" : "stats",
         "desc" : " Density, distribution function, quantile function and random generation for the distribution of the Wilcoxon Signed Rank statistic obtained from a sample with size n. "
      },
      {
         "name" : "simulate",
         "title" : "Simulate Responses",
         "package" : "stats",
         "desc" : " Simulate one or more responses from the distribution corresponding to a fitted model object. "
      },
      {
         "name" : "smooth",
         "package" : "stats",
         "desc" : " Tukey's smoothers, 3RS3R, 3RSS, 3R, etc. ",
         "title" : "Tukey's (Running Median) Smoothing"
      },
      {
         "name" : "smooth.spline",
         "title" : "Fit a Smoothing Spline",
         "desc" : " Fits a cubic smoothing spline to the supplied data. ",
         "package" : "stats"
      },
      {
         "desc" : " Smooth end points of a vector y using subsequently smaller medians and Tukey's end point rule at the very end. (of odd span), ",
         "package" : "stats",
         "title" : "End Points Smoothing (for Running Medians)",
         "name" : "smoothEnds"
      },
      {
         "desc" : " This is a constructor function for the class of sortedXyData objects. These objects are mostly used in the initial function for a self-starting nonlinear regression model, which will be of the selfStart class. ",
         "package" : "stats",
         "title" : "Create a sortedXyData Object",
         "name" : "sortedXyData"
      },
      {
         "name" : "spec.ar",
         "title" : "Estimate Spectral Density of a Time Series from AR Fit",
         "desc" : " Fits an AR model to x (or uses the existing fit) and computes (and by default plots) the spectral density of the fitted model. ",
         "package" : "stats"
      },
      {
         "name" : "spec.pgram",
         "title" : "Estimate Spectral Density of a Time Series by a Smoothed Periodogram",
         "package" : "stats",
         "desc" : " spec.pgram calculates the periodogram using a fast Fourier transform, and optionally smooths the result with a series of modified Daniell smoothers (moving averages giving half weight to the end values). "
      },
      {
         "desc" : " Apply a cosine-bell taper to a time series. ",
         "package" : "stats",
         "title" : "Taper a Time Series by a Cosine Bell",
         "name" : "spec.taper"
      },
      {
         "name" : "spectrum",
         "title" : "Spectral Density Estimation",
         "desc" : " The spectrum function estimates the spectral density of a time series. ",
         "package" : "stats"
      },
      {
         "name" : "splinefun",
         "desc" : " Perform cubic (or Hermite) spline interpolation of given data points, returning either a list of points obtained by the interpolation or a function performing the interpolation. ",
         "package" : "stats",
         "title" : "Interpolating Splines"
      },
      {
         "name" : "SSasymp",
         "title" : "Self-Starting Nls Asymptotic Regression Model",
         "desc" : " This selfStart model evaluates the asymptotic regression function and its gradient. It has an initial attribute that will evaluate initial estimates of the parameters Asym, R0, and lrc for a given set of data. ",
         "package" : "stats"
      },
      {
         "name" : "SSasympOff",
         "desc" : " This selfStart model evaluates an alternative parametrization of the asymptotic regression function and the gradient with respect to those parameters. It has an initial attribute that creates initial estimates of the parameters Asym, lrc, and c0. ",
         "package" : "stats",
         "title" : "Self-Starting Nls Asymptotic Regression Model with an Offset"
      },
      {
         "title" : "Self-Starting Nls Asymptotic Regression Model through the Origin",
         "package" : "stats",
         "desc" : " This selfStart model evaluates the asymptotic regression function through the origin and its gradient. It has an initial attribute that will evaluate initial estimates of the parameters Asym and lrc for a given set of data. ",
         "name" : "SSasympOrig"
      },
      {
         "name" : "SSbiexp",
         "desc" : " This selfStart model evaluates the biexponential model function and its gradient. It has an initial attribute that creates initial estimates of the parameters A1, lrc1, A2, and lrc2. ",
         "package" : "stats",
         "title" : "Self-Starting Nls Biexponential model"
      },
      {
         "title" : "SSD Matrix and Estimated Variance Matrix in Multivariate Models",
         "desc" : " Functions to compute matrix of residual sums of squares and products, or the estimated variance matrix for multivariate linear models. ",
         "package" : "stats",
         "name" : "SSD"
      },
      {
         "name" : "SSfol",
         "title" : "Self-Starting Nls First-order Compartment Model",
         "package" : "stats",
         "desc" : " This selfStart model evaluates the first-order compartment function and its gradient. It has an initial attribute that creates initial estimates of the parameters lKe, lKa, and lCl. "
      },
      {
         "name" : "SSfpl",
         "package" : "stats",
         "desc" : " This selfStart model evaluates the four-parameter logistic function and its gradient. It has an initial attribute that will evaluate initial estimates of the parameters A, B, xmid, and scal for a given set of data. ",
         "title" : "Self-Starting Nls Four-Parameter Logistic Model"
      },
      {
         "title" : "Self-Starting Nls Gompertz Growth Model",
         "desc" : " This selfStart model evaluates the Gompertz growth model and its gradient. It has an initial attribute that creates initial estimates of the parameters Asym, b2, and b3. ",
         "package" : "stats",
         "name" : "SSgompertz"
      },
      {
         "name" : "SSlogis",
         "title" : "Self-Starting Nls Logistic Model",
         "desc" : " This selfStart model evaluates the logistic function and its gradient. It has an initial attribute that creates initial estimates of the parameters Asym, xmid, and scal. ",
         "package" : "stats"
      },
      {
         "title" : "Self-Starting Nls Michaelis-Menten Model",
         "package" : "stats",
         "desc" : " This selfStart model evaluates the Michaelis-Menten model and its gradient. It has an initial attribute that will evaluate initial estimates of the parameters Vm and K ",
         "name" : "SSmicmen"
      },
      {
         "name" : "SSweibull",
         "title" : "Self-Starting Nls Weibull Growth Curve Model",
         "package" : "stats",
         "desc" : " This selfStart model evaluates the Weibull model for growth curve data and its gradient. It has an initial attribute that will evaluate initial estimates of the parameters Asym, Drop, lrc, and pwr for a given set of data. "
      },
      {
         "name" : "start",
         "title" : "Encode the Terminal Times of Time Series",
         "package" : "stats",
         "desc" : " Extract and encode the times the first and last observations were taken. Provided only for compatibility with S version 2. "
      },
      {
         "name" : "stat.anova",
         "title" : "GLM Anova Statistics",
         "desc" : "This is a utility function, used in lm and glm methods for anova(, test != NULL) and should not be used by the average user. ",
         "package" : "stats"
      },
      {
         "name" : "stats-defunct",
         "package" : "stats",
         "desc" : " The functions or variables listed here are no longer part of as they are not needed (any more). ",
         "title" : "Defunct Functions in Package stats"
      },
      {
         "package" : "stats",
         "desc" : " These functions are provided for compatibility with older versions of only, and may be defunct as soon as the next release. ",
         "title" : "Deprecated Functions in Package stats",
         "name" : "stats-deprecated"
      },
      {
         "name" : "stats-package",
         "title" : " The R Stats Package ",
         "package" : "stats",
         "desc" : " R statistical functions "
      },
      {
         "name" : "step",
         "package" : "stats",
         "desc" : " Select a formula-based model by AIC. ",
         "title" : " Choose a model by AIC in a Stepwise Algorithm "
      },
      {
         "name" : "stepfun",
         "package" : "stats",
         "desc" : " Given the vectors (x_1, \\\\ldots, x_n)(x[1], \\\\dots, x[n]) and (y_0,y_1,\\\\ldots, y_n)(y[0], y[1], \\\\dots, y[n]) (one value more!), stepfun(x, y, ) returns an interpolating step function, say fn. I.e., fn(t) = c_i[i] (constant) for t \\\\in (x_i, x_{i+1})t in ( x[i], x[i+1]) and at the abscissa values, if (by default) right = FALSE, fn(x_i) = y_ifn(x[i]) = y[i] and for right = TRUE, fn(x_i) = y_{i-1}fn(x[i]) = y[i-1], for i=1,\\\\ldots,ni=1, \\\\dots, n. The value of the constant c_ic[i] above depends on the continuity parameter f. For the default, right = FALSE, f = 0, fn is a cadlag function, i.e., continuous from the right, limits from the left, so that the function is piecewise constant on intervals that include their left endpoint. In general, c_ic[i] is interpolated in between the neighbouring y values, c_i= (1-f) y_i + f\\\\cdot y_{i+1}c[i] = (1-f)*y[i] + f*y[i+1]. Therefore, for non-0 values of f, fn may no longer be a proper step function, since it can be discontinuous from both sides, unless right = TRUE, f = 1 which is left-continuous (i.e., constant pieces contain their right endpoint). ",
         "title" : "Step Functions - Creation and Class"
      },
      {
         "name" : "stl",
         "desc" : " Decompose a time series into seasonal, trend and irregular components using loess, acronym STL. ",
         "package" : "stats",
         "title" : "Seasonal Decomposition of Time Series by Loess"
      },
      {
         "name" : "stlmethods",
         "title" : "Methods for STL Objects",
         "desc" : " Methods for objects of class stl, typically the result of stl. The plot method does a multiple figure plot with some flexibility. There are also (non-visible) print and summary methods. ",
         "package" : "stats"
      },
      {
         "name" : "StructTS",
         "title" : "Fit Structural Time Series",
         "package" : "stats",
         "desc" : " Fit a structural model for a time series by maximum likelihood. "
      },
      {
         "name" : "summary.aov",
         "desc" : " Summarize an analysis of variance model. ",
         "package" : "stats",
         "title" : "Summarize an Analysis of Variance Model"
      },
      {
         "name" : "summary.glm",
         "title" : "Summarizing Generalized Linear Model Fits",
         "desc" : " These functions are all methods for class glm or summary.glm objects. ",
         "package" : "stats"
      },
      {
         "name" : "summary.lm",
         "desc" : " summary method for class \"lm\". ",
         "package" : "stats",
         "title" : "Summarizing Linear Model Fits"
      },
      {
         "name" : "summary.manova",
         "desc" : " A summary method for class \"manova\". ",
         "package" : "stats",
         "title" : "Summary Method for Multivariate Analysis of Variance"
      },
      {
         "name" : "summary.nls",
         "package" : "stats",
         "desc" : " summary method for class \"nls\". ",
         "title" : "Summarizing Non-Linear Least-Squares Model Fits"
      },
      {
         "title" : "Summary method for Principal Components Analysis",
         "desc" : " The summary method for class \"princomp\". ",
         "package" : "stats",
         "name" : "summary.princomp"
      },
      {
         "title" : "Friedman's SuperSmoother",
         "package" : "stats",
         "desc" : " Smooth the (x, y) values by Friedman's super smoother. ",
         "name" : "supsmu"
      },
      {
         "desc" : " Symbolically encode a given numeric or logical vector or array. Particularly useful for visualization of structured matrices, e.g., correlation, sparse, or logical ones. ",
         "package" : "stats",
         "title" : "Symbolic Number Coding",
         "name" : "symnum"
      },
      {
         "name" : "t.test",
         "title" : "Student's t-Test",
         "desc" : " Performs one and two sample t-tests on vectors of data. ",
         "package" : "stats"
      },
      {
         "name" : "TDist",
         "package" : "stats",
         "desc" : " Density, distribution function, quantile function and random generation for the t distribution with df degrees of freedom (and optional non-centrality parameter ncp). ",
         "title" : "The Student t Distribution"
      },
      {
         "title" : "Plot Regression Terms",
         "desc" : " Plots regression terms against their predictors, optionally with standard errors and partial residuals added. ",
         "package" : "stats",
         "name" : "termplot"
      },
      {
         "desc" : " This function takes a formula and some optional arguments and constructs a terms object. The terms object can then be used to construct a model.matrix. ",
         "package" : "stats",
         "title" : "Construct a terms Object from a Formula",
         "name" : "terms.formula"
      },
      {
         "name" : "terms.object",
         "title" : "Description of Terms Objects",
         "desc" : " An object of class terms holds information about a model. Usually the model was specified in terms of a formula and that formula was used to determine the terms object. ",
         "package" : "stats"
      },
      {
         "desc" : " The function terms is a generic function which can be used to extract terms objects from various kinds of data objects. ",
         "package" : "stats",
         "title" : "Model Terms",
         "name" : "terms"
      },
      {
         "desc" : " time creates the vector of times at which a time series was sampled. cycle gives the positions in the cycle of each observation. frequency returns the number of samples per unit time and deltat the time interval between observations (see ts). ",
         "package" : "stats",
         "title" : "Sampling Times of Time Series",
         "name" : "time"
      },
      {
         "name" : "toeplitz",
         "package" : "stats",
         "desc" : " Forms a symmetric Toeplitz matrix given its first row. ",
         "title" : "Form Symmetric Toeplitz Matrix"
      },
      {
         "title" : "Methods for Time Series Objects",
         "desc" : " Methods for objects of class \"ts\", typically the result of ts. ",
         "package" : "stats",
         "name" : "ts-methods"
      },
      {
         "name" : "ts.plot",
         "title" : "Plot Multiple Time Series",
         "desc" : " Plot several time series on a common plot. Unlike plot.ts the series can have a different time bases, but they should have the same frequency. ",
         "package" : "stats"
      },
      {
         "desc" : " The function ts is used to create time-series objects. as.ts and is.ts coerce an object to a time-series and test whether an object is a time series. ",
         "package" : "stats",
         "title" : "Time-Series Objects",
         "name" : "ts"
      },
      {
         "package" : "stats",
         "desc" : " Bind time series which have a common frequency. ts.union pads with NAs to the total time coverage, ts.intersect restricts to the time covered by all the series. ",
         "title" : "Bind Two or More Time Series",
         "name" : "ts.union"
      },
      {
         "name" : "tsdiag",
         "title" : "Diagnostic Plots for Time-Series Fits",
         "desc" : " A generic function to plot time-series diagnostics. ",
         "package" : "stats"
      },
      {
         "title" : "Tsp Attribute of Time-Series-like Objects",
         "desc" : " tsp returns the tsp attribute (or NULL). It is included for compatibility with S version 2. tsp<- sets the tsp attribute. hasTsp ensures x has a tsp attribute, by adding one if needed. ",
         "package" : "stats",
         "name" : "tsp"
      },
      {
         "name" : "tsSmooth",
         "desc" : " Performs fixed-interval smoothing on a univariate time series via a state-space model. Fixed-interval smoothing gives the best estimate of the state at each time point based on the whole observed series. ",
         "package" : "stats",
         "title" : "Use Fixed-Interval Smoothing on Time Series"
      },
      {
         "name" : "Tukey",
         "title" : "The Studentized Range Distribution",
         "desc" : " Functions of the distribution of the studentized range, R/s, where R is the range of a standard normal sample and df \\\\times s^2df*s^2 is independently distributed as chi-squared with df degrees of freedom, see pchisq. ",
         "package" : "stats"
      },
      {
         "desc" : " Create a set of confidence intervals on the differences between the means of the levels of a factor with the specified family-wise probability of coverage. The intervals are based on the Studentized range statistic, Tukey's Honest Significant Difference method. ",
         "package" : "stats",
         "title" : "Compute Tukey Honest Significant Differences",
         "name" : "TukeyHSD"
      },
      {
         "desc" : " These functions provide information about the uniform distribution on the interval from min to max. dunif gives the density, punif gives the distribution function qunif gives the quantile function and runif generates random deviates. ",
         "package" : "stats",
         "title" : "The Uniform Distribution",
         "name" : "Uniform"
      },
      {
         "desc" : " The function uniroot searches the interval from lower to upper for a root (i.e., zero) of the function f with respect to its first argument. Setting extendInt to a non-\"no\" string, means searching for the correct interval = c(lower,upper) if sign(f(x)) does not satisfy the requirements at the interval end points; see the Details section. ",
         "package" : "stats",
         "title" : "One Dimensional Root (Zero) Finding",
         "name" : "uniroot"
      },
      {
         "title" : "Model Updating",
         "package" : "stats",
         "desc" : " update.formula is used to update model formulae. This typically involves adding or dropping terms, but updates can be more general. ",
         "name" : "update.formula"
      },
      {
         "title" : "Update and Re-fit a Model Call",
         "desc" : " update will update and (by default) re-fit a model. It does this by extracting the call stored in the object, updating the call and (by default) evaluating that call. Sometimes it is useful to call update with only one argument, for example if the data frame has been corrected. Extracting the call in update() and similar functions uses getCall() which itself is a (S3) generic function with a default method that simply gets x$call. Because of this, update() will often work (via its default method) on new model classes, either automatically, or by providing a simple getCall() method for that class. ",
         "package" : "stats",
         "name" : "update"
      },
      {
         "name" : "var.test",
         "package" : "stats",
         "desc" : " Performs an F test to compare the variances of two samples from normal populations. ",
         "title" : "F Test to Compare Two Variances"
      },
      {
         "name" : "varimax",
         "title" : "Rotation Methods for Factor Analysis",
         "package" : "stats",
         "desc" : " These functions rotate loading matrices in factor analysis. "
      },
      {
         "name" : "vcov",
         "title" : " Calculate Variance-Covariance Matrix for a Fitted Model Object ",
         "package" : "stats",
         "desc" : " Returns the variance-covariance matrix of the main parameters of a fitted model object. "
      },
      {
         "desc" : " Density, distribution function, quantile function and random generation for the Weibull distribution with parameters shape and scale. ",
         "package" : "stats",
         "title" : "The Weibull Distribution",
         "name" : "Weibull"
      },
      {
         "desc" : " Compute a weighted mean. ",
         "package" : "stats",
         "title" : "Weighted Arithmetic Mean",
         "name" : "weighted.mean"
      },
      {
         "desc" : " Computed weighted residuals from a linear model fit. ",
         "package" : "stats",
         "title" : "Compute Weighted Residuals",
         "name" : "weighted.residuals"
      },
      {
         "title" : "Extract Model Weights",
         "package" : "stats",
         "desc" : " weights is a generic function which extracts fitting weights from objects returned by modeling functions. Methods can make use of napredict methods to compensate for the omission of missing values. The default methods does so. ",
         "name" : "weights"
      },
      {
         "title" : "Wilcoxon Rank Sum and Signed Rank Tests",
         "package" : "stats",
         "desc" : " Performs one- and two-sample Wilcoxon tests on vectors of data; the latter is also known as Mann-Whitney test. ",
         "name" : "wilcox.test"
      },
      {
         "title" : "Distribution of the Wilcoxon Rank Sum Statistic",
         "desc" : " Density, distribution function, quantile function and random generation for the distribution of the Wilcoxon rank sum statistic obtained from samples with size m and n, respectively. ",
         "package" : "stats",
         "name" : "Wilcoxon"
      },
      {
         "title" : "Time Windows",
         "desc" : " window is a generic function which extracts the subset of the object x observed between the times start and end. If a frequency is specified, the series is then re-sampled at the new frequency. ",
         "package" : "stats",
         "name" : "window"
      },
      {
         "desc" : " Create a contingency table (optionally a sparse matrix) from cross-classifying factors, usually contained in a data frame, using a formula interface. ",
         "package" : "stats",
         "title" : "Cross Tabulation",
         "name" : "xtabs"
      },
      {
         "name" : "C",
         "title" : "Sets Contrasts for a Factor",
         "desc" : " Sets the \"contrasts\" attribute for the factor. ",
         "package" : "stats"
      },
      {
         "name" : "coef-methods",
         "title" : "Methods for Function coef in Package stats4",
         "package" : "stats4",
         "desc" : " Extract the coefficient vector from \"mle\" objects. "
      },
      {
         "name" : "confint-methods",
         "desc" : "Generate confidence intervals",
         "package" : "stats4",
         "title" : "Methods for Function confint in Package stats4"
      },
      {
         "title" : "Methods for Function logLik in Package stats4",
         "package" : "stats4",
         "desc" : " Extract the maximized log-likelihood from \"mle\" objects. ",
         "name" : "logLik-methods"
      },
      {
         "name" : "mle-class",
         "title" : "Class \"mle\" for Results of Maximum Likelihood Estimation",
         "desc" : "This class encapsulates results of a generic maximum likelihood procedure.",
         "package" : "stats4"
      },
      {
         "name" : "mle",
         "title" : "Maximum Likelihood Estimation",
         "desc" : " Estimate parameters by the method of maximum likelihood. ",
         "package" : "stats4"
      },
      {
         "name" : "plot-methods",
         "title" : "Methods for Function plot in Package stats4",
         "desc" : " Plot profile likelihoods for \"mle\" objects. ",
         "package" : "stats4"
      },
      {
         "name" : "profile-methods",
         "title" : "Methods for Function profile in Package stats4",
         "desc" : "Profile likelihood for \"mle\" objects.",
         "package" : "stats4"
      },
      {
         "title" : " Class \"profile.mle\"; Profiling information for \"mle\" object ",
         "package" : "stats4",
         "desc" : "Likelihood profiles along each parameter of likelihood function",
         "name" : "profile.mle-class"
      },
      {
         "name" : "show-methods",
         "package" : "stats4",
         "desc" : "Show objects of classes mle and summary.mle",
         "title" : "Methods for Function show in Package stats4"
      },
      {
         "title" : "Statistical Functions using S4 Classes",
         "desc" : "Statistical Functions using S4 classes. ",
         "package" : "stats4",
         "name" : "stats4-package"
      },
      {
         "name" : "summary-methods",
         "title" : "Methods for Function summary in Package stats4",
         "package" : "stats4",
         "desc" : "Summarize objects"
      },
      {
         "title" : "Class \"summary.mle\", Summary of \"mle\" Objects",
         "package" : "stats4",
         "desc" : "Extract of \"mle\" object",
         "name" : "summary.mle-class"
      },
      {
         "desc" : " Update \"mle\" objects. ",
         "package" : "stats4",
         "title" : "Methods for Function update in Package stats4",
         "name" : "update-methods"
      },
      {
         "name" : "vcov-methods",
         "package" : "stats4",
         "desc" : " Extract the approximate variance-covariance matrix from \"mle\" objects. ",
         "title" : "Methods for Function vcov in Package stats4"
      },
      {
         "title" : "Low-level Tcl/Tk Interface",
         "desc" : " These functions and variables provide the basic glue between and the Tcl interpreter and Tk GUI toolkit. Tk windows may be represented via objects. Tcl variables can be accessed via objects of class tclVar and the C level interface to Tcl objects is accessed via objects of class tclObj. ",
         "package" : "tcltk",
         "name" : "TclInterface"
      },
      {
         "title" : " Allow Tcl events to be serviced or not ",
         "desc" : " This function controls or reports on the Tcl service mode, i.e., whether Tcl will respond to events. ",
         "package" : "tcltk",
         "name" : "tclServiceMode"
      },
      {
         "desc" : " The functions or variables listed here are no longer part of as they are not needed (any more). ",
         "package" : "tcltk",
         "title" : "Defunct Functions in Package tcltk",
         "name" : "tcltk-defunct"
      },
      {
         "name" : "tcltk-package",
         "title" : " Tcl/Tk Interface ",
         "desc" : " Interface and language bindings to Tcl/Tk GUI elements. ",
         "package" : "tcltk"
      },
      {
         "name" : "tk_choose.dir",
         "title" : "Choose a Folder Interactively",
         "desc" : " Use a Tk widget to choose a directory interactively. ",
         "package" : "tcltk"
      },
      {
         "desc" : " Use a Tk file dialog to choose a list of zero or more files interactively. ",
         "package" : "tcltk",
         "title" : "Choose a List of Files Interactively",
         "name" : "tk_choose.files"
      },
      {
         "title" : "Tk Message Box",
         "package" : "tcltk",
         "desc" : " An implementation of a generic message box using Tk ",
         "name" : "tk_messageBox"
      },
      {
         "name" : "tk_select.list",
         "package" : "tcltk",
         "desc" : " Select item(s) from a character vector using a Tk listbox. ",
         "title" : "Select Items from a List"
      },
      {
         "name" : "TkCommands",
         "desc" : " These functions interface to Tk non-widget commands, such as the window manager interface commands and the geometry managers. ",
         "package" : "tcltk",
         "title" : "Tk non-widget commands"
      },
      {
         "title" : "Page file using Tk text widget",
         "desc" : " This plugs into file.show, showing files in separate windows. ",
         "package" : "tcltk",
         "name" : "tkpager"
      },
      {
         "name" : "tkProgressBar",
         "title" : "Progress Bars via Tk",
         "desc" : " Put up a Tk progress bar widget. ",
         "package" : "tcltk"
      },
      {
         "desc" : " Starts up the Tcl/Tk GUI ",
         "package" : "tcltk",
         "title" : "Tcl/Tk GUI startup",
         "name" : "tkStartGUI"
      },
      {
         "title" : "Tk widget commands",
         "desc" : " These functions interface to Tk widget commands. ",
         "package" : "tcltk",
         "name" : "TkWidgetcmds"
      },
      {
         "name" : "TkWidgets",
         "title" : "Tk widgets",
         "package" : "tcltk",
         "desc" : " Create Tk widgets and associated objects. "
      },
      {
         "package" : "tools",
         "desc" : " The data() command with no arguments lists all the datasets available via data in attached packages, and to do so a per-package list is installed. Creating that list at install time can be slow for packages with huge datasets, and can be expedited by a supplying data/datalist file. ",
         "title" : " Add a datalist File to a Package ",
         "name" : "add_datalist"
      },
      {
         "title" : "Asserting Error Conditions",
         "desc" : " When testing code, it is not sufficient to check that results are correct, but also that errors or warnings are signalled in appropriate situations. The functions described here provide a convenient facility for doing so. The three functions check that evaluating the supplied expression produces an error, a warning or one of a specified list of conditions, respectively. If the assertion fails, an error is signalled. ",
         "package" : "tools",
         "name" : "assertCondition"
      },
      {
         "name" : "bibstyle",
         "desc" : " This function defines and registers styles for rendering bibentry objects into Rd format, for later conversion to text, HTML, etc. ",
         "package" : "tools",
         "title" : " Select or define a bibliography style. "
      },
      {
         "desc" : " Run Sweave (or other custom weave function) texi2dvi, and/or Stangle (or other custom tangle function) on one vignette. This is the workhorse of R CMD Sweave. ",
         "package" : "tools",
         "title" : "Build one vignette",
         "name" : "buildVignette"
      },
      {
         "name" : "buildVignettes",
         "title" : "List and Build Package Vignettes",
         "package" : "tools",
         "desc" : " Run Sweave (or other custom weave function) and texi2dvi on all vignettes of a package. "
      },
      {
         "package" : "tools",
         "desc" : " charset_to_Unicode is a matrix of Unicode code points with columns for the common 8-bit encodings. Adobe_glyphs is a data frame which gives Adobe glyph names for Unicode code points. It has two character columns, \"adobe\" and \"unicode\" (a 4-digit hex representation). ",
         "title" : "Conversion Tables between Character Sets",
         "name" : "charsets"
      },
      {
         "desc" : " Check source packages in a given directory, optionally with their reverse dependencies. ",
         "package" : "tools",
         "title" : "Check Source Packages and Their Reverse Dependencies",
         "name" : "check_packages_in_dir"
      },
      {
         "title" : "Check Foreign Function Calls",
         "package" : "tools",
         "desc" : " Performs checks on calls to compiled code from R code. Currently only checks whether the interface functions such as .C and .Fortran are called with a \"NativeSymbolInfo\" first argument or with argument PACKAGE specified, which is highly recommended to avoid name clashes in foreign function calls. ",
         "name" : "checkFF"
      },
      {
         "title" : "Check and Create MD5 Checksum Files",
         "package" : "tools",
         "desc" : " checkMD5sums checks the files against a file MD5. ",
         "name" : "checkMD5sums"
      },
      {
         "name" : "checkPoFiles",
         "title" : " Check translation files for inconsistent format strings. ",
         "package" : "tools",
         "desc" : " These functions compare formats embedded in English messages with translated strings to check for consistency. checkPoFile checks one file, while checkPoFiles checks all files for a specified language. "
      },
      {
         "name" : "checkRd",
         "title" : " Check an Rd Object ",
         "desc" : " Check an help file or the output of the parse_Rd function. ",
         "package" : "tools"
      },
      {
         "title" : " Report on Details of Saved Images or Re-saves them ",
         "desc" : " This reports for each of the files produced by save the size, if it was saved in ASCII or XDR binary format, and if it was compressed (and if so in what format). Usually such files have extension .rda or .RData, hence the name of the function. ",
         "package" : "tools",
         "name" : "checkRdaFiles"
      },
      {
         "name" : "checkTnF",
         "title" : "Check R Packages or Code for T/F",
         "package" : "tools",
         "desc" : " Checks the specified R package or code file for occurrences of T or F, and gathers the expression containing these. This is useful as in R T and F are just variables which are set to the logicals TRUE and FALSE by default, but are not reserved words and hence can be overwritten by the user. Hence, one should always use TRUE and FALSE for the logicals. "
      },
      {
         "desc" : " Check all Sweave files of a package by running Sweave and/or Stangle on them. All R source code files found after the tangling step are sourceed to check whether all code can be executed without errors. ",
         "package" : "tools",
         "title" : "Check Package Vignettes",
         "name" : "checkVignettes"
      },
      {
         "title" : "Check Code/Documentation Consistency",
         "package" : "tools",
         "desc" : " Find inconsistencies between actual and documented structure of objects in a package. codoc compares names and optionally also corresponding positions and default values of the arguments of functions. codocClasses and codocData compare slot names of S4 classes and variable names of data sets, respectively. ",
         "name" : "codoc"
      },
      {
         "title" : " Compact PDF Files ",
         "package" : "tools",
         "desc" : " Re-save PDF files (especially vignettes) more compactly. Support function for R CMD build --compact-vignettes. ",
         "name" : "compactPDF"
      },
      {
         "name" : "delimMatch",
         "title" : "Delimited Pattern Matching",
         "desc" : " Match delimited substrings in a character vector, with proper nesting. ",
         "package" : "tools"
      },
      {
         "package" : "tools",
         "desc" : " Find reverse dependencies of packages, that is those packages which depend on this one, and (optionally) so on recursively. ",
         "title" : "Find Reverse Dependencies",
         "name" : "dependsOnPkgs"
      },
      {
         "title" : "Translate non-ASCII Text to LaTeX Escapes",
         "desc" : " Translate non-ASCII characters in text to LaTeX escape sequences. ",
         "package" : "tools",
         "name" : "encoded_text_to_latex"
      },
      {
         "name" : "fileutils",
         "title" : "File Utilities",
         "package" : "tools",
         "desc" : " Utilities for listing files, and manipulating file paths. "
      },
      {
         "title" : " Find a GhostScript Executable ",
         "package" : "tools",
         "desc" : " Find a GhostScript executable in a cross-platform way. ",
         "name" : "find_gs_cmd"
      },
      {
         "name" : "getDepList",
         "desc" : " Given a dependency matrix, will create a DependsList object for that package which will include the dependencies for that matrix, which ones are installed, which unresolved dependencies were found online, which unresolved dependencies were not found online, and any R dependencies. ",
         "package" : "tools",
         "title" : "Functions to Retrieve Dependency Information"
      },
      {
         "name" : "getVignetteInfo",
         "package" : "tools",
         "desc" : " This function gets information on installed vignettes. ",
         "title" : " Get information on installed vignettes. "
      },
      {
         "name" : "HTMLheader",
         "package" : "tools",
         "desc" : " This function generates the standard HTML header used on R help pages. ",
         "title" : " Generate a standard HTML header for R help "
      },
      {
         "title" : "Collect HTML Links from Package Documentation",
         "desc" : " Compute relative file paths for URLs to other package's installed HTML documentation. ",
         "package" : "tools",
         "name" : "HTMLlinks"
      },
      {
         "name" : "installFoundDepends",
         "title" : "A function to install unresolved dependencies",
         "desc" : " This function will take the Found element of a pkgDependsList object and attempt to install all of the listed packages from the specified repositories. ",
         "package" : "tools"
      },
      {
         "title" : " Load user-defined Rd help system macros. ",
         "package" : "tools",
         "desc" : " Loads macros from an .Rd file, or from several .Rd files contained in a package. ",
         "name" : "loadRdMacros"
      },
      {
         "package" : "tools",
         "desc" : " A utility for R Core members to prepare a package of updated translations. ",
         "title" : " Package the Current Translations in the sources ",
         "name" : "make_translations_pkg"
      },
      {
         "title" : "Lazy Loading of Packages",
         "package" : "tools",
         "desc" : " Tools for lazy loading of packages from a database. ",
         "name" : "makeLazyLoading"
      },
      {
         "name" : "md5sum",
         "package" : "tools",
         "desc" : " Compute the 32-byte MD5 hashes of one or more files. ",
         "title" : "Compute MD5 Checksums"
      },
      {
         "package" : "tools",
         "desc" : " Parses and checks the dependencies of a package against the currently installed version of R (and other packages). ",
         "title" : "Check Package Dependencies",
         "name" : "package.dependencies"
      },
      {
         "package" : "tools",
         "desc" : " Find (recursively) dependencies or reverse dependencies of packages. ",
         "title" : "Computations on the Dependency Hierarchy of Packages",
         "name" : "package_dependencies"
      },
      {
         "desc" : " This function reads an R documentation (Rd) file and parses it, for processing by other functions. ",
         "package" : "tools",
         "title" : " Parse an Rd file ",
         "name" : "parse_Rd"
      },
      {
         "name" : "parseLatex",
         "title" : " These experimental functions work with a subset of LaTeX code. ",
         "desc" : " The parseLatex function parses LaTeX source, producing a structured object; deparseLatex reverses the process. The latexToUtf8 function takes a LaTeX object, and processes a number of different macros to convert them into the corresponding UTF-8 characters. ",
         "package" : "tools"
      },
      {
         "name" : ".print.via.format",
         "title" : "Printing Utilities",
         "package" : "tools",
         "desc" : " .print.via.format is a prototype print() method, useful, at least as a start, by a simple print.<myS3class> <- .print.via.format "
      },
      {
         "title" : "Kill a Process",
         "package" : "tools",
         "desc" : " pskill sends a signal to a process, usually to terminate it. ",
         "name" : "pskill"
      },
      {
         "desc" : " Get or set the niceness of the current process, or one or more other processes. ",
         "package" : "tools",
         "title" : "Get or Set the Priority (Niceness) of a Process",
         "name" : "psnice"
      },
      {
         "package" : "tools",
         "desc" : " Functions for performing various quality checks. ",
         "title" : "QC Checks for R Code and/or Documentation",
         "name" : "QC"
      },
      {
         "name" : "Rd2HTML",
         "desc" : " These functions take the output of the parse_Rd function and produce a help page from it. As they are mainly intended for internal use, their interfaces are subject to change. ",
         "package" : "tools",
         "title" : " Rd Converters "
      },
      {
         "name" : "Rd2txt_options",
         "desc" : " This function sets various options for displaying text help. ",
         "package" : "tools",
         "title" : " Set formatting options for text help "
      },
      {
         "name" : "Rdiff",
         "title" : "Difference R Output Files",
         "desc" : " Given two output files, compute differences ignoring headers, footers and some other differences. ",
         "package" : "tools"
      },
      {
         "name" : "Rdindex",
         "title" : "Generate Index from Rd Files",
         "package" : "tools",
         "desc" : " Print a 2-column index table with names and titles from given R documentation files to a given output file or connection. The titles are nicely formatted between two column positions (typically 25 and 72, respectively). "
      },
      {
         "title" : " Select text in an Rd file. ",
         "desc" : " This function blanks out all non-text in an Rd file, for spell checking or other uses. ",
         "package" : "tools",
         "name" : "RdTextFilter"
      },
      {
         "name" : "Rdutils",
         "title" : "Rd Utilities",
         "package" : "tools",
         "desc" : "Utilities for computing on the information in Rd objects."
      },
      {
         "desc" : " Read item/description information from 00Index-like files. Such files are description lists rendered in tabular form, and currently used for the INDEX and demo/00Index files of add-on packages. ",
         "package" : "tools",
         "title" : "Read 00Index-style Files",
         "name" : "read.00Index"
      },
      {
         "name" : "showNonASCII",
         "package" : "tools",
         "desc" : " This function prints elements of a character vector which contain non-ASCII bytes, printing such bytes as a escape like <fc>. ",
         "title" : "Pick Out Non-ASCII Characters"
      },
      {
         "name" : "startDynamicHelp",
         "package" : "tools",
         "desc" : " This function starts the internal help server, so that HTML help pages are rendered when requested. ",
         "title" : "Start the Dynamic HTML Help System"
      },
      {
         "desc" : " This function blanks out code chunks and Noweb markup in an Sweave input file, for spell checking or other uses. ",
         "package" : "tools",
         "title" : " Strip R code out of Sweave file ",
         "name" : "SweaveTeXFilter"
      },
      {
         "title" : "Test Installed Packages",
         "package" : "tools",
         "desc" : " These functions allow an installed package to be tested, or all base and recommended packages. ",
         "name" : "testInstalledPackage"
      },
      {
         "name" : "texi2dvi",
         "title" : "Compile LaTeX Files",
         "desc" : " Run latex and bibtex until all cross-references are resolved and create either a dvi or a PDF file. ",
         "package" : "tools"
      },
      {
         "desc" : " This generic function generates a complete HTML page from an object. ",
         "package" : "tools",
         "title" : " Display an object in HTML. ",
         "name" : "toHTML"
      },
      {
         "desc" : " The functions or variables listed here are no longer part of as they are not needed (any more). ",
         "package" : "tools",
         "title" : "Defunct Objects in Package tools",
         "name" : "tools-defunct"
      },
      {
         "title" : "Deprecated Objects in Package tools",
         "desc" : " The functions or variables listed here are provided for compatibility with older versions of only, and may be defunct as soon as of the next release. ",
         "package" : "tools",
         "name" : "tools-deprecated"
      },
      {
         "name" : "tools-package",
         "package" : "tools",
         "desc" : " Tools for package development, administration and documentation. ",
         "title" : "Tools for Package Development"
      },
      {
         "title" : " Generic function to convert object to a fragment of Rd code. ",
         "package" : "tools",
         "desc" : " Methods for this function render their associated classes as a fragment of Rd code, which can then be rendered into text, HTML, or LaTeX. ",
         "name" : "toRd"
      },
      {
         "name" : "toTitleCase",
         "title" : "Convert Titles to Title Case",
         "desc" : " Convert a character vector to title case, especially package titles. ",
         "package" : "tools"
      },
      {
         "desc" : " Finds the objects in a package which are undocumented, in the sense that they are visible to the user (or data objects or S4 classes provided by the package), but no documentation entry exists. ",
         "package" : "tools",
         "title" : "Find Undocumented Objects",
         "name" : "undoc"
      },
      {
         "title" : " Prepare Translations for a Package ",
         "package" : "tools",
         "desc" : " Prepare the po directory of a package and compile and install the translations. ",
         "name" : "update_pkg_po"
      },
      {
         "name" : "vignetteDepends",
         "title" : " Retrieve Dependency Information for a Vignette",
         "package" : "tools",
         "desc" : " Given a vignette name, will create a DependsList object that reports information about the packages the vignette depends on. "
      },
      {
         "title" : "Set or Get a Vignette Processing Engine",
         "desc" : " Vignettes are normally processed by Sweave, but package writers may choose to use a different engine (e.g., one provided by the \\\\href{https://CRAN.R-project.org/package=#1}{\\\\pkg{#1}}knitrhttps://CRAN.R-project.org/package=knitrknitr, \\\\href{https://CRAN.R-project.org/package=#1}{\\\\pkg{#1}}nowebhttps://CRAN.R-project.org/package=nowebnoweb or \\\\href{https://CRAN.R-project.org/package=#1}{\\\\pkg{#1}}R.rsphttps://CRAN.R-project.org/package=R.rspR.rsp packages). This function is used by those packages to register their engines, and internally by to retrieve them. ",
         "package" : "tools",
         "name" : "vignetteEngine"
      },
      {
         "title" : "Generate PACKAGES files",
         "package" : "tools",
         "desc" : " Generate PACKAGES and PACKAGES.gz files for a repository of source or Mac/Windows binary packages. ",
         "name" : "write_PACKAGES"
      },
      {
         "name" : "xgettext",
         "desc" : " For each file in the R directory (including system-specific subdirectories) of a package, extract the unique arguments passed to stop, warning, message, gettext and gettextf, or to ngettext. ",
         "package" : "tools",
         "title" : "Extract Translatable Messages from R Files in a Package"
      },
      {
         "title" : "Approximate String Distances",
         "desc" : " Compute the approximate string distance between character vectors. The distance is a generalized Levenshtein (edit) distance, giving the minimal possibly weighted number of insertions, deletions and substitutions needed to transform one string into another. ",
         "package" : "utils",
         "name" : "adist"
      },
      {
         "title" : "Alert the User",
         "desc" : " Gives an audible or visual signal to the user. ",
         "package" : "utils",
         "name" : "alarm"
      },
      {
         "name" : "apropos",
         "package" : "utils",
         "desc" : " apropos() returns a character vector giving the names of all objects in the search list matching what. find() is a different user interface to the same task. ",
         "title" : "Find Objects by (Partial) Name"
      },
      {
         "title" : "Approximate String Match Positions",
         "desc" : " Determine positions of approximate string matches. ",
         "package" : "utils",
         "name" : "aregexec"
      },
      {
         "title" : "Spell Check Utilities",
         "package" : "utils",
         "desc" : " Utilities for spell checking packages via Aspell, Hunspell or Ispell. ",
         "name" : "aspell-utils"
      },
      {
         "title" : "Spell Check Interface",
         "package" : "utils",
         "desc" : " Spell check given files via Aspell, Hunspell or Ispell. ",
         "name" : "aspell"
      },
      {
         "name" : "available.packages",
         "package" : "utils",
         "desc" : " available.packages returns a matrix of details corresponding to packages currently available at one or more repositories. The current list of packages is downloaded over the internet (or copied from a local mirror). ",
         "title" : "List Available Packages at CRAN-like Repositories"
      },
      {
         "title" : "Batch Execution of R",
         "desc" : "Run non-interactively with input from infile and send output (stdout/stderr) to another file.",
         "package" : "utils",
         "name" : "BATCH"
      },
      {
         "desc" : " Functionality for representing and manipulating bibliographic information in enhanced BibTeX style. ",
         "package" : "utils",
         "title" : "Bibliography Entries",
         "name" : "bibentry"
      },
      {
         "title" : "Browse Objects in Environment",
         "package" : "utils",
         "desc" : " The browseEnv function opens a browser with list of objects currently in sys.frame() environment. ",
         "name" : "browseEnv"
      },
      {
         "name" : "browseURL",
         "desc" : " Load a given URL into an HTML browser. ",
         "package" : "utils",
         "title" : "Load URL into an HTML Browser"
      },
      {
         "desc" : " List available vignettes in an HTML browser with links to PDF, LaTeX/noweb source, and (tangled) R code (if available). ",
         "package" : "utils",
         "title" : "List Vignettes in an HTML Browser",
         "name" : "browseVignettes"
      },
      {
         "desc" : " Invokes an editor or email program to write a bug report or opens a web page for bug submission. Some standard information on the current version and configuration of are included automatically. ",
         "package" : "utils",
         "title" : "Send a Bug Report",
         "name" : "bug.report"
      },
      {
         "title" : "Send Output to a Character String or File",
         "package" : "utils",
         "desc" : " Evaluates its arguments with the output being returned as a character string or sent to a file. Related to sink in the same way that with is related to attach. ",
         "name" : "capture.output"
      },
      {
         "name" : "changedFiles",
         "title" : " Detect which files have changed ",
         "desc" : " fileSnapshot takes a snapshot of a selection of files, recording summary information about each. changedFiles compares two snapshots, or compares one snapshot to the current state of the file system. The snapshots need not be the same directory; this could be used to compare two directories. ",
         "package" : "utils"
      },
      {
         "name" : "chooseBioCmirror",
         "package" : "utils",
         "desc" : " Interact with the user to choose a Bioconductor mirror. ",
         "title" : "Select a Bioconductor Mirror"
      },
      {
         "title" : "Select a CRAN Mirror",
         "desc" : " Interact with the user to choose a CRAN mirror. ",
         "package" : "utils",
         "name" : "chooseCRANmirror"
      },
      {
         "name" : "citation",
         "package" : "utils",
         "desc" : " How to cite and packages in publications. ",
         "title" : "Citing R and R Packages in Publications"
      },
      {
         "package" : "utils",
         "desc" : " Cite a bibentry object in text. The cite() function uses the cite() function from the default bibstyle if present, or citeNatbib() if not. citeNatbib() uses a style similar to that used by the LaTeX package natbib. ",
         "title" : " Cite a bibliography entry. ",
         "name" : "cite"
      },
      {
         "title" : "Bibliography Entries (Older Interface)",
         "desc" : " Functionality for specifying bibliographic information in enhanced BibTeX style. ",
         "package" : "utils",
         "name" : "citEntry"
      },
      {
         "title" : "Close a Socket",
         "desc" : " Closes the socket and frees the space in the file descriptor table. The port may not be freed immediately. ",
         "package" : "utils",
         "name" : "close.socket"
      },
      {
         "name" : "combn",
         "package" : "utils",
         "desc" : " Generate all combinations of the elements of x taken m at a time. If x is a positive integer, returns all combinations of the elements of seq(x) taken m at a time. If argument FUN is not NULL, applies a function given by the argument to each point. If simplify is FALSE, returns a list; otherwise returns an array, typically a matrix. ... are passed unchanged to the FUN function, if specified. ",
         "title" : "Generate All Combinations of n Elements, Taken m at a Time"
      },
      {
         "name" : "compareVersion",
         "package" : "utils",
         "desc" : " Compare two package version numbers to see which is later. ",
         "title" : "Compare Two Package Version Numbers"
      },
      {
         "name" : "contrib.url",
         "title" : "Find Appropriate Paths in CRAN-like Repositories",
         "package" : "utils",
         "desc" : " contrib.url adds the appropriate type-specific path within a repository to each URL in repos. "
      },
      {
         "name" : "count.fields",
         "package" : "utils",
         "desc" : " count.fields counts the number of fields, as separated by sep, in each of the lines of file read. ",
         "title" : "Count the Number of Fields per Line"
      },
      {
         "name" : "create.post",
         "title" : " Ancillary Function for Preparing Emails and Postings ",
         "package" : "utils",
         "desc" : " An ancillary function used by bug.report and help.request to prepare emails for submission to package maintainers or to mailing lists. "
      },
      {
         "title" : "Data Sets",
         "desc" : " Loads specified data sets, or list the available data sets. ",
         "package" : "utils",
         "name" : "data"
      },
      {
         "name" : "dataentry",
         "package" : "utils",
         "desc" : " A spreadsheet-like editor for entering or editing data. ",
         "title" : "Spreadsheet Interface for Entering Data"
      },
      {
         "name" : "debugger",
         "title" : "Post-Mortem Debugging",
         "package" : "utils",
         "desc" : " Functions to dump the evaluation environments (frames) and to examine dumped frames. "
      },
      {
         "desc" : " demo is a user-friendly interface to running some demonstration scripts. demo() gives the list of available topics. ",
         "package" : "utils",
         "title" : "Demonstrations of R Functionality",
         "name" : "demo"
      },
      {
         "package" : "utils",
         "desc" : " This function can be used to download a file from the Internet. ",
         "title" : "Download File from the Internet",
         "name" : "download.file"
      },
      {
         "package" : "utils",
         "desc" : " These functions can be used to automatically compare the version numbers of installed packages with the newest available version on the repositories and update outdated packages on the fly. ",
         "title" : "Download Packages from CRAN-like Repositories",
         "name" : "download.packages"
      },
      {
         "name" : "edit.data.frame",
         "title" : "Edit Data Frames and Matrices",
         "package" : "utils",
         "desc" : " Use data editor on data frame or matrix contents. "
      },
      {
         "name" : "edit",
         "title" : "Invoke a Text Editor",
         "package" : "utils",
         "desc" : " Invoke a text editor on an object. "
      },
      {
         "package" : "utils",
         "desc" : " Run all the code from the Examples part of 's online help topic topic with possible exceptions dontrun, dontshow, and donttest, see Details below. ",
         "title" : "Run an Examples Section from the Online Help",
         "name" : "example"
      },
      {
         "name" : "file.edit",
         "title" : "Edit One or More Files",
         "package" : "utils",
         "desc" : "Edit one or more files in a text editor."
      },
      {
         "name" : "file_test",
         "title" : " Shell-style Tests on Files ",
         "package" : "utils",
         "desc" : " Utility for shell-style file tests. "
      },
      {
         "name" : "findLineNum",
         "package" : "utils",
         "desc" : " These functions locate objects containing particular lines of source code, using the information saved when the code was parsed with keep.source = TRUE. ",
         "title" : " Find the Location of a Line of Source Code, or Set a Breakpoint There. "
      },
      {
         "name" : "fix",
         "desc" : " fix invokes edit on x and then assigns the new (edited) version of x in the user's workspace. ",
         "package" : "utils",
         "title" : "Fix an Object"
      },
      {
         "name" : "flush.console",
         "title" : "Flush Output to A Console",
         "package" : "utils",
         "desc" : " This does nothing except on console-based versions of . On the OS X and Windows GUIs, it ensures that the display of output in the console is current, even if output buffering is on. "
      },
      {
         "name" : "format",
         "package" : "utils",
         "desc" : " Format unordered (itemize) and ordered (enumerate) lists. ",
         "title" : "Format Unordered and Ordered Lists"
      },
      {
         "name" : "getAnywhere",
         "package" : "utils",
         "desc" : " These functions locate all objects with name matching their argument, whether visible on the search path, registered as an S3 method or in a namespace but not exported. getAnywhere() returns the objects and argsAnywhere() returns the arguments of any objects that are functions. ",
         "title" : "Retrieve an R Object, Including from a Namespace"
      },
      {
         "name" : "getFromNamespace",
         "title" : "Utility functions for Developing Namespaces",
         "package" : "utils",
         "desc" : " Utility functions to access and replace the non-exported functions in a namespace, for use in developing packages with namespaces. They should not be used in production code (except perhaps assignInMyNamespace, but see the Note). "
      },
      {
         "name" : "getParseData",
         "title" : " Get detailed parse information from object. ",
         "desc" : " If the \"keep.source\" option is TRUE, 's parser will attach detailed information on the object it has parsed. These functions retrieve that information. ",
         "package" : "utils"
      },
      {
         "title" : "Get An S3 Method",
         "package" : "utils",
         "desc" : " Get a method for an S3 generic, possibly from a namespace or the generic's registry. ",
         "name" : "getS3method"
      },
      {
         "name" : "glob2rx",
         "title" : "Change Wildcard or Globbing Pattern into Regular Expression",
         "package" : "utils",
         "desc" : " Change wildcard aka globbing patterns into the corresponding regular expressions (regexp). "
      },
      {
         "name" : "globalVariables",
         "package" : "utils",
         "desc" : " For globalVariables, the names supplied are of functions or other objects that should be regarded as defined globally when the check tool is applied to this package. The call to globalVariables will be included in the package's source. Repeated calls in the same package accumulate the names of the global variables. Typical examples are the fields and methods in reference classes, which appear to be global objects to codetools. (This case is handled automatically by setRefClass() and friends, using the supplied field and method names.) For suppressForeignCheck, the names supplied are of variables used as .NAME in foreign function calls which should not be checked by checkFF(registration = TRUE). Without this declaration, expressions other than simple character strings are assumed to evaluate to registered native symbol objects. The type of call (.Call, .External, etc.) and argument counts will be checked. With this declaration, checks on those names will usually be suppressed. (If the code uses an expression that should only be evaluated at runtime, the message can be suppressed by wrapping it in a dontCheck function call, or by saving it to a local variable, and suppressing messages about that variable. See the example below.) ",
         "title" : " Declarations Used in Checking a Package "
      },
      {
         "name" : "head",
         "package" : "utils",
         "desc" : " Returns the first or last parts of a vector, matrix, table, data frame or function. Since head() and tail() are generic functions, they may also have been extended to other classes. ",
         "title" : " Return the First or Last Part of an Object "
      },
      {
         "desc" : " help is the primary interface to the help systems. ",
         "package" : "utils",
         "title" : "Documentation",
         "name" : "help"
      },
      {
         "title" : "Send a Post to R-help",
         "package" : "utils",
         "desc" : " Prompts the user to check they have done all that is expected of them before sending a post to the R-help mailing list, provides a template for the post with session information included and optionally sends the email (on Unix systems). ",
         "name" : "help.request"
      },
      {
         "name" : "help.search",
         "title" : "Search the Help System",
         "package" : "utils",
         "desc" : " Allows for searching the help system for documentation matching a given character string in the (file) name, alias, title, concept or keyword entries (or any combination thereof), using either fuzzy matching or regular expression matching. Names and titles of the matched help entries are displayed nicely formatted. Vignette names, titles and keywords and demo names and titles may also be searched. "
      },
      {
         "title" : "Hypertext Documentation",
         "package" : "utils",
         "desc" : " Start the hypertext (currently HTML) version of 's online documentation. ",
         "name" : "help.start"
      },
      {
         "name" : "hsearch-utils",
         "package" : "utils",
         "desc" : " Utilities for searching the help system. ",
         "title" : "Help Search Utilities"
      },
      {
         "desc" : " Download and install packages from CRAN-like repositories or from local files. ",
         "package" : "utils",
         "title" : "Install Packages from Repositories or Local Files",
         "name" : "install.packages"
      },
      {
         "package" : "utils",
         "desc" : "Utility for installing add-on packages.",
         "title" : "Install Add-on Packages",
         "name" : "INSTALL"
      },
      {
         "package" : "utils",
         "desc" : " Find (or retrieve) details of all packages installed in the specified libraries. ",
         "title" : "Find Installed Packages",
         "name" : "installed.packages"
      },
      {
         "package" : "utils",
         "desc" : " This functions aims to find a suitable coding for the locale named, by default the current locale, and if it is a UTF-8 locale a suitable single-byte encoding. ",
         "title" : " Select a Suitable Encoding Name from a Locale Name ",
         "name" : "localeToCharset"
      },
      {
         "package" : "utils",
         "desc" : " ls.str and lsf.str are variations of ls applying str() to each matched name: see section Value. ",
         "title" : "List Objects and their Structure",
         "name" : "ls.str"
      },
      {
         "title" : " Show Package Maintainer ",
         "package" : "utils",
         "desc" : " Show the name and email address of the maintainer of a package. ",
         "name" : "maintainer"
      },
      {
         "name" : "make.packages.html",
         "desc" : " Re-create the HTML list of packages. ",
         "package" : "utils",
         "title" : "Update HTML Package List"
      },
      {
         "name" : "make.socket",
         "desc" : " With server = FALSE attempts to open a client socket to the specified port and host. With server = TRUE the process listens on the specified port for a connection and then returns a server socket. It is a good idea to use on.exit to ensure that a socket is closed, as you only get 64 of them. ",
         "package" : "utils",
         "title" : "Create a Socket Connection"
      },
      {
         "name" : "menu",
         "title" : "Menu Interaction Function",
         "desc" : " menu presents the user with a menu of choices labelled from 1 to the number of choices. To exit without choosing an item one can select 0. ",
         "package" : "utils"
      },
      {
         "title" : "List Methods for S3 Generic Functions or Classes",
         "package" : "utils",
         "desc" : " List all available methods for a S3 and S4 generic function, or all methods for an S3 or S4 class. ",
         "name" : "methods"
      },
      {
         "package" : "utils",
         "desc" : " Functions helping to maintain CRAN, some of them may also be useful for administrators of other repository networks. ",
         "title" : "Managing Repository Mirrors",
         "name" : "mirrorAdmin"
      },
      {
         "name" : "modifyList",
         "desc" : " Modifies a possibly nested list recursively by changing a subset of elements at each level to match a second list. ",
         "package" : "utils",
         "title" : "Recursively Modify Elements of a List"
      },
      {
         "desc" : " Build and query the news for R or add-on packages. ",
         "package" : "utils",
         "title" : "Build and Query R or Package News Information",
         "name" : "news"
      },
      {
         "name" : "object.size",
         "package" : "utils",
         "desc" : " Provides an estimate of the memory that is being used to store an object. ",
         "title" : "Report the Space Allocated for an Object"
      },
      {
         "title" : "Create a Skeleton for a New Source Package",
         "desc" : " package.skeleton automates some of the setup for a new source package. It creates directories, saves functions, data, and R code files to appropriate places, and creates skeleton help files and a Read-and-delete-me file describing further steps in packaging. ",
         "package" : "utils",
         "name" : "package.skeleton"
      },
      {
         "name" : "packageDescription",
         "title" : "Package Description",
         "package" : "utils",
         "desc" : " Parses and returns the DESCRIPTION file of a package. "
      },
      {
         "name" : "packageName",
         "title" : " Find package associated with an environment. ",
         "package" : "utils",
         "desc" : " Many environments are associated with a package; this function attempts to determine that package. "
      },
      {
         "name" : "packageStatus",
         "title" : "Package Management Tools",
         "desc" : " Summarize information about installed packages and packages available at various repositories, and automatically upgrade outdated packages. ",
         "package" : "utils"
      },
      {
         "desc" : " Displays a representation of the object named by x in a pager via file.show. ",
         "package" : "utils",
         "title" : "Invoke a Pager on an R Object",
         "name" : "page"
      },
      {
         "name" : "person",
         "package" : "utils",
         "desc" : " A class and utility methods for holding information about persons like name and email address. ",
         "title" : "Persons"
      },
      {
         "title" : "Utilities for Building and Checking Add-on Packages",
         "desc" : " Utilities for checking whether the sources of an add-on package work correctly, and for building a source package from them. ",
         "package" : "utils",
         "name" : "PkgUtils"
      },
      {
         "name" : "process.events",
         "package" : "utils",
         "desc" : " R front ends like the Windows GUI handle key presses and mouse clicks through events generated by the OS. These are processed automatically by R at intervals during computations, but in some cases it may be desirable to trigger immediate event handling. The process.events function does that. ",
         "title" : " Trigger event handling "
      },
      {
         "name" : "prompt",
         "desc" : " Facilitate the constructing of files documenting objects. ",
         "package" : "utils",
         "title" : "Produce Prototype of an R Documentation File"
      },
      {
         "package" : "utils",
         "desc" : " Generates a shell of documentation for a data set. ",
         "title" : "Generate Outline Documentation for a Data Set",
         "name" : "promptData"
      },
      {
         "title" : "Generate a Shell for Documentation of a Package",
         "package" : "utils",
         "desc" : " Generates a shell of documentation for an installed or source package. ",
         "name" : "promptPackage"
      },
      {
         "name" : "Question",
         "desc" : " These functions provide access to documentation. Documentation on a topic with name name (typically, an object or a data set) can be displayed by either help(\"name\") or ?name. ",
         "package" : "utils",
         "title" : "Documentation Shortcuts"
      },
      {
         "desc" : " This page documents a mechanism to generate relevant completions from a partially completed command line. It is not intended to be useful by itself, but rather in conjunction with other mechanisms that use it as a backend. The functions listed in the usage section provide a simple control and query mechanism. The actual interface consists of a few unexported functions described further down. ",
         "package" : "utils",
         "title" : "A Completion Generator for R",
         "name" : "rcompgen"
      },
      {
         "name" : "read.DIF",
         "title" : "Data Input from Spreadsheet",
         "desc" : " Reads a file in Data Interchange Format (DIF) and creates a data frame from it. DIF is a format for data matrices such as single spreadsheets. ",
         "package" : "utils"
      },
      {
         "name" : "read.fortran",
         "package" : "utils",
         "desc" : " Read fixed-format data files using Fortran-style format specifications. ",
         "title" : "Read Fixed-Format Data in a Fortran-like Style"
      },
      {
         "name" : "read.fwf",
         "desc" : " Read a table of fixed width formatted data into a data.frame. ",
         "package" : "utils",
         "title" : "Read Fixed Width Format Files"
      },
      {
         "desc" : " read.socket reads a string from the specified socket, write.socket writes to the specified socket. There is very little error checking done by either. ",
         "package" : "utils",
         "title" : " Read from or Write to a Socket",
         "name" : "read.socket"
      },
      {
         "package" : "utils",
         "desc" : " Reads a file in table format and creates a data frame from it, with cases corresponding to lines and variables to fields in the file. ",
         "title" : "Data Input",
         "name" : "read.table"
      },
      {
         "name" : "recover",
         "title" : "Browsing after an Error",
         "desc" : " This function allows the user to browse directly on any of the currently active function calls, and is suitable as an error option. The expression options(error = recover) will make this the error option. ",
         "package" : "utils"
      },
      {
         "name" : "relist",
         "title" : "Allow Re-Listing an unlist()ed Object",
         "package" : "utils",
         "desc" : " relist() is an S3 generic function with a few methods in order to allow easy inversion of unlist(obj) when that is used with an object obj of (S3) class \"relistable\". "
      },
      {
         "title" : "Remove Installed Packages",
         "desc" : " Removes installed packages/bundles and updates index information as necessary. ",
         "package" : "utils",
         "name" : "remove.packages"
      },
      {
         "name" : "REMOVE",
         "package" : "utils",
         "desc" : "Utility for removing add-on packages.",
         "title" : "Remove Add-on Packages"
      },
      {
         "desc" : " When options(\"keep.source\") is TRUE, a copy of the original source code to a function is stored with it. This function removes that copy. ",
         "package" : "utils",
         "title" : " Remove Stored Source from a Function. ",
         "name" : "removeSource"
      },
      {
         "package" : "utils",
         "desc" : " Returns the location of the home directory, which is the root of the installed tree. ",
         "title" : "R Home Directory",
         "name" : "RHOME"
      },
      {
         "name" : "roman",
         "title" : "Roman Numerals",
         "desc" : " Manipulate integers as roman numerals. ",
         "package" : "utils"
      },
      {
         "name" : "Rprof",
         "desc" : " Enable or disable profiling of the execution of expressions. ",
         "package" : "utils",
         "title" : "Enable Profiling of R's Execution"
      },
      {
         "name" : "Rprofmem",
         "package" : "utils",
         "desc" : " Enable or disable reporting of memory allocation in R. ",
         "title" : "Enable Profiling of R's Memory Use"
      },
      {
         "desc" : " This is an alternative front end for use in #! scripts and other scripting applications. ",
         "package" : "utils",
         "title" : "Scripting Front-End for R",
         "name" : "Rscript"
      },
      {
         "name" : "RShowDoc",
         "title" : "Show R Manuals and Other Documentation",
         "desc" : " Utility function to find and display documentation. ",
         "package" : "utils"
      },
      {
         "title" : " Search for Key Words or Phrases in Documentation ",
         "package" : "utils",
         "desc" : " Search for key words or phrases in help pages, vignettes or task views, using the search engine at http://search.r-project.org and view them in a web browser. ",
         "name" : "RSiteSearch"
      },
      {
         "name" : "rtags",
         "title" : " An Etags-like Tagging Utility for R ",
         "package" : "utils",
         "desc" : " rtags provides etags-like indexing capabilities for R code, using R's own parser. "
      },
      {
         "name" : "Rtangle",
         "title" : "R Driver for Stangle",
         "package" : "utils",
         "desc" : " A driver for Stangle that extracts code chunks. "
      },
      {
         "title" : "R/LaTeX Driver for Sweave",
         "package" : "utils",
         "desc" : " A driver for Sweave that translates R code chunks in LaTeX files. ",
         "name" : "RweaveLatex"
      },
      {
         "name" : "savehistory",
         "desc" : " Load or save or display the commands history. ",
         "package" : "utils",
         "title" : "Load or Save or Display the Commands History"
      },
      {
         "package" : "utils",
         "desc" : " Select item(s) from a character vector. ",
         "title" : "Select Items from a List",
         "name" : "select.list"
      },
      {
         "desc" : " Print version information about , the OS and attached or loaded packages. ",
         "package" : "utils",
         "title" : "Collect Information About the Current R Session",
         "name" : "sessionInfo"
      },
      {
         "package" : "utils",
         "desc" : " Interact with the user to choose the package repositories to be used. ",
         "title" : "Select Package Repositories",
         "name" : "setRepositories"
      },
      {
         "name" : "SHLIB",
         "title" : "Build Shared Object/DLL for Dynamic Loading",
         "desc" : " Compile the given source files and then link all specified object files into a shared object aka DLL which can be loaded into using dyn.load or library.dynam. ",
         "package" : "utils"
      },
      {
         "name" : "sourceutils",
         "desc" : " These functions extract information from source references. ",
         "package" : "utils",
         "title" : " Source Reference Utilities "
      },
      {
         "title" : "Stack or Unstack Vectors from a Data Frame or List",
         "package" : "utils",
         "desc" : " Stacking vectors concatenates multiple vectors into a single vector along with a factor indicating where each observation originated. Unstacking reverses this operation. ",
         "name" : "stack"
      },
      {
         "title" : "Compactly Display the Structure of an Arbitrary R Object",
         "package" : "utils",
         "desc" : " Compactly display the internal structure of an object, a diagnostic function and an alternative to summary (and to some extent, dput). Ideally, only one line for each basic structure is displayed. It is especially well suited to compactly display the (abbreviated) contents of (possibly nested) lists. The idea is to give reasonable output for any object. It calls args for (non-primitive) function objects. strOptions() is a convenience function for setting options(str = .), see the examples. ",
         "name" : "str"
      },
      {
         "name" : "summaryRprof",
         "desc" : " Summarise the output of the Rprof function to show the amount of time used by different functions. ",
         "package" : "utils",
         "title" : "Summarise Output of R Sampling Profiler"
      },
      {
         "title" : "Automatic Generation of Reports",
         "desc" : " Sweave provides a flexible framework for mixing text and R/S code for automatic report generation. The basic idea is to replace the code with its output, such that the final document only contains the text and the output of the statistical analysis: however, the source code can also be included. ",
         "package" : "utils",
         "name" : "Sweave"
      },
      {
         "package" : "utils",
         "desc" : " This function converts the syntax of files in Sweave format to another Sweave syntax definition. ",
         "title" : "Convert Sweave Syntax",
         "name" : "SweaveSyntConv"
      },
      {
         "name" : "SweaveUtils",
         "package" : "utils",
         "desc" : " These functions are handy for writing Sweave drivers and currently not documented. Look at the source code of the Sweave Latex driver (in this package) or the HTML driver (in the R2HTML package from CRAN) to see how they can be used. ",
         "title" : "Sweave Driver Utilities"
      },
      {
         "name" : "tar",
         "title" : " Create a Tar Archive ",
         "package" : "utils",
         "desc" : " Create a tar archive. "
      },
      {
         "desc" : " These methods convert objects to character vectors with BibTeX or LaTeX markup. ",
         "package" : "utils",
         "title" : "Converting R Objects to BibTeX or LaTeX",
         "name" : "toLatex"
      },
      {
         "title" : "Text Progress Bar",
         "desc" : " Text progress bar in the console. ",
         "package" : "utils",
         "name" : "txtProgressBar"
      },
      {
         "name" : "type.convert",
         "title" : "Type Conversion on Character Variables",
         "package" : "utils",
         "desc" : " Convert a character vector to logical, integer, numeric, complex or factor as appropriate. "
      },
      {
         "name" : "untar",
         "title" : " Extract or List Tar Archives ",
         "package" : "utils",
         "desc" : " Extract files from or list a tar archive. "
      },
      {
         "desc" : " Extract files from or list a zip archive. ",
         "package" : "utils",
         "title" : " Extract or List Zip Archives ",
         "name" : "unzip"
      },
      {
         "name" : "update.packages",
         "desc" : " old.packages indicates packages which have a (suitable) later version on the repositories whereas update.packages offers to download and install such packages. new.packages looks for (suitable) packages on the repositories that are not already installed, and optionally offers them for installation. ",
         "package" : "utils",
         "title" : "Compare Installed Packages with CRAN-like Repositories"
      },
      {
         "package" : "utils",
         "desc" : " Extension of file.show to display text files from a remote server. ",
         "title" : "Display a text URL",
         "name" : "url.show"
      },
      {
         "package" : "utils",
         "desc" : " Functions to encode or decode characters in URLs. ",
         "title" : "Encode or Decode a (partial) URL",
         "name" : "URLencode"
      },
      {
         "title" : "Defunct Functions in Package utils",
         "package" : "utils",
         "desc" : " The functions or variables listed here are no longer part of as they are not needed (any more). ",
         "name" : "utils-defunct"
      },
      {
         "name" : "utils-deprecated",
         "package" : "utils",
         "desc" : " These functions are provided for compatibility with older versions of only, and may be defunct as soon as of the next release. ",
         "title" : "Deprecated Functions in Package utils"
      },
      {
         "name" : "utils-package",
         "desc" : " R utility functions ",
         "package" : "utils",
         "title" : " The R Utils Package "
      },
      {
         "name" : "View",
         "title" : "Invoke a Data Viewer",
         "desc" : " Invoke a spreadsheet-style data viewer on a matrix-like object. ",
         "package" : "utils"
      },
      {
         "package" : "utils",
         "desc" : " View a specified package vignette, or list the available ones. ",
         "title" : "View or List Package Vignettes",
         "name" : "vignette"
      },
      {
         "title" : "Data Output",
         "package" : "utils",
         "desc" : " write.table prints its required argument x (after converting it to a data frame if it is not one nor a matrix) to a file or connection. ",
         "name" : "write.table"
      },
      {
         "title" : " Create Zip archives ",
         "desc" : " A wrapper for an external zip command to create zip archives. ",
         "package" : "utils",
         "name" : "zip"
      },
      {
         "package" : "man",
         "desc" : " Compile given source files so that they can subsequently be collected into a shared object using R CMD SHLIB or an executable program using R CMD LINK. ",
         "title" : "Compile Files for Use with R",
         "name" : "COMPILE"
      },
      {
         "name" : "LINK",
         "desc" : " Front-end for creating executable programs. ",
         "package" : "man",
         "title" : "Create Executable Programs"
      },
      {
         "name" : "memory.size",
         "title" : "Report on Memory Allocation",
         "desc" : " memory.size and memory.limit are used to manage the total memory allocation on Windows. On other platforms these are stubs which report infinity with a warning. ",
         "package" : "man"
      },
      {
         "name" : "nsl",
         "desc" : " Interface to gethostbyname. ",
         "package" : "man",
         "title" : "Look up the IP Address by Hostname"
      },
      {
         "name" : "arrangeWindows",
         "desc" : " This function allows you to tile or cascade windows, or to minimize or restore them. ",
         "package" : "man",
         "title" : " Rearrange windows in the R GUI. "
      },
      {
         "name" : "choose.dir",
         "desc" : " Use a Windows shell folder widget to choose a folder interactively. ",
         "package" : "man",
         "title" : "Choose a Folder Interactively"
      },
      {
         "name" : "choose.files",
         "package" : "man",
         "desc" : " Use a Windows file dialog to choose a list of zero or more files interactively. ",
         "title" : "Choose a List of Files Interactively"
      },
      {
         "name" : "clipboard",
         "title" : "Read/Write to/from the Windows Clipboard",
         "desc" : " Transfer text between a character vector and the Windows clipboard. ",
         "package" : "man"
      },
      {
         "title" : "DLL Version Information",
         "desc" : " Return the version of the package and the version of used to build the DLL, if available. ",
         "package" : "man",
         "name" : "DLL.version"
      },
      {
         "title" : "Get a Windows Handle",
         "package" : "man",
         "desc" : " Get the Windows handle of a window or of the process. ",
         "name" : "getWindowsHandle"
      },
      {
         "desc" : " This function gets the Windows handles of visible top level windows or windows within the MDI frame. ",
         "package" : "man",
         "title" : " Get handles of windows. ",
         "name" : "getWindowsHandles"
      },
      {
         "title" : "Report on Memory Allocation",
         "desc" : " memory.size reports the current or maximum memory allocation of the malloc function used in this version of . memory.limit reports or increases the limit in force on the total allocation. ",
         "package" : "man",
         "name" : "memory.size"
      },
      {
         "title" : "R for Windows Configuration",
         "package" : "man",
         "desc" : " The file Rconsole configures the R GUI console in this Windows port. The loadRconsole function loads a new configuration. The file Rdevga configures the graphics devices windows, win.graph, win.metafile and win.print, as well as the bitmap devices bmp, jpeg, png and tiff (which use for type = \"windows\" use windows internally). ",
         "name" : "Rwin configuration"
      },
      {
         "title" : "Read a Windows Registy Hive",
         "package" : "man",
         "desc" : " Read values of keys in the Windows Registry, and optionally whole hives. ",
         "name" : "readRegistry"
      },
      {
         "title" : " Set or disable the use of Windows internal functions for Internet access. ",
         "desc" : " With the --internet2 startup option, or via environment variable R_WIN_INTERNET2 or by calling this function, R will make use of the Windows functions underlying Internet Explorer. This allows specification of proxies, etc., in the Internet Options applet in Control Panel. Unlike the standard internal functions it will allow the use of https:// URLs and follow HTTP redirections. ",
         "package" : "man",
         "name" : "setInternet2"
      },
      {
         "name" : "setWindowTitle",
         "title" : "Set or get the Window Title, or Set the Statusbar",
         "desc" : " Set the title of the R window which will appear in the task bar, or of the statusbar (if in use). ",
         "package" : "man"
      },
      {
         "package" : "man",
         "desc" : " Convert file paths to the short form. This is an interface to the Windows API call GetShortPathName. ",
         "title" : "Express File Paths in Short Form",
         "name" : "shortPathName"
      },
      {
         "name" : "winDialog",
         "title" : "Dialog Boxes under Windows",
         "package" : "man",
         "desc" : " Put up a Windows dialog box to communicate with the user. There are various types, either for the user to select from a set of buttons or to edit a string. "
      },
      {
         "name" : "winextras",
         "package" : "man",
         "desc" : " Get the self-reported Windows version number. ",
         "title" : "Get Windows Version"
      },
      {
         "title" : "User Menus under Windows",
         "package" : "man",
         "desc" : " Enables users to add, delete and program menus under Windows. ",
         "name" : "winMenus"
      },
      {
         "name" : "winProgressBar",
         "title" : "Progress Bars under Windows",
         "package" : "man",
         "desc" : " Put up a Windows progress bar widget. "
      }
   ]
}

